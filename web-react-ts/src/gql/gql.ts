/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  mutation MakeGovernorshipAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForGovernorship {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeGovernorshipAdminDocument,
    "\n  mutation MakeCouncilAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilAdmin(\n      councilId: $councilId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilAdmin(\n      councilId: $councilId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCouncil {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCouncilAdminDocument,
    "\n  mutation MakeStreamAdmin($streamId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveStreamAdmin(\n      streamId: $streamId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamAdmin(\n      streamId: $streamId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForStream {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeStreamAdminDocument,
    "\n  mutation MakeCampusAdmin($campusId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveCampusAdmin(\n      campusId: $campusId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusAdmin(\n      campusId: $campusId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCampus {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCampusAdminDocument,
    "\n  mutation MakeOversightAdmin(\n    $oversightId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveOversightAdmin(\n      oversightId: $oversightId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightAdmin(\n      oversightId: $oversightId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForOversight {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeOversightAdminDocument,
    "\n  mutation MakeMinistryAdmin(\n    $ministryId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForMinistry {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeMinistryAdminDocument,
    "\n  mutation MakeCreativeArtsAdmin(\n    $creativeArtsId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCreativeArts {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCreativeArtsAdminDocument,
    "\n  query memberByEmail($email: String!) {\n    memberByEmail(email: $email) {\n      id\n      firstName\n      lastName\n      currentTitle\n      nameWithTitle\n      pictureUrl\n      stream_name\n\n      bacenta {\n        id\n        governorship {\n          id\n          council {\n            id\n            stream {\n              id\n              campus {\n                id\n                noIncomeTracking\n                currency\n                conversionRateToDollar\n                oversight {\n                  id\n                  denomination {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MemberByEmailDocument,
    "\n  query oversightBacentaSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.OversightBacentaSearchDocument,
    "\n  query gatheringBacentaSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringBacentaSearchDocument,
    "\n  query streamBacentaSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.StreamBacentaSearchDocument,
    "\n  query councilBacentaSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.CouncilBacentaSearchDocument,
    "\n  query governorshipBacentaSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GovernorshipBacentaSearchDocument,
    "\n  query memberBacentaSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key) {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberBacentaSearchDocument,
    "\n  query memberCampusSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      campusSearch(key: $key) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberCampusSearchDocument,
    "\n  query oversightCampusSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      campusSearch(key: $key, limit: 5) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.OversightCampusSearchDocument,
    "\n  query gatheringCouncilSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringCouncilSearchDocument,
    "\n  query streamCouncilSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.StreamCouncilSearchDocument,
    "\n  query memberCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      councilSearch(key: $key) {\n        id\n        name\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberCouncilSearchDocument,
    "\n  query gatheringCreativeArtsSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringCreativeArtsSearchDocument,
    "\n  query memberCreativeArtsSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberCreativeArtsSearchDocument,
    "\n  query oversightFellowshipSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.OversightFellowshipSearchDocument,
    "\n  query gatheringFellowshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringFellowshipSearchDocument,
    "\n  query streamFellowshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.StreamFellowshipSearchDocument,
    "\n  query councilFellowshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.CouncilFellowshipSearchDocument,
    "\n  query governorshipFellowshipSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GovernorshipFellowshipSearchDocument,
    "\n  query bacentaFellowshipSearch($id: ID!, $key: String!) {\n    bacentas(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.BacentaFellowshipSearchDocument,
    "\n  query memberFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key) {\n        id\n        name\n        bacenta {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberFellowshipSearchDocument,
    "\n  query gatheringGovernorshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringGovernorshipSearchDocument,
    "\n  query streamGovernorshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.StreamGovernorshipSearchDocument,
    "\n  query councilGovernorshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.CouncilGovernorshipSearchDocument,
    "\n  query memberGovernorshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key) {\n        id\n        name\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberGovernorshipSearchDocument,
    "\n  query memberHubCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubCouncilSearch(key: $key) {\n        id\n        name\n        ministry {\n          id\n          name\n        }\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberHubCouncilSearchDocument,
    "\n  query memberHubFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubFellowshipSearch(key: $key) {\n        id\n        name\n        hub {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberHubFellowshipSearchDocument,
    "\n  query memberHubSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubSearch(key: $key) {\n        id\n        name\n\n        governorship {\n          id\n          name\n        }\n\n        hubCouncil {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberHubSearchDocument,
    "\n  query memberMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n": types.MemberMemberSearchDocument,
    "\n  query basontaMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n": types.BasontaMemberSearchDocument,
    "\n  query basontaMemberSearchFromHub($id: ID!, $key: String!, $hubId: ID!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearchFromHub(hubId: $hubId, key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n": types.BasontaMemberSearchFromHubDocument,
    "\n  query gatheringMinistrySearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      ministrySearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringMinistrySearchDocument,
    "\n  query memberMinistrySearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      ministrySearch(key: $key) {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberMinistrySearchDocument,
    "\n  query gatheringStreamSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      streamSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringStreamSearchDocument,
    "\n  query memberStreamSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      streamSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MemberStreamSearchDocument,
    "\n  query CouncilAccountDashboard($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      hrAmount\n      bussingAmount\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.CouncilAccountDashboardDocument,
    "\n  query CampusAccountDashboard($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.CampusAccountDashboardDocument,
    "\n  query OversightAccountDashboard($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.OversightAccountDashboardDocument,
    "\n  query CampusByCouncilAccounts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streams {\n        id\n        name\n\n        councils(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.CampusByCouncilAccountsDocument,
    "\n  query OversightByCampusesAccounts($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      campuses {\n        id\n        name\n\n        streams(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.OversightByCampusesAccountsDocument,
    "\n  query getCouncilPendingApprovalTransactions($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      councils {\n        id\n        name\n        transactions(where: { status: \"pending approval\" }) {\n          id\n          createdAt\n          lastModified\n          amount\n          account\n          category\n          description\n          status\n          loggedBy {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.GetCouncilPendingApprovalTransactionsDocument,
    "\n  mutation ApproveExpense($transactionId: ID!, $charge: Float!) {\n    ApproveExpense(transactionId: $transactionId, charge: $charge) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.ApproveExpenseDocument,
    "\n  mutation DeclineExpense($transactionId: ID!) {\n    DeclineExpense(transactionId: $transactionId) {\n      id\n      createdAt\n      lastModified\n      amount\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.DeclineExpenseDocument,
    "\n  mutation DepositIntoCouncilCurrentAccounts(\n    $councilId: ID!\n    $weekdayBalanceDepositAmount: Float!\n  ) {\n    DepositIntoCouncilCurrentAccount(\n      councilId: $councilId\n      weekdayBalanceDepositAmount: $weekdayBalanceDepositAmount\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.DepositIntoCouncilCurrentAccountsDocument,
    "\n  mutation DepositIntoCouncilBussingSociety(\n    $councilId: ID!\n    $bussingSocietyBalance: Float!\n  ) {\n    DepositIntoCouncilBussingSociety(\n      councilId: $councilId\n      bussingSocietyBalance: $bussingSocietyBalance\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.DepositIntoCouncilBussingSocietyDocument,
    "\n  mutation setHrAmount($councilId: ID!, $amount: Float!) {\n    SetCouncilHRAmount(councilId: $councilId, amount: $amount) {\n      id\n      name\n      hrAmount\n    }\n  }\n": types.SetHrAmountDocument,
    "\n  mutation ExpenseRequest(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n    $description: String!\n    $accountType: String!\n  ) {\n    ExpenseRequest(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n      description: $description\n      accountType: $accountType\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.ExpenseRequestDocument,
    "\n  mutation DebitBussingSociety(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n  ) {\n    DebitBussingSociety(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.DebitBussingSocietyDocument,
    "\n  query getCampusTransactionHistory($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      transactions {\n        id\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.GetCampusTransactionHistoryDocument,
    "\n  query getCouncilTransactionHistory($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      transactions(options: { sort: { lastModified: DESC } }) {\n        id\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.GetCouncilTransactionHistoryDocument,
    "\n  query getTransactionDetails($id: ID!) {\n    accountTransactions(where: { id: $id }) {\n      id\n      createdAt\n      lastModified\n      bussingSocietyBalance\n      weekdayBalance\n      amount\n      account\n      category\n      charge\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.GetTransactionDetailsDocument,
    "\n  mutation undoBussingTransaction($transactionId: ID!) {\n    UndoBussingTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n": types.UndoBussingTransactionDocument,
    "\n  mutation undoWeekdayTransaction($transactionId: ID!) {\n    UndoWeekdayTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n": types.UndoWeekdayTransactionDocument,
    "\n  query StreamArrivalsHelpers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsCounters {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaICCount\n    }\n  }\n": types.StreamArrivalsHelpersDocument,
    "\n  mutation MakeStreamArrivalsCounter($streamId: ID!, $arrivalsCounterId: ID!) {\n    MakeStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.MakeStreamArrivalsCounterDocument,
    "\n  mutation RemoveStreamArrivalsCounter(\n    $streamId: ID!\n    $arrivalsCounterId: ID!\n  ) {\n    RemoveStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.RemoveStreamArrivalsCounterDocument,
    "\n  query councilArrivalsPayers($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsPayers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n": types.CouncilArrivalsPayersDocument,
    "\n  mutation MakeCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    MakeCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.MakeCouncilArrivalsPayerDocument,
    "\n  mutation RemoveCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    RemoveCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.RemoveCouncilArrivalsPayerDocument,
    "\n  mutation SetStreamArrivalTimes(\n    $id: ID!\n    $mobilisationStartTime: String!\n    $mobilisationEndTime: String!\n    $arrivalStartTime: String!\n    $arrivalEndTime: String!\n  ) {\n    SetStreamArrivalTimes(\n      id: $id\n      mobilisationStartTime: $mobilisationStartTime\n      mobilisationEndTime: $mobilisationEndTime\n      arrivalStartTime: $arrivalStartTime\n      arrivalEndTime: $arrivalEndTime\n    ) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n": types.SetStreamArrivalTimesDocument,
    "\n  query getStreamArrivalTimes($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n": types.GetStreamArrivalTimesDocument,
    "\n  mutation MakeGovernorshipArrrivalsAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForGovernorship {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.MakeGovernorshipArrrivalsAdminDocument,
    "\n  mutation MakeCouncilArrrivalsAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForCouncil {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCouncilArrrivalsAdminDocument,
    "\n  mutation MakeStreamArrrivalsAdmin(\n    $streamId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForStream {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeStreamArrrivalsAdminDocument,
    "\n  mutation MakeCampusArrrivalsAdmin(\n    $campusId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForCampus {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCampusArrrivalsAdminDocument,
    "\n  mutation UploadMobilisationPicture(\n    $bacentaId: ID!\n    $serviceDate: String!\n    $mobilisationPicture: String!\n  ) {\n    UploadMobilisationPicture(\n      bacentaId: $bacentaId\n      serviceDate: $serviceDate\n      mobilisationPicture: $mobilisationPicture\n    ) {\n      id\n      attendance\n      mobilisationPicture\n      serviceLog {\n        bacenta {\n          id\n          stream_name\n          bussing(limit: 1) {\n            id\n            serviceDate {\n              date\n            }\n            week\n            mobilisationPicture\n          }\n        }\n      }\n    }\n  }\n": types.UploadMobilisationPictureDocument,
    "\n  mutation RecordVehicleFromBacenta(\n    $bacentaId: ID!\n    $bussingRecordId: ID!\n    $leaderDeclaration: Int!\n    $vehicle: String!\n    $picture: String!\n  ) {\n    RecordVehicleFromBacenta(\n      bacentaId: $bacentaId\n      bussingRecordId: $bussingRecordId\n      leaderDeclaration: $leaderDeclaration\n      vehicle: $vehicle\n      picture: $picture\n    ) {\n      id\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      bussingRecord {\n        serviceLog {\n          bacenta {\n            id\n            stream_name\n            bussing(limit: 1) {\n              id\n              week\n            }\n          }\n        }\n      }\n    }\n  }\n": types.RecordVehicleFromBacentaDocument,
    "\n  mutation ConfirmVehicleByAdmin(\n    $vehicleRecordId: ID!\n    $attendance: Int!\n    $vehicle: String!\n    $comments: String!\n  ) {\n    ConfirmVehicleByAdmin(\n      vehicleRecordId: $vehicleRecordId\n      attendance: $attendance\n      vehicle: $vehicle\n      comments: $comments\n    ) {\n      id\n      attendance\n      arrivalTime\n      vehicle\n      vehicleTopUp\n      momoName\n      momoNumber\n\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      comments\n      outbound\n    }\n  }\n": types.ConfirmVehicleByAdminDocument,
    "\n  mutation SetVehicleSupport($vehicleRecordId: ID!) {\n    SetVehicleSupport(vehicleRecordId: $vehicleRecordId) {\n      id\n      vehicleTopUp\n    }\n  }\n": types.SetVehicleSupportDocument,
    "\n  mutation SendVehicleSupport(\n    $vehicleRecordId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $vehicleTopUp: Int!\n    $outbound: Boolean!\n  ) {\n    SendVehicleSupport(\n      vehicleRecordId: $vehicleRecordId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      vehicleTopUp: $vehicleTopUp\n      outbound: $outbound\n    ) {\n      id\n      vehicleTopUp\n      momoNumber\n      momoName\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n  }\n": types.SendVehicleSupportDocument,
    "\n  mutation SetSwellDate($date: String!) {\n    SetSwellDate(date: $date) {\n      id\n      date\n      swell\n    }\n  }\n": types.SetSwellDateDocument,
    "\n  mutation SetCodeOfTheDay($code: String!) {\n    SetCodeOfTheDay(code: $code)\n  }\n": types.SetCodeOfTheDayDocument,
    "\n  query governorshipArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      council {\n        id\n        stream {\n          id\n          name\n          meetingDay {\n            day\n            dayNumber\n          }\n          arrivalEndTime\n        }\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n    }\n  }\n": types.GovernorshipArrivalsDashboardDocument,
    "\n  query councilArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalEndTime\n      }\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorshipCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n": types.CouncilArrivalsDashboardDocument,
    "\n  query streamArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      arrivalEndTime\n      councilCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n": types.StreamArrivalsDashboardDocument,
    "\n  query gatheringArrivalsDashboard(\n    $id: ID!\n    $date: Date!\n    $arrivalDate: String!\n  ) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      streamCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n": types.GatheringArrivalsDashboardDocument,
    "\n  query confirmGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.ConfirmGovernorshipArrivalsDocument,
    "\n  query confirmCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.ConfirmCouncilArrivalsDocument,
    "\n  query confirmStreamArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.ConfirmStreamArrivalsDocument,
    "\n  query confirmGatheringArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.ConfirmGatheringArrivalsDocument,
    "\n  query bacentaArrivals($id: ID!, $date: Date!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        mobilisationStartTime\n        mobilisationEndTime\n        arrivalStartTime\n        arrivalEndTime\n      }\n      momoNumber\n      sprinterTopUp\n      urvanTopUp\n\n      arrivalsCodeOfTheDay\n      bussing(limit: 1) {\n        id\n        createdAt\n        serviceDate {\n          date\n        }\n        attendance\n        vehicleRecords {\n          id\n          vehicle\n          attendance\n          arrivalTime\n        }\n        week\n        mobilisationPicture\n      }\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n": types.BacentaArrivalsDocument,
    "\n  query governorshipLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsGovernorship {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n": types.GovernorshipLeaderArrivalsDocument,
    "\n  query councilLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCouncil {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n    }\n  }\n": types.CouncilLeaderArrivalsDocument,
    "\n  query streamLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsStream {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n    }\n  }\n": types.StreamLeaderArrivalsDocument,
    "\n  query gatheringLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCampus {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n    }\n  }\n": types.GatheringLeaderArrivalsDocument,
    "\n  query DisplayBussingRecords($bussingRecordId: ID!, $bacentaId: ID!) {\n    bussingRecords(where: { id: $bussingRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      serviceDate {\n        date\n      }\n      week\n      mobilisationPicture\n      leaderDeclaration\n      attendance\n      bussingTopUp\n      numberOfBusses\n      bussingPictures\n      numberOfSprinters\n      numberOfUrvans\n      numberOfCars\n      vehicleRecords {\n        id\n        vehicle\n        arrivalTime\n        attendance\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        arrivalStartTime\n        arrivalEndTime\n      }\n    }\n  }\n": types.DisplayBussingRecordsDocument,
    "\n  query DisplayVehicleRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      vehicle\n      picture\n      comments\n      arrivalTime\n      outbound\n      mobileNetwork\n      momoName\n      momoNumber\n      transactionReference\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalStartTime\n        arrivalEndTime\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n": types.DisplayVehicleRecordsDocument,
    "\n  query DisplayVehiclePaymentRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleCost\n      picture\n      momoNumber\n      momoName\n      vehicle\n      arrivalTime\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorship {\n        id\n        name\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      stream {\n        id\n        name\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n": types.DisplayVehiclePaymentRecordsDocument,
    "\n  query DisplayArrivalsPaymentData($arrivalsDate: String!, $streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      arrivalsPaymentData(arrivalsDate: $arrivalsDate) {\n        stream\n        bacenta\n        councilHead\n        leader\n        bacentaCode\n        attendance\n        confirmedAttendance\n        vehicle\n        outbound\n        topUp\n        vehicleCost\n        momoNumber\n        momoName\n        comments\n        council\n        governorship\n        society\n        date\n        arrivalTime\n      }\n    }\n  }\n": types.DisplayArrivalsPaymentDataDocument,
    "\n  query governorshipBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasNoActivityDocument,
    "\n  query councilBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.CouncilBacentasNoActivityDocument,
    "\n  query streamBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.StreamBacentasNoActivityDocument,
    "\n  query gatheringBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.GatheringBacentasNoActivityDocument,
    "\n  query governorshipBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasMobilisingDocument,
    "\n  query councilBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.CouncilBacentasMobilisingDocument,
    "\n  query streamBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.StreamBacentasMobilisingDocument,
    "\n  query gatheringBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GatheringBacentasMobilisingDocument,
    "\n  query governorshipBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasOnTheWayDocument,
    "\n  query councilBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.CouncilBacentasOnTheWayDocument,
    "\n  query streamBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.StreamBacentasOnTheWayDocument,
    "\n  query gatheringBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GatheringBacentasOnTheWayDocument,
    "\n  query governorshipBacentasToCount($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasToCountDocument,
    "\n  query councilBacentasToCount($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.CouncilBacentasToCountDocument,
    "\n  query councilVehiclesToBePaid($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasToBePaid(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehiclesToBePaid {\n            id\n            attendance\n            vehicle\n            vehicleTopUp\n            arrivalTime\n            transactionStatus\n            transactionReference\n          }\n        }\n      }\n    }\n  }\n": types.CouncilVehiclesToBePaidDocument,
    "\n  query streamBacentasToCount($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehicleRecords(where: { arrivalTime: null }) {\n            id\n            attendance\n            vehicle\n            arrivalTime\n          }\n        }\n      }\n    }\n  }\n": types.StreamBacentasToCountDocument,
    "\n  query gatheringBacentasToCount($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n": types.GatheringBacentasToCountDocument,
    "\n  query governorshipBacentasArrived($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasArrivedDocument,
    "\n  query councilBacentasArrived($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.CouncilBacentasArrivedDocument,
    "\n  query streamBacentasArrived($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.StreamBacentasArrivedDocument,
    "\n  query gatheringBacentasArrived($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.GatheringBacentasArrivedDocument,
    "\n  query governorshipBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.GovernorshipBacentasBelow8Document,
    "\n  query councilBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.CouncilBacentasBelow8Document,
    "\n  query streamBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.StreamBacentasBelow8Document,
    "\n  query gatheringBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n": types.GatheringBacentasBelow8Document,
    "\n  query councilByGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n": types.CouncilByGovernorshipArrivalsDocument,
    "\n  query streamByCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n": types.StreamByCouncilArrivalsDocument,
    "\n  query gatheringByStreamArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n": types.GatheringByStreamArrivalsDocument,
    "\n  query campusCampaigns($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n    }\n  }\n": types.CampusCampaignsDocument,
    "\n  query campusTrends($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n": types.CampusTrendsDocument,
    "\n  query equipmentCampusByStream($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n": types.EquipmentCampusByStreamDocument,
    "\n  mutation SetEquipmentDeadline(\n    $startDate: Date!\n    $endDate: Date!\n    $campusId: ID!\n  ) {\n    SetEquipmentDeadline(\n      startDate: $startDate\n      endDate: $endDate\n      id: $campusId\n    ) {\n      id\n    }\n  }\n": types.SetEquipmentDeadlineDocument,
    "\n  query equipmentEndDate($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      equipmentEndDate\n    }\n  }\n": types.EquipmentEndDateDocument,
    "\n  query campusEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $campusId: ID\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      streamCount\n    }\n  }\n": types.CampusEquipmentDefaultersNumberByGovernorshipAndFellowshipDocument,
    "\n  query equipmentCampusByStreamDefaulters($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n": types.EquipmentCampusByStreamDefaultersDocument,
    "\n  query equipmentCampusDefaultersByGovernorship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentCampusDefaultersByGovernorshipDocument,
    "\n  query equipmentCampusDefaultersByFellowship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentCampusDefaultersByFellowshipDocument,
    "\n  query streamCampaigns($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      campaigns\n    }\n  }\n": types.StreamCampaignsDocument,
    "\n  query streamTrends($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n": types.StreamTrendsDocument,
    "\n  query equipmentStreamByCouncil($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n": types.EquipmentStreamByCouncilDocument,
    "\n  query equipmentStreamByCouncilDefaulters($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n": types.EquipmentStreamByCouncilDefaultersDocument,
    "\n  query streamEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $streamId: ID\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      councilCount\n    }\n  }\n": types.StreamEquipmentDefaultersNumberByGovernorshipAndFellowshipDocument,
    "\n  query equipmentStreamDefaultersByGovernorship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentStreamDefaultersByGovernorshipDocument,
    "\n  query equipmentStreamDefaultersByFellowship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentStreamDefaultersByFellowshipDocument,
    "\n  query councilsCampaigns($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      campaigns\n    }\n  }\n": types.CouncilsCampaignsDocument,
    "\n  query councilsTrends($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n": types.CouncilsTrendsDocument,
    "\n  query equipmentCouncilByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        equipmentRecord {\n          id\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n": types.EquipmentCouncilByGovernorshipDocument,
    "\n  query councilEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $councilId: ID\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n": types.CouncilEquipmentDefaultersNumberByGovernorshipAndFellowshipDocument,
    "\n  query equipmentCouncilDefaultersByFellowship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentCouncilDefaultersByFellowshipDocument,
    "\n  query equipmentCouncilByGovernorshipDefaulters($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        equipmentRecord {\n          id\n          pulpits\n        }\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n": types.EquipmentCouncilByGovernorshipDefaultersDocument,
    "\n  query equipmentGovernorshipDefaultersByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentGovernorshipDefaultersByGovernorshipDocument,
    "\n  query governorshipCampaigns($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      campaigns\n    }\n  }\n": types.GovernorshipCampaignsDocument,
    "\n  query governorshipsTrends($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n": types.GovernorshipsTrendsDocument,
    "\n  mutation CreateGovernorshipEquipmentRecord(\n    $id: ID!\n    $pulpits: Int!\n    $date: Date!\n  ) {\n    CreateGovernorshipEquipmentRecord(id: $id, pulpits: $pulpits, date: $date) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n": types.CreateGovernorshipEquipmentRecordDocument,
    "\n  query LatestEquipmentRecord($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n": types.LatestEquipmentRecordDocument,
    "\n  query equipmentGovernorshipByBacenta($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      bacentas {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n": types.EquipmentGovernorshipByBacentaDocument,
    "\n  query equipmentGovernorshipDefaultersNumberByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n": types.EquipmentGovernorshipDefaultersNumberByFellowshipDocument,
    "\n  query equipmentGovernorshipDefaultersListByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.EquipmentGovernorshipDefaultersListByFellowshipDocument,
    "\n  query bacentaCampaigns($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      campaigns\n    }\n  }\n": types.BacentaCampaignsDocument,
    "\n  query bacentaTrends($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      equipmentRecord {\n        offeringBags\n        bluetoothSpeakers\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n": types.BacentaTrendsDocument,
    "\n  query bacentaByFellowship($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n    }\n  }\n": types.BacentaByFellowshipDocument,
    "\n  query fellowshipTrends($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n": types.FellowshipTrendsDocument,
    "\n  mutation CreateFellowshipEquipmentRecord(\n    $id: ID!\n    $offeringBags: Int!\n    $date: Date!\n    $bluetoothSpeakers: Int!\n  ) {\n    CreateFellowshipEquipmentRecord(\n      id: $id\n      offeringBags: $offeringBags\n      date: $date\n      bluetoothSpeakers: $bluetoothSpeakers\n    ) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n": types.CreateFellowshipEquipmentRecordDocument,
    "\n  query LatestEquipmenRecord($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n": types.LatestEquipmenRecordDocument,
    "\n  query Governorships($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      bacentas {\n        id\n      }\n    }\n  }\n": types.GovernorshipsDocument,
    "\n  mutation RecordMultiplicationEvent(\n    $churchId: ID!\n    $preacherId: String!\n    $crusadeLocation: String!\n    $attendance: Int!\n    $income: Float!\n    $souls: Int!\n    $miracles: Int!\n    $crusadePictures: [String!]!\n    $treasurerSelfie: String!\n    $crusadeDate: Date!\n    $treasurers: [ID]!\n    $foreignCurrency: String\n  ) {\n    RecordMultiplicationEvent(\n      churchId: $churchId\n      preacherId: $preacherId\n      crusadeLocation: $crusadeLocation\n      attendance: $attendance\n      income: $income\n      souls: $souls\n      miracles: $miracles\n      crusadePictures: $crusadePictures\n      treasurerSelfie: $treasurerSelfie\n      crusadeDate: $crusadeDate\n      treasurers: $treasurers\n      foreignCurrency: $foreignCurrency\n    ) {\n      attendance\n      crusadeLocation\n      crusadePictures\n      id\n      income\n      miracles\n      souls\n    }\n  }\n": types.RecordMultiplicationEventDocument,
    "\n  query MultiplicationRecords($id: ID!) {\n    multiplicationRecords(where: { id: $id }) {\n      id\n      crusadeLocation\n      attendance\n      income\n      foreignCurrency\n      souls\n      miracles\n      bankingSlip\n      bankingProof\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      crusadePictures\n      treasurerSelfie\n      crusadeDate {\n        date\n      }\n      preacher {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": types.MultiplicationRecordsDocument,
    "\n  query governorshipServiceMultiplicationGraphs($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n": types.GovernorshipServiceMultiplicationGraphsDocument,
    "\n  query CampusServiceMultiplicationGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n": types.CampusServiceMultiplicationGraphsDocument,
    "\n  query CouncilServiceMultiplicationGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n": types.CouncilServiceMultiplicationGraphsDocument,
    "\n  query streamServiceMultiplicationGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n": types.StreamServiceMultiplicationGraphsDocument,
    "\n  mutation MultiplicationBankingSlipSubmission(\n    $multiplicationRecordId: String!\n    $bankingSlip: String!\n  ) {\n    SubmitMultiplicationBankingSlip(\n      multiplicationRecordId: $multiplicationRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": types.MultiplicationBankingSlipSubmissionDocument,
    "\n  query campusMultiplicationBankingSlipQueries($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n": types.CampusMultiplicationBankingSlipQueriesDocument,
    "\n  query streamMultiplicationBankingSlipQueries($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n": types.StreamMultiplicationBankingSlipQueriesDocument,
    "\n  query councilMultiplicationBankingSlipQueries($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n": types.CouncilMultiplicationBankingSlipQueriesDocument,
    "\n  query governorshipMultiplicationBankingSlipQueries($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n": types.GovernorshipMultiplicationBankingSlipQueriesDocument,
    "\n  query campusAggregateMemberConversion($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.CampusAggregateMemberConversionDocument,
    "\n  query streamAggregateMemberConversion($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.StreamAggregateMemberConversionDocument,
    "\n  query councilAggregateMemberConversion($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.CouncilAggregateMemberConversionDocument,
    "\n  query governorshipAggregateMemberConversion($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.GovernorshipAggregateMemberConversionDocument,
    "\n  query bacentaAggregateMemberConversion($bacentaId: ID!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.BacentaAggregateMemberConversionDocument,
    "\n  query fellowshipAggregateMemberConversion($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n": types.FellowshipAggregateMemberConversionDocument,
    "\n  query streamSheepSeekers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      sheepseekers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      activeBacentaCount\n    }\n  }\n": types.StreamSheepSeekersDocument,
    "\n  mutation MakeStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    MakeStreamSheepSeeker(streamId: $streamId, sheepseekerId: $sheepseekerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.MakeStreamSheepSeekerDocument,
    "\n  mutation RemoveStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    RemoveStreamSheepSeeker(\n      streamId: $streamId\n      sheepseekerId: $sheepseekerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.RemoveStreamSheepSeekerDocument,
    "\n  query campusStatForYearTillDate(\n    $campusId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n": types.CampusStatForYearTillDateDocument,
    "\n  query streamStatForYearTillDate(\n    $streamId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n": types.StreamStatForYearTillDateDocument,
    "\n  query councilStatForYearTillDate(\n    $councilId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n": types.CouncilStatForYearTillDateDocument,
    "\n  query governorshipStatForYearTillDate(\n    $governorshipId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n": types.GovernorshipStatForYearTillDateDocument,
    "\n  query bacentaStatForYearTillDate(\n    $bacentaId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n": types.BacentaStatForYearTillDateDocument,
    "\n  mutation RemoveRoleFromMember($role: String!) {\n    RemoveRoleFromMember(role: $role)\n  }\n": types.RemoveRoleFromMemberDocument,
    "\n  query fellowshipLeaderDashboard($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        fullName\n      }\n      serviceLogs {\n        id\n        historyRecord\n        serviceRecords {\n          createdAt\n          attendance\n          income\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n": types.FellowshipLeaderDashboardDocument,
    "\n  query churchList($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      leadsFellowship {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsBacenta {\n        id\n        name\n        vacationStatus\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n      leadsCouncil {\n        id\n        name\n      }\n      leadsStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      leadsCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n      leadsOversight {\n        id\n        name\n      }\n      leadsDenomination {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isAdminForCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForDenomination {\n        id\n        name\n      }\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n      }\n      isArrivalsAdminForStream {\n        id\n        name\n        vacationStatus\n      }\n      isArrivalsAdminForCampus {\n        id\n        name\n      }\n\n      #MArrivals\n      isArrivalsCounterForStream {\n        id\n        name\n      }\n      isArrivalsAdminForCouncil {\n        id\n        name\n      }\n\n      isTellerForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isArrivalsPayerForCouncil {\n        id\n        name\n      }\n\n      #sheepSeeking\n      isSheepSeekerForStream {\n        id\n        name\n        bankAccount\n      }\n\n      leadsHub {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n        vacationStatus\n      }\n      isAdminForCreativeArts {\n        id\n        name\n      }\n    }\n  }\n": types.ChurchListDocument,
    "\n  query churchesLed($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberCount\n      basontaMembershipCount\n      leadsFellowshipCount\n      leadsBacentaCount\n      leadsAdminsGovernorshipCount\n      leadsAdminsCouncilCount\n      leadsAdminsCampusCount\n      leadsHubCount\n      leadsAdminsMinistryCount\n      leadsAdminsCreativeArtsCount\n    }\n  }\n": types.ChurchesLedDocument,
    "\n  query fellowshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsFellowship {\n        id\n        name\n        stream_name\n        memberCount\n        vacationStatus\n\n        services(limit: 4) {\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n": types.FellowshipLeaderDocument,
    "\n  query bacentaLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsBacenta {\n        id\n        name\n        stream_name\n\n        vacationStatus\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.BacentaLeaderDocument,
    "\n  query governorshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsGovernorship {\n        id\n        name\n        stream_name\n\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.GovernorshipLeaderDocument,
    "\n  query councilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCouncil {\n        id\n        name\n        stream_name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.CouncilLeaderDocument,
    "\n  query streamLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsStream {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.StreamLeaderDocument,
    "\n  query campusLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.CampusLeaderDocument,
    "\n  query oversightLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.OversightLeaderDocument,
    "\n  query denominationLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.DenominationLeaderDocument,
    "\n  query governorshipAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.GovernorshipAdminDocument,
    "\n  query councilAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.CouncilAdminDocument,
    "\n  query streamAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.StreamAdminDocument,
    "\n  query campusAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n": types.CampusAdminDocument,
    "\n  query oversightAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n": types.OversightAdminDocument,
    "\n  query denominationAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n": types.DenominationAdminDocument,
    "\n  query governorshipArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n": types.GovernorshipArrivalsAdminDocument,
    "\n  query councilArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n": types.CouncilArrivalsAdminDocument,
    "\n  query streamArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n": types.StreamArrivalsAdminDocument,
    "\n  query campusArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCampus {\n        id\n        name\n\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n": types.CampusArrivalsAdminDocument,
    "\n  query streamArrivalsCounter($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsCounterForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.StreamArrivalsCounterDocument,
    "\n  query streamArrivalsTeller($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isTellerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.StreamArrivalsTellerDocument,
    "\n  query sheepSheepSeekerStream($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isSheepSeekerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.SheepSheepSeekerStreamDocument,
    "\n  query hubLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHub {\n        id\n        name\n\n        rehearsals(limit: 4) {\n          id\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n": types.HubLeaderDocument,
    "\n  query hubCouncilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHubCouncil {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.HubCouncilLeaderDocument,
    "\n  query ministryLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.MinistryLeaderDocument,
    "\n  query creativeArtsLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.CreativeArtsLeaderDocument,
    "\n  query ministryAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.MinistryAdminDocument,
    "\n  query creativeArtsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n": types.CreativeArtsAdminDocument,
    "\n  mutation CreateMember(\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $email: String\n    $phoneNumber: String!\n    $whatsappNumber: String!\n    $dob: String!\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $visitationArea: String!\n    $basonta: String\n    $pictureUrl: String!\n  ) {\n    CreateMember(\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      visitationArea: $visitationArea\n      bacenta: $bacenta\n      basonta: $basonta\n      pictureUrl: $pictureUrl\n    ) {\n      id\n      firstName\n      lastName\n      stream_name\n\n      bacenta {\n        id\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.CreateMemberDocument,
    "\n  mutation AddMemberTitle(\n    $memberId: ID!\n    $title: String # $status: Boolean # $date: String\n    $date: Date\n  ) {\n    updateMembers(\n      where: { id: $memberId }\n      connect: {\n        title: { where: { node: { name: $title } }, edge: { date: $date } }\n      }\n    ) {\n      members {\n        id\n        firstName\n        lastName\n        title {\n          name\n        }\n        titleConnection {\n          edges {\n            date\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddMemberTitleDocument,
    "\n  mutation CreateFellowship(\n    $name: String!\n    $bacentaId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateFellowship(\n      name: $name\n      bacentaId: $bacentaId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n      }\n      bacenta {\n        id\n      }\n    }\n  }\n": types.CreateFellowshipDocument,
    "\n  mutation CreateBacenta(\n    $name: String!\n    $governorshipId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateBacenta(\n      name: $name\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      governorship {\n        id\n        bacentas {\n          id\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.CreateBacentaDocument,
    "\n  mutation CreateGovernorship($name: String!, $leaderId: ID!, $councilId: ID!) {\n    CreateGovernorship(\n      name: $name\n      leaderId: $leaderId\n      councilId: $councilId\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n        governorships {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateGovernorshipDocument,
    "\n  mutation CreateCouncil($name: String!, $leaderId: ID!, $streamId: ID!) {\n    CreateCouncil(name: $name, leaderId: $leaderId, streamId: $streamId) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        councils {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateCouncilDocument,
    "\n  mutation CreateStream(\n    $name: String!\n    $leaderId: ID!\n    $campusId: ID!\n    $meetingDay: String!\n    $bankAccount: String!\n  ) {\n    CreateStream(\n      name: $name\n      leaderId: $leaderId\n      campusId: $campusId\n      meetingDay: $meetingDay\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      campus {\n        id\n        streams {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateStreamDocument,
    "\n  mutation CreateCampus(\n    $name: String!\n    $leaderId: ID!\n    $oversightId: ID!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    CreateCampus(\n      name: $name\n      leaderId: $leaderId\n      oversightId: $oversightId\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      oversight {\n        id\n        campuses {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateCampusDocument,
    "\n  mutation CreateOversight(\n    $name: String!\n    $leaderId: ID!\n    $denominationId: ID!\n  ) {\n    CreateOversight(\n      name: $name\n      leaderId: $leaderId\n      denominationId: $denominationId\n    ) {\n      id\n      name\n\n      denomination {\n        id\n        oversights {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateOversightDocument,
    "\n  mutation CreateCreativeArts($name: String!, $leaderId: ID!, $campusId: ID!) {\n    CreateCreativeArts(name: $name, leaderId: $leaderId, campusId: $campusId) {\n      id\n      name\n    }\n  }\n": types.CreateCreativeArtsDocument,
    "\n  mutation CreateMinistry(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $streamId: ID!\n    $bankAccount: String!\n  ) {\n    CreateMinistry(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      streamId: $streamId\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n    }\n  }\n": types.CreateMinistryDocument,
    "\n  mutation CreateHubCouncil($leaderId: ID!, $ministryId: ID!, $councilId: ID!) {\n    CreateHubCouncil(\n      leaderId: $leaderId\n      ministryId: $ministryId\n      councilId: $councilId\n    ) {\n      id\n      name\n    }\n  }\n": types.CreateHubCouncilDocument,
    "\n  mutation CreateHub(\n    $name: String!\n    $leaderId: ID!\n    $hubCouncilId: ID!\n    $governorshipId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateHub(\n      name: $name\n      leaderId: $leaderId\n      hubCouncilId: $hubCouncilId\n      governorshipId: $governorshipId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n    }\n  }\n": types.CreateHubDocument,
    "\n  mutation CreateMemberAccount($memberId: ID!) {\n    CreateMemberAccount(memberId: $memberId) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n    }\n  }\n": types.CreateMemberAccountDocument,
    "\n  mutation NewFellowshipLeader($fellowshipId: ID!, $leaderId: ID!) {\n    MakeFellowshipLeader(fellowshipId: $fellowshipId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewFellowshipLeaderDocument,
    "\n  mutation NewBacentaLeader($bacentaId: ID!, $leaderId: ID!) {\n    MakeBacentaLeader(bacentaId: $bacentaId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewBacentaLeaderDocument,
    "\n  mutation NewGovernorshipLeader($governorshipId: ID!, $leaderId: ID!) {\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewGovernorshipLeaderDocument,
    "\n  mutation NewCouncilLeader($councilId: ID!, $leaderId: ID!) {\n    MakeCouncilLeader(councilId: $councilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewCouncilLeaderDocument,
    "\n  mutation NewStreamLeader($streamId: ID!, $leaderId: ID!) {\n    MakeStreamLeader(streamId: $streamId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewStreamLeaderDocument,
    "\n  mutation NewCampusLeader($campusId: ID!, $leaderId: ID!) {\n    MakeCampusLeader(campusId: $campusId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewCampusLeaderDocument,
    "\n  mutation NewOversightLeader($oversightId: ID!, $leaderId: ID!) {\n    MakeOversightLeader(oversightId: $oversightId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewOversightLeaderDocument,
    "\n  mutation NewCreativeArtsLeader($creativeArtsId: ID!, $leaderId: ID!) {\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewCreativeArtsLeaderDocument,
    "\n  mutation NewMinistryLeader($ministryId: ID!, $leaderId: ID!) {\n    MakeMinistryLeader(ministryId: $ministryId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewMinistryLeaderDocument,
    "\n  mutation NewHubCouncilLeader($hubCouncilId: ID!, $leaderId: ID!) {\n    MakeHubCouncilLeader(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewHubCouncilLeaderDocument,
    "\n  mutation NewHubLeader($hubId: ID!, $leaderId: ID!) {\n    MakeHubLeader(hubId: $hubId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.NewHubLeaderDocument,
    "\n  query displayMemberBio($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      stickyNote\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n      title {\n        name\n      }\n    }\n  }\n": types.DisplayMemberBioDocument,
    "\n  query displayMemberLeadership($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      leadsBacenta {\n        id\n        name\n        stream_name\n      }\n      leadsGovernorship {\n        id\n        name\n        stream_name\n      }\n      leadsCouncil {\n        id\n        name\n        stream_name\n      }\n      leadsStream {\n        id\n        name\n      }\n      leadsCampus {\n        id\n        name\n      }\n      leadsCreativeArts {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n      }\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsHub {\n        id\n        name\n      }\n    }\n  }\n": types.DisplayMemberLeadershipDocument,
    "\n  query displayMemberAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      #Admin Information\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n      }\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n      }\n\n      isAdminForCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n      }\n    }\n  }\n": types.DisplayMemberAdminDocument,
    "\n  query displayMemberChurch($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      #church info\n      basonta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n      }\n\n      bacenta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      #Personal history\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayMemberChurchDocument,
    "\n  query displayFellowship($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      hubStatus\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      hub {\n        id\n        name\n        hubCouncil {\n          id\n          name\n          ministry {\n            id\n            name\n            creativeArts {\n              id\n              name\n            }\n          }\n        }\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n": types.DisplayFellowshipDocument,
    "\n  query displayFellowshipHistory($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayFellowshipHistoryDocument,
    "\n  query displayBacentaHistory($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayBacentaHistoryDocument,
    "\n  query displayBacenta($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      bankingCode\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      vacationStatus\n      target\n      outbound\n      sprinterTopUp\n      urvanTopUp\n\n      momoNumber\n      stream_name\n\n      governorship {\n        id\n        name\n        stream_name\n        council {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n\n      memberCount\n    }\n  }\n": types.DisplayBacentaDocument,
    "\n  query displayGovernorship($id: ID!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream_name\n      hubCount\n      bacentaCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      bacentas(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n      hubs(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      council {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      memberCount\n    }\n  }\n": types.DisplayGovernorshipDocument,
    "\n  query displayCouncil($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream {\n        id\n        name\n      }\n      stream_name\n      governorshipCount\n      bacentaCount\n      hubCouncilCount\n      hubCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      stream {\n        id\n        name\n      }\n      governorships(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      hubCouncils(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayCouncilDocument,
    "\n  query displayStream($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      target\n      councilCount\n      governorshipCount\n      bacentaCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      ministryCount\n      hubCount\n      hubCouncilCount\n      meetingDay {\n        day\n        dayNumber\n      }\n      campus {\n        id\n        name\n      }\n      councils(options: { limit: 5 }) {\n        id\n        name\n      }\n      ministries(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayStreamDocument,
    "\n  query displayCampus($id: ID!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      target\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      creativeArtsCount\n      oversight {\n        id\n        name\n      }\n      streams(options: { limit: 5 }) {\n        id\n        name\n        stream_name\n      }\n      creativeArts(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayCampusDocument,
    "\n  query displayOversight($id: ID!) {\n    oversights(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      denomination {\n        id\n        name\n      }\n      campuses {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayOversightDocument,
    "\n  query DisplayCreativeArts($id: ID!) {\n    creativeArts(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      ministryCount\n      hubCouncilCount\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      ministries {\n        id\n        name\n      }\n      campus {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayCreativeArtsDocument,
    "\n  query displayDenomination($id: ID!) {\n    denominations(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n\n      oversights {\n        id\n        name\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayDenominationDocument,
    "\n  query displayMinistry($id: ID!) {\n    ministries(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      stream {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      hubCouncilCount\n      hubCount\n\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncils {\n        id\n        name\n      }\n      creativeArts {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.DisplayMinistryDocument,
    "\n  query DisplayHubCouncil($id: ID!) {\n    hubCouncils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      memberCount\n      council {\n        id\n        name\n      }\n      hubs {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      ministry {\n        id\n        name\n        creativeArts {\n          id\n          name\n          campus {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.DisplayHubCouncilDocument,
    "\n  query DisplayHub($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      meetingDay {\n        day\n      }\n      location {\n        longitude\n        latitude\n      }\n      governorship {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      memberCount\n      vacationHubFellowshipCount\n      activeHubFellowshipCount\n\n      hubFellowships {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncil {\n        id\n        name\n\n        ministry {\n          id\n          name\n          creativeArts {\n            id\n            name\n            campus {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.DisplayHubDocument,
    "\n  query displayHubHistory($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      rehearsals(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.DisplayHubHistoryDocument,
    "\n  query displayHubFellowship($id: ID!) {\n    hubFellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n": types.DisplayHubFellowshipDocument,
    "\n  query MemberHistory($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MemberHistoryDocument,
    "\n  query StreamsHistory($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.StreamsHistoryDocument,
    "\n  query CouncilsHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CouncilsHistoryDocument,
    "\n  query GovernorshipsHistory($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.GovernorshipsHistoryDocument,
    "\n  query BacentasHistory($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.BacentasHistoryDocument,
    "\n  query HubCouncilsHistory($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.HubCouncilsHistoryDocument,
    "\n  query HubHistory($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.HubHistoryDocument,
    "\n  query MinistryHistory($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MinistryHistoryDocument,
    "\n  query CreativeArtsHistory($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CreativeArtsHistoryDocument,
    "\n  query FellowshipsHistory($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.FellowshipsHistoryDocument,
    "\n  query CampusHistory($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CampusHistoryDocument,
    "\n  query getFederalMembers {\n    members(options: { sort: { firstName: ASC } }) {\n      id\n      firstName\n      lastName\n      pictureUrl\n      bacenta {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n      maritalStatus {\n        status\n      }\n      gender {\n        gender\n      }\n      title {\n        name\n      }\n      leadsFellowship {\n        name\n      }\n      leadsBacenta {\n        id\n        name\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n\n      leadsHubFellowship {\n        id\n        name\n      }\n      leadsHub {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n": types.GetFederalMembersDocument,
    "\n  query getServantMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetServantMembersDocument,
    "\n  query getGatheringMembers($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetGatheringMembersDocument,
    "\n  query getStreamMembers($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetStreamMembersDocument,
    "\n  query getOversightMembers($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetOversightMembersDocument,
    "\n  query getCouncilMembers($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetCouncilMembersDocument,
    "\n  query getGovernorshipMembers($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetGovernorshipMembersDocument,
    "\n  query getBacentaMembers($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetBacentaMembersDocument,
    "\n  query getFellowshipMembers($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetFellowshipMembersDocument,
    "\n  query getHubMembers($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetHubMembersDocument,
    "\n  query getHubCouncilMembers($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetHubCouncilMembersDocument,
    "\n  query getMinistryMembers($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetMinistryMembersDocument,
    "\n  query getCreativeArtsMembers($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetCreativeArtsMembersDocument,
    "\n  query memberSearch($key: String!, $id: ID!, $limit: Int!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: $limit) {\n        id\n        firstName\n        lastName\n        nameWithTitle\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      oversightSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n\n      campusSearch(key: $key, limit: $limit) {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      streamSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      councilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      governorshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      bacentaSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      fellowshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      creativeArtsSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      ministrySearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubCouncilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.MemberSearchDocument,
    "\n  query fellowshipAvgWeekdayStats($fellowshipId: ID, $days: Int!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgFellowshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.FellowshipAvgWeekdayStatsDocument,
    "\n  query bacentaAvgWeekdayStats($bacentaId: ID, $days: Int!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgBacentaBussingAttendance(days: $days)\n        avgBacentaWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.BacentaAvgWeekdayStatsDocument,
    "\n  query governorshipAvgWeekdayStats($governorshipId: ID, $days: Int!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgGovernorshipBussingAttendance(days: $days)\n        avgGovernorshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.GovernorshipAvgWeekdayStatsDocument,
    "\n  query councilAvgWeekdayStats($councilId: ID, $days: Int!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      stream {\n        id\n        name\n        avgCouncilBussingAttendance(days: $days)\n        avgCouncilWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.CouncilAvgWeekdayStatsDocument,
    "\n  query streamAvgWeekdayStats($streamId: ID, $days: Int!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      campus {\n        id\n        name\n        avgStreamBussingAttendance(days: $days)\n        avgStreamWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.StreamAvgWeekdayStatsDocument,
    "\n  query campusAvgWeekdayStats($campusId: ID, $days: Int!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      oversight {\n        id\n        name\n        avgCampusBussingAttendance(days: $days)\n        avgCampusWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n": types.CampusAvgWeekdayStatsDocument,
    "\n  query getMinistryHubCouncilsList($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n      }\n    }\n  }\n": types.GetMinistryHubCouncilsListDocument,
    "\n  query getHubCouncilGovernorships($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n": types.GetHubCouncilGovernorshipsDocument,
    "\n  query getMinistryCouncils($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n": types.GetMinistryCouncilsDocument,
    "\n  query getCreativeArtsStreams($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      streams {\n        id\n        name\n      }\n    }\n  }\n": types.GetCreativeArtsStreamsDocument,
    "\n  mutation MakeFellowshipLeader(\n    $fellowshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeFellowshipLeaderDocument,
    "\n  mutation MakeBacentaLeader(\n    $bacentaId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        momoNumber\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n": types.MakeBacentaLeaderDocument,
    "\n  mutation MakeGovernorshipLeader(\n    $governorshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n": types.MakeGovernorshipLeaderDocument,
    "\n  mutation MakeCouncilLeader(\n    $councilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCouncilLeader(\n      councilId: $councilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilLeader(\n      councilId: $councilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n": types.MakeCouncilLeaderDocument,
    "\n  mutation MakeStreamLeader(\n    $streamId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveStreamLeader(\n      streamId: $streamId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamLeader(\n      streamId: $streamId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n": types.MakeStreamLeaderDocument,
    "\n  mutation MakeCampusLeader(\n    $campusId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCampusLeader(\n      campusId: $campusId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusLeader(\n      campusId: $campusId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCampusLeaderDocument,
    "\n  mutation MakeOversightLeader(\n    $oversightId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveOversightLeader(\n      oversightId: $oversightId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightLeader(\n      oversightId: $oversightId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeOversightLeaderDocument,
    "\n  mutation MakeDenominationLeader(\n    $denominationId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsDenomination {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeDenominationLeaderDocument,
    "\n  mutation MakeCreativeArtsLeader(\n    $creativeArtsId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeCreativeArtsLeaderDocument,
    "\n  mutation MakeMinistryLeader(\n    $ministryId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeMinistryLeaderDocument,
    "\n  mutation MakeHubCouncilLeader(\n    $hubCouncilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeHubCouncilLeaderDocument,
    "\n  mutation MakeHubLeader($hubId: ID!, $newLeaderId: ID!, $oldLeaderId: ID!) {\n    RemoveHubLeader(\n      hubId: $hubId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubLeader(\n      hubId: $hubId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.MakeHubLeaderDocument,
    "\n  mutation CloseDownBacenta($id: ID!, $leaderId: ID!) {\n    CloseDownBacenta(bacentaId: $id, leaderId: $leaderId) {\n      id\n      name\n\n      bacentas {\n        id\n        name\n      }\n    }\n  }\n": types.CloseDownBacentaDocument,
    "\n  mutation CloseDownGovernorship($id: ID!, $adminId: ID!, $leaderId: ID!) {\n    CloseDownGovernorship(\n      governorshipId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n": types.CloseDownGovernorshipDocument,
    "\n  mutation CloseDownCouncil($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCouncil(councilId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n": types.CloseDownCouncilDocument,
    "\n  mutation CloseDownStream($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownStream(streamId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      streams {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownStreamDocument,
    "\n  mutation CloseDownCampus($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCampus(campusId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      campuses {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownCampusDocument,
    "\n  mutation CloseDownOversight($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownOversight(\n      oversightId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      oversights {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownOversightDocument,
    "\n  mutation CloseDownHub($hubId: ID!, $leaderId: ID!) {\n    CloseDownHub(hubId: $hubId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownHubDocument,
    "\n  mutation CloseDownHubCouncil($hubCouncilId: ID!, $leaderId: ID!) {\n    CloseDownHubCouncil(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownHubCouncilDocument,
    "\n  mutation CloseDownMinistry($ministryId: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownMinistry(\n      ministryId: $ministryId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownMinistryDocument,
    "\n  mutation CloseDownCreativeArtss(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $adminId: ID!\n  ) {\n    CloseDownCreativeArts(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.CloseDownCreativeArtssDocument,
    "\n  mutation LogFellowshipHistory(\n    $fellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldBacentaId: ID\n    $newBacentaId: ID\n  ) {\n    LogFellowshipHistory(\n      fellowshipId: $fellowshipId\n      historyRecord: $historyRecord\n      oldLeaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n      oldBacentaId: $oldBacentaId\n      newBacentaId: $newBacentaId\n    ) {\n      id\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogFellowshipHistoryDocument,
    "\n  mutation LogBacentaHistory(\n    $bacentaId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldGovernorshipId: ID\n    $newGovernorshipId: ID\n  ) {\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogBacentaHistoryDocument,
    "\n  mutation LogGovernorshipHistory(\n    $governorshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCouncilId: ID\n    $newCouncilId: ID\n  ) {\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogGovernorshipHistoryDocument,
    "\n  mutation LogCouncilHistory(\n    $councilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldStreamId: ID\n    $newStreamId: ID\n  ) {\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogCouncilHistoryDocument,
    "\n  mutation LogStreamHistory(\n    $streamId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogStreamHistoryDocument,
    "\n  mutation LogCampusHistory(\n    $campusId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldOversightId: ID\n    $newOversightId: ID\n  ) {\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogCampusHistoryDocument,
    "\n  mutation LogOversightHistory(\n    $oversightId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldDenominationId: ID\n    $newDenominationId: ID\n  ) {\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogOversightHistoryDocument,
    "\n  mutation LogDenominationHistory(\n    $denominationId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n  ) {\n    LogDenominationHistory(\n      denominationId: $denominationId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogDenominationHistoryDocument,
    "\n  mutation LogCreativeArtsHistory(\n    $creativeArtsId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogCreativeArtsHistoryDocument,
    "\n  mutation LogMinistryHistory(\n    $ministryId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCreativeArtsId: ID\n    $newCreativeArtsId: ID\n  ) {\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogMinistryHistoryDocument,
    "\n  mutation LogHubCouncilHistory(\n    $hubCouncilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldMinistryId: ID\n    $newMinistryId: ID\n  ) {\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogHubCouncilHistoryDocument,
    "\n  mutation LogHubHistory(\n    $hubId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubCouncilId: ID\n    $newHubCouncilId: ID\n  ) {\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hubCouncil {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.LogHubHistoryDocument,
    "\n  mutation LogHubFellowshipHistory(\n    $hubFellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubId: ID\n    $newHubId: ID\n  ) {\n    LogHubFellowshipHistory(\n      hubFellowshipId: $hubFellowshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubId: $oldHubId\n      newHubId: $newHubId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hub {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.LogHubFellowshipHistoryDocument,
    "\n  mutation SetVacationStream($streamId: ID!) {\n    SetVacationStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetVacationStreamDocument,
    "\n  mutation SetActiveStream($streamId: ID!) {\n    SetActiveStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetActiveStreamDocument,
    "\n  mutation SetVacationFellowship($fellowshipId: ID!) {\n    SetVacationFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetVacationFellowshipDocument,
    "\n  mutation SetActiveFellowship($fellowshipId: ID!) {\n    SetActiveFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetActiveFellowshipDocument,
    "\n  mutation SetOnlineFellowship($fellowshipId: ID!) {\n    SetOnlineFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetOnlineFellowshipDocument,
    "\n  mutation SetVacationBacenta($bacentaId: ID!) {\n    SetVacationBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetVacationBacentaDocument,
    "\n  mutation SetActiveBacenta($bacentaId: ID!) {\n    SetActiveBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetActiveBacentaDocument,
    "\n  mutation SetActiveHub($hubId: ID!) {\n    SetActiveHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetActiveHubDocument,
    "\n  mutation SetVacationHub($hubId: ID!) {\n    SetVacationHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetVacationHubDocument,
    "\n  mutation SetFellowshipToHubFellowship($fellowshipId: ID!, $hubId: ID!) {\n    SetFellowshipToHubFellowship(fellowshipId: $fellowshipId, hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetFellowshipToHubFellowshipDocument,
    "\n  mutation SetHubFellowshipToRegularFellowship($fellowshipId: ID!) {\n    SetHubFellowshipToRegularFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      hubStatus\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.SetHubFellowshipToRegularFellowshipDocument,
    "\n  query DisplayBacentaBussingDetails($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n      }\n      target\n      sprinterTopUp\n      urvanTopUp\n      outbound\n      vacationStatus\n\n      momoName\n      momoNumber\n      mobileNetwork\n    }\n  }\n": types.DisplayBacentaBussingDetailsDocument,
    "\n  mutation UpdateBacentaBussingDetails(\n    $bacentaId: ID!\n    $target: Int!\n    $sprinterTopUp: Float!\n    $urvanTopUp: Float!\n    $outbound: Boolean!\n  ) {\n    UpdateBacentaBussingDetails(\n      bacentaId: $bacentaId\n      target: $target\n      sprinterTopUp: $sprinterTopUp\n      urvanTopUp: $urvanTopUp\n      outbound: $outbound\n    ) {\n      id\n      name\n      target\n\n      outbound\n      sprinterTopUp\n      urvanTopUp\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateBacentaBussingDetailsDocument,
    "\n  mutation UpdateBusPaymentDetails(\n    $bacentaId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $mobileNetwork: String!\n  ) {\n    UpdateBusPaymentDetails(\n      bacentaId: $bacentaId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      mobileNetwork: $mobileNetwork\n    ) {\n      id\n      name\n\n      momoName\n      momoNumber\n      mobileNetwork\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateBusPaymentDetailsDocument,
    "\n  mutation SendMobileVerificationNumber(\n    $firstName: String!\n    $phoneNumber: String!\n    $otp: String!\n  ) {\n    SendMobileVerificationNumber(\n      firstName: $firstName\n      phoneNumber: $phoneNumber\n      otp: $otp\n    )\n  }\n": types.SendMobileVerificationNumberDocument,
    "\n  mutation UpdateMemberDetails(\n    $id: ID!\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $phoneNumber: String!\n    $whatsappNumber: String\n    $dob: String\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $pictureUrl: String!\n  ) {\n    UpdateMemberDetails(\n      id: $id\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      bacenta: $bacenta\n      pictureUrl: $pictureUrl\n    ) {\n      firstName\n      middleName\n      lastName\n      fullName\n      email\n      phoneNumber\n      pictureUrl\n      whatsappNumber\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n\n      occupation {\n        occupation\n      }\n    }\n  }\n": types.UpdateMemberDetailsDocument,
    "\n  mutation UpdateMemberStickyNote(\n    $id: ID!\n    $stickyNote: String\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    updateMembers(where: { id: $id }, update: { stickyNote: $stickyNote }) {\n      members {\n        id\n        stickyNote\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateMemberStickyNoteDocument,
    "\n  mutation UpdateMemberEmail($id: ID!, $email: String!) {\n    UpdateMemberEmail(id: $id, email: $email) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n": types.UpdateMemberEmailDocument,
    "\n  mutation UpdateMemberBasonta($memberId: ID!, $basontaId: ID!) {\n    UpdateMemberBasonta(memberId: $memberId, basontaId: $basontaId) {\n      id\n      firstName\n      lastName\n      basonta {\n        id\n        name\n      }\n    }\n  }\n": types.UpdateMemberBasontaDocument,
    "\n  mutation LogMemberHistory($ids: [ID], $historyRecord: String!) {\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.LogMemberHistoryDocument,
    "\n  mutation UpdateMemberBacenta(\n    $memberId: ID!\n    $bacentaId: ID!\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    UpdateMemberBacenta(memberId: $memberId, bacentaId: $bacentaId) {\n      id\n      firstName\n      lastName\n      bacenta {\n        id\n        name\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateMemberBacentaDocument,
    "\n  mutation UpdateStream(\n    $streamId: ID!\n    $name: String!\n    $bankAccount: String!\n    $meetingDay: String!\n  ) {\n    UpdateStreamDetails(\n      streamId: $streamId\n      name: $name\n      bankAccount: $bankAccount\n      meetingDay: $meetingDay\n    ) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateStreamDocument,
    "\n  mutation UpdateOversight($oversightId: ID!, $name: String!) {\n    UpdateOversightDetails(oversightId: $oversightId, name: $name) {\n      id\n      name\n      campuses {\n        id\n        name\n        oversight {\n          id\n          name\n          denomination {\n            id\n            oversights {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateOversightDocument,
    "\n  mutation UpdateDenomination($denominationId: ID!, $name: String!) {\n    UpdateDenominationDetails(denominationId: $denominationId, name: $name) {\n      id\n      name\n      oversights {\n        id\n        name\n        denomination {\n          id\n          name\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateDenominationDocument,
    "\n  mutation UpdateCampus(\n    $campusId: ID!\n    $name: String!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    UpdateCampusDetails(\n      campusId: $campusId\n      name: $name\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      streams {\n        id\n        name\n        campus {\n          id\n          name\n          oversight {\n            id\n            campuses {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateCampusDocument,
    "\n  mutation UpdateCouncil($councilId: ID!, $name: String!) {\n    UpdateCouncilDetails(councilId: $councilId, name: $name) {\n      id\n      name\n      governorships {\n        id\n        name\n        council {\n          id\n          name\n          stream {\n            id\n            councils {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateCouncilDocument,
    "\n  mutation UpdateGovernorship($governorshipId: ID!, $name: String!) {\n    UpdateGovernorshipDetails(governorshipId: $governorshipId, name: $name) {\n      id\n      name\n      bacentas {\n        id\n        name\n        governorship {\n          id\n          name\n          council {\n            id\n            governorships {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateGovernorshipDocument,
    "\n  mutation UpdateBacenta(\n    $id: ID!\n    $name: String!\n    $meetingDay: String!\n    $venueLongitude: Float!\n    $venueLatitude: Float!\n  ) {\n    UpdateBacentaDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      sprinterTopUp\n      urvanTopUp\n\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        whatsappNumber\n        title {\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateBacentaDocument,
    "\n  mutation UpdateFellowship(\n    $id: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateFellowshipDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      labels\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateFellowshipDocument,
    "\n  mutation MakeMemberInactive($memberId: ID!, $reason: String!) {\n    MakeMemberInactive(id: $memberId, reason: $reason) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.MakeMemberInactiveDocument,
    "\n  mutation MoveOversightToDenomination(\n    $oversightId: ID!\n    $newDenominationId: ID!\n    $oldDenominationId: ID!\n    $historyRecord: String!\n  ) {\n    MoveOversightToDenomination(\n      oversightId: $oversightId\n      denominationId: $newDenominationId\n    ) {\n      id\n      name\n      denomination {\n        id\n        name\n        oversights {\n          id\n          name\n        }\n      }\n    }\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveOversightToDenominationDocument,
    "\n  mutation MoveCampusToOversight(\n    $campusId: ID!\n    $newOversightId: ID!\n    $oldOversightId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCampusToOversight(campusId: $campusId, oversightId: $newOversightId) {\n      id\n      name\n      oversight {\n        id\n        name\n        campuses {\n          id\n          name\n        }\n      }\n    }\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveCampusToOversightDocument,
    "\n  mutation MoveStreamToCampus(\n    $streamId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveStreamToCampus(streamId: $streamId, campusId: $newCampusId) {\n      id\n      name\n      campus {\n        id\n        name\n        streams {\n          id\n          name\n        }\n      }\n    }\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveStreamToCampusDocument,
    "\n  mutation MoveCouncilToStream(\n    $councilId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCouncilToStream(councilId: $councilId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        councils {\n          id\n          name\n        }\n      }\n    }\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveCouncilToStreamDocument,
    "\n  mutation MoveGovernorshipToCouncil(\n    $governorshipId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveGovernorshipToCouncil(\n      governorshipId: $governorshipId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        governorships {\n          id\n          name\n        }\n      }\n    }\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveGovernorshipToCouncilDocument,
    "\n  mutation MoveBacentaToGovernorship(\n    $bacentaId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveBacentaToGovernorship(\n      bacentaId: $bacentaId\n      governorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveBacentaToGovernorshipDocument,
    "\n  mutation MoveCreativeArtsToCampus(\n    $creativeArtsId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCreativeArtsToCampus(\n      creativeArtsId: $creativeArtsId\n      campusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n    }\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveCreativeArtsToCampusDocument,
    "\n  mutation MoveMinistryToCreativeArts(\n    $ministryId: ID!\n    $newCreativeArtsId: ID!\n    $oldCreativeArtsId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToCreativeArts(\n      ministryId: $ministryId\n      creativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveMinistryToCreativeArtsDocument,
    "\n  mutation MoveMinistryToStream(\n    $ministryId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToStream(ministryId: $ministryId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistoryWithStream(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveMinistryToStreamDocument,
    "\n  mutation MoveHubCouncilToMinistry(\n    $hubCouncilId: ID!\n    $newMinistryId: ID!\n    $oldMinistryId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToMinistry(\n      hubCouncilId: $hubCouncilId\n      ministryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveHubCouncilToMinistryDocument,
    "\n  mutation MoveHubCouncilToCouncil(\n    $hubCouncilId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToCouncil(\n      hubCouncilId: $hubCouncilId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistoryWithCouncil(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveHubCouncilToCouncilDocument,
    "\n  mutation MoveHubsToHubCouncils(\n    $hubId: ID!\n    $newHubCouncilId: ID!\n    $oldHubCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToHubCouncil(hubId: $hubId, hubCouncilId: $newHubCouncilId) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveHubsToHubCouncilsDocument,
    "\n  mutation MoveHubToGovernorship(\n    $hubId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToGovernorship(hubId: $hubId, governorshipId: $newGovernorshipId) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistoryWithGovernorship(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.MoveHubToGovernorshipDocument,
    "\n  mutation UpdateCreativeArts($creativeArtsId: ID!, $name: String!) {\n    UpdateCreativeArtsDetails(creativeArtsId: $creativeArtsId, name: $name) {\n      id\n      name\n\n      ministries {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateCreativeArtsDocument,
    "\n  mutation UpdateMinistry(\n    $ministryId: ID!\n    $name: String!\n    $bankAccount: String!\n  ) {\n    UpdateMinistryDetails(\n      ministryId: $ministryId\n      name: $name\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n\n      creativeArts {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateMinistryDocument,
    "\n  mutation UpdateHubCouncil($hubCouncilId: ID!, $name: String!) {\n    UpdateHubCouncilDetails(hubCouncilId: $hubCouncilId, name: $name) {\n      id\n      name\n\n      ministry {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateHubCouncilDocument,
    "\n  mutation UpdateHub(\n    $hubId: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateHubDetails(\n      hubId: $hubId\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      name\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n": types.UpdateHubDocument,
    "\n  query memberPlacesSearchByLocation(\n    $id: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByLocation(latitude: $latitude, longitude: $longitude) {\n        id\n        name\n        typename\n        description\n        picture\n        # TODO: We must eventually switch from these to a location property object\n        latitude\n        longitude\n      }\n    }\n  }\n": types.MemberPlacesSearchByLocationDocument,
    "\n  query memberPlacesSearchByName($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByName(key: $key) {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n": types.MemberPlacesSearchByNameDocument,
    "\n  query memberLoadCouncilUnvisitedMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberLoadCouncilUnvisitedMembers {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n": types.MemberLoadCouncilUnvisitedMembersDocument,
    "\n  mutation CreateIndoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateIndoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n": types.CreateIndoorVenueDocument,
    "\n  mutation CreateOutdoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateOutdoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n": types.CreateOutdoorVenueDocument,
    "\n  mutation CreateHighSchool(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHighSchool(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n": types.CreateHighSchoolDocument,
    "\n  mutation CreateHostel(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHostel(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      university\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n": types.CreateHostelDocument,
    "\n  query IndoorVenues($options: IndoorVenueOptions) {\n    indoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n": types.IndoorVenuesDocument,
    "\n  query OutdoorVenues($options: OutdoorVenueOptions) {\n    outdoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n": types.OutdoorVenuesDocument,
    "\n  query HighSchools($options: HighSchoolOptions) {\n    highSchools(options: $options) {\n      capacity\n      id\n      location {\n        latitude\n        longitude\n      }\n      name\n      school\n    }\n  }\n": types.HighSchoolsDocument,
    "\n  query Hostels($options: HostelOptions) {\n    hostels(options: $options) {\n      capacity\n      id\n      name\n      university\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n": types.HostelsDocument,
    "\n  query bacentaServices($bacentaId: ID!, $skip: Int) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      bankingCode\n      name\n      services(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n": types.BacentaServicesDocument,
    "\n  mutation SubmitBankingSlip($serviceRecordId: ID!, $bankingSlip: String!) {\n    SubmitBankingSlip(\n      serviceRecordId: $serviceRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": types.SubmitBankingSlipDocument,
    "\n  query governorshipServices($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n": types.GovernorshipServicesDocument,
    "\n  query streamServices($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n": types.StreamServicesDocument,
    "\n  query councilServices($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n": types.CouncilServicesDocument,
    "\n  query BacentaServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        bacenta {\n          id\n          name\n          bankingCode\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n": types.BacentaServiceRecordsDocument,
    "\n  query GovernorshipServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        governorship {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n": types.GovernorshipServiceRecordsDocument,
    "\n  query CouncilServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        council {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n": types.CouncilServiceRecordsDocument,
    "\n  query streamServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        stream {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n": types.StreamServiceRecordsDocument,
    "\n  query hubMeetings($hubId: ID!, $skip: Int) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      rehearsals(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n": types.HubMeetingsDocument,
    "\n  query streamBankTellers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      tellers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n": types.StreamBankTellersDocument,
    "\n  mutation MakeStreamTeller($streamId: ID!, $tellerId: ID!) {\n    MakeStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.MakeStreamTellerDocument,
    "\n  mutation RemoveStreamTeller($streamId: ID!, $tellerId: ID!) {\n    RemoveStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n": types.RemoveStreamTellerDocument,
    "\n  mutation ConfirmBanking($governorshipId: ID!) {\n    ConfirmBanking(governorshipId: $governorshipId) {\n      id\n    }\n  }\n": types.ConfirmBankingDocument,
    "\n  query bacentaServicePayment($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      bankingCode\n    }\n  }\n": types.BacentaServicePaymentDocument,
    "\n  query hubRehearsalsPayment($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n    }\n  }\n": types.HubRehearsalsPaymentDocument,
    "\n  query governorshipServicePayment($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n    }\n  }\n": types.GovernorshipServicePaymentDocument,
    "\n  query councilServicePayment($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n    }\n  }\n": types.CouncilServicePaymentDocument,
    "\n  query streamServicePayment($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n    }\n  }\n": types.StreamServicePaymentDocument,
    "\n  query displayOfferingDetails($serviceRecordId: ID!) {\n    serviceRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n": types.DisplayOfferingDetailsDocument,
    "\n  query displayRehearsalOfferingDetails($serviceRecordId: ID!) {\n    rehearsalRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n": types.DisplayRehearsalOfferingDetailsDocument,
    "\n  mutation PayOfferingMutation(\n    $serviceRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankServiceOffering(\n      serviceRecordId: $serviceRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n": types.PayOfferingMutationDocument,
    "\n  mutation PayRehearsalOfferingMutation(\n    $rehearsalRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankRehearsalOffering(\n      rehearsalRecordId: $rehearsalRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n": types.PayRehearsalOfferingMutationDocument,
    "\n  mutation SendPaymentOTP(\n    $serviceRecordId: String!\n    $reference: String!\n    $otp: String!\n  ) {\n    SendPaymentOTP(\n      serviceRecordId: $serviceRecordId\n      reference: $reference\n      otp: $otp\n    ) {\n      id\n      transactionStatus\n    }\n  }\n": types.SendPaymentOtpDocument,
    "\n  mutation ConfirmOfferingPayment($serviceRecordId: ID!) {\n    ConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      cash\n      transactionId\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.ConfirmOfferingPaymentDocument,
    "\n  query selfBankingReceipt($id: ID!) {\n    serviceRecords(where: { id: $id }) {\n      id\n      cash\n      serviceDate {\n        date\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      transactionError\n    }\n  }\n": types.SelfBankingReceiptDocument,
    "\n  mutation SetTransactionReference(\n    $serviceRecordId: ID!\n    $transactionReference: ID!\n    $currentUserId: ID!\n  ) {\n    updateServiceRecords(\n      where: { id: $serviceRecordId }\n      update: {\n        transactionReference: $transactionReference\n        transactionStatus: \"pending\"\n        transactionError: null\n        confirmedBy: $currentUserId\n      }\n    ) {\n      serviceRecords {\n        id\n        transactionReference\n        transactionStatus\n        transactionError\n      }\n    }\n  }\n": types.SetTransactionReferenceDocument,
    "\n  query governorshipDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n": types.GovernorshipDefaultersDocument,
    "\n  query governorshipServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GovernorshipServicesThisWeekDocument,
    "\n  query governorshipCancelledServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.GovernorshipCancelledServicesThisWeekDocument,
    "\n  query governorshipFormDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.GovernorshipFormDefaultersDocument,
    "\n  query governorshipBankingDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GovernorshipBankingDefaultersDocument,
    "\n  query governorshipBanked($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GovernorshipBankedDocument,
    "\n  query councilDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorshipCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n    }\n  }\n": types.CouncilDefaultersDocument,
    "\n  query councilServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CouncilServicesThisWeekDocument,
    "\n  query councilCancelledServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.CouncilCancelledServicesThisWeekDocument,
    "\n  query councilFormDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.CouncilFormDefaultersDocument,
    "\n  query councilBankingDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CouncilBankingDefaultersDocument,
    "\n  query councilBanked($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CouncilBankedDocument,
    "\n  query councilByGovernorship($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        bankedBy {\n          id\n          firstName\n          lastName\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n": types.CouncilByGovernorshipDocument,
    "\n  query streamDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councilCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n    }\n  }\n": types.StreamDefaultersDocument,
    "\n  query streamServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n\n        council {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.StreamServicesThisWeekDocument,
    "\n  query streamCancelledServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.StreamCancelledServicesThisWeekDocument,
    "\n  query streamFormDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.StreamFormDefaultersDocument,
    "\n  query streamBankingDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.StreamBankingDefaultersDocument,
    "\n  query constitiuencyBankingDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      constitiuencyBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.ConstitiuencyBankingDefaultersThisWeekDocument,
    "\n  query streamBanked($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.StreamBankedDocument,
    "\n  query streamByCouncil($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n": types.StreamByCouncilDocument,
    "\n  query campusDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streamCount\n      creativeArtsCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n": types.CampusDefaultersDocument,
    "\n  query campusesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusesThisWeekDocument,
    "\n  query gatheringCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.GatheringCancelledServicesThisWeekDocument,
    "\n  query gatheringFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.GatheringFormDefaultersDocument,
    "\n  query gatheringBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringBankingDefaultersDocument,
    "\n  query gatheringBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringBankedDocument,
    "\n  query defaultersCampusByStream($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n": types.DefaultersCampusByStreamDocument,
    "\n  query gatheringGovernorshipJointServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringGovernorshipJointServicesThisWeekDocument,
    "\n  query gatheringGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringGovernorshipJointServicesBankedThisWeekDocument,
    "\n  query streamGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.StreamGovernorshipJointServicesDefaultersThisWeekDocument,
    "\n  query streamGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.StreamGovernorshipJointServicesBankedThisWeekDocument,
    "\n  query councilGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CouncilGovernorshipJointServicesDefaultersThisWeekDocument,
    "\n  query councilGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CouncilGovernorshipJointServicesBankedThisWeekDocument,
    "\n  query gatheringCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringCouncilJointServicesDefaultersThisWeekDocument,
    "\n  query gatheringCouncilJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.GatheringCouncilJointServicesBankedThisWeekDocument,
    "\n  query streamCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n": types.StreamCouncilJointServicesDefaultersThisWeekDocument,
    "\n  query streamCouncilJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n": types.StreamCouncilJointServicesBankedThisWeekDocument,
    "\n  query oversightDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campusCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n    }\n  }\n": types.OversightDefaultersDocument,
    "\n  query hubDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n": types.HubDefaultersDocument,
    "\n  query hubServicesThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubServicesThisWeekDocument,
    "\n  query hubCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.HubCancelledhubRehearsalsThisWeekDocument,
    "\n  query hubFormDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.HubFormDefaultersDocument,
    "\n  query hubBankingDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubBankingDefaultersDocument,
    "\n  query hubBanked($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubBankedDocument,
    "\n  query hubCouncilDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n": types.HubCouncilDefaultersDocument,
    "\n  query hubCouncilhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilhubRehearsalsThisWeekDocument,
    "\n  query hubCouncilCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.HubCouncilCancelledhubRehearsalsThisWeekDocument,
    "\n  query hubCouncilHubFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.HubCouncilHubFormDefaultersDocument,
    "\n  query hubCouncilHubBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilHubBankingDefaultersDocument,
    "\n  query hubCouncilHubBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilHubBankedDocument,
    "\n  query ministryDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCouncilCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n": types.MinistryDefaultersDocument,
    "\n  query ministriehubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistriehubRehearsalsThisWeekDocument,
    "\n  query ministryCancelledhubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.MinistryCancelledhubRehearsalsThisWeekDocument,
    "\n  query ministryHubFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.MinistryHubFormDefaultersDocument,
    "\n  query ministryHubBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistryHubBankingDefaultersDocument,
    "\n  query ministryHubBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistryHubBankedDocument,
    "\n  query creativeArtsDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      ministryCount\n      activeHubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n": types.CreativeArtsDefaultersDocument,
    "\n  query creativeArtsHubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsHubRehearsalsThisWeekDocument,
    "\n  query creativeArtsCancelledhubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.CreativeArtsCancelledhubRehearsalsThisWeekDocument,
    "\n  query creativeArtsHubFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.CreativeArtsHubFormDefaultersDocument,
    "\n  query creativeArtsHubBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsHubBankingDefaultersDocument,
    "\n  query creativeArtsHubBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsHubBankedDocument,
    "\n  query campusByCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      creativeArts {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n": types.CampusByCreativeArtsDocument,
    "\n  query creativeArtsByMinistry($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      ministries {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n": types.CreativeArtsByMinistryDocument,
    "\n  query ministryByHubCouncil($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n": types.MinistryByHubCouncilDocument,
    "\n  query hubCouncilByHub($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      hubs {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n      }\n    }\n  }\n": types.HubCouncilByHubDocument,
    "\n  query campusHubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusHubRehearsalsThisWeekDocument,
    "\n  query campusCancelledhubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.CampusCancelledhubRehearsalsThisWeekDocument,
    "\n  query campusHubFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.CampusHubFormDefaultersDocument,
    "\n  query campusBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusBankingDefaultersDocument,
    "\n  query campusHubBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusHubBankedDocument,
    "\n  query creativeArtsServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsServicesThisWeekDocument,
    "\n  query creativeArtsFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.CreativeArtsFormDefaultersDocument,
    "\n  query creativeArtsBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsBankingDefaultersDocument,
    "\n  query creativeArtsBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CreativeArtsBankedDocument,
    "\n  query creativeArtsCancelledServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.CreativeArtsCancelledServicesThisWeekDocument,
    "\n  query ministryServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistryServicesThisWeekDocument,
    "\n  query ministryFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.MinistryFormDefaultersDocument,
    "\n  query ministryBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistryBankingDefaultersDocument,
    "\n  query ministryBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.MinistryBankedDocument,
    "\n  query ministryCancelledServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.MinistryCancelledServicesThisWeekDocument,
    "\n  query hubCouncilServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilServicesThisWeekDocument,
    "\n  query hubCouncilFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.HubCouncilFormDefaultersDocument,
    "\n  query hubCouncilBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilBankingDefaultersDocument,
    "\n  query hubCouncilBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.HubCouncilBankedDocument,
    "\n  query hubCouncilCancelledServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.HubCouncilCancelledServicesThisWeekDocument,
    "\n  query defaultersCampusByStreamForStreamServices($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n": types.DefaultersCampusByStreamForStreamServicesDocument,
    "\n  query defaultersOversightByCampusForStreamServices($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campuses {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n": types.DefaultersOversightByCampusForStreamServicesDocument,
    "\n  query defaultersDeominationByOversightForStreamServices($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      oversights {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n      }\n    }\n  }\n": types.DefaultersDeominationByOversightForStreamServicesDocument,
    "\n  query campusStreamsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusStreamsThisWeekDocument,
    "\n  query campusStreamCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.CampusStreamCancelledServicesThisWeekDocument,
    "\n  query campusStreamFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.CampusStreamFormDefaultersDocument,
    "\n  query campusStreamBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusStreamBankingDefaultersDocument,
    "\n  query campusStreamBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.CampusStreamBankedDocument,
    "\n  query oversightStreamsThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.OversightStreamsThisWeekDocument,
    "\n  query oversightStreamCancelledServicesThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.OversightStreamCancelledServicesThisWeekDocument,
    "\n  query oversightStreamFormDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.OversightStreamFormDefaultersDocument,
    "\n  query oversightStreamBankingDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.OversightStreamBankingDefaultersDocument,
    "\n  query oversightStreamBanked($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.OversightStreamBankedDocument,
    "\n  query denominationStreamsThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.DenominationStreamsThisWeekDocument,
    "\n  query denominationStreamCancelledServicesThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n": types.DenominationStreamCancelledServicesThisWeekDocument,
    "\n  query denominationStreamFormDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n": types.DenominationStreamFormDefaultersDocument,
    "\n  query denominationStreamBankingDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.DenominationStreamBankingDefaultersDocument,
    "\n  query denominationStreamBanked($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n": types.DenominationStreamBankedDocument,
    "\n  query CouncilTransactionHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      creditsTransactionHistory {\n        id\n        amount\n        createdAt\n        transactionStatus\n        transactionReference\n        mobileNetwork\n        mobileNumber\n        credited\n      }\n    }\n  }\n": types.CouncilTransactionHistoryDocument,
    "\n  query CouncilWithCredits($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n    }\n  }\n": types.CouncilWithCreditsDocument,
    "\n  mutation RemoveDownloadCredit($churchId: ID!) {\n    RemoveDownloadCredit(churchId: $churchId)\n  }\n": types.RemoveDownloadCreditDocument,
    "\n  query DisplayCouncilMembership($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n      downloadMembership {\n        id\n        firstName\n        lastName\n        phoneNumber\n        whatsappNumber\n        email\n        visitationArea\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        dob {\n          date\n        }\n        basonta {\n          id\n          name\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n            name\n            leader {\n              id\n              firstName\n              lastName\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n": types.DisplayCouncilMembershipDocument,
    "\n  mutation PurchaseDownloadCredits(\n    $churchId: ID!\n    $amount: Float!\n    $mobileNetwork: String!\n    $mobileNumber: String!\n  ) {\n    PurchaseDownloadCredits(\n      churchId: $churchId\n      amount: $amount\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n    ) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n": types.PurchaseDownloadCreditsDocument,
    "\n  mutation ConfirmCreditTransaction($transactionReference: String!) {\n    ConfirmCreditTransaction(transactionReference: $transactionReference) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n": types.ConfirmCreditTransactionDocument,
    "\n  query campusBacentaServicesThisWeekReport($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n\n        services(limit: 1) {\n          id\n          attendance\n          income\n          serviceDate {\n            date\n          }\n          noServiceReason\n          bankingProof\n        }\n      }\n    }\n  }\n": types.CampusBacentaServicesThisWeekReportDocument,
    "\n  query fellowshipGraphs($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      memberCount\n    }\n  }\n": types.FellowshipGraphsDocument,
    "\n  query bacentaGraphs($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      bussing(limit: 4) {\n        id\n        createdAt\n        attendance\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.BacentaGraphsDocument,
    "\n  query governorshipGraphs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.GovernorshipGraphsDocument,
    "\n  query councilGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.CouncilGraphsDocument,
    "\n  query streamGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.StreamGraphsDocument,
    "\n  query campusGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.CampusGraphsDocument,
    "\n  query oversightGraphs($oversightId: ID!) {\n    oversights(where: { id: $oversightId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.OversightGraphsDocument,
    "\n  query denominationGraphs($denominationId: ID!) {\n    denominations(where: { id: $denominationId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n\n      memberCount\n    }\n  }\n": types.DenominationGraphsDocument,
    "\n  query hubGraphs($hubId: ID!) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.HubGraphsDocument,
    "\n  query hubCouncilGraphs($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n": types.HubCouncilGraphsDocument,
    "\n  query ministryGraphs($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      onStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        week\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n": types.MinistryGraphsDocument,
    "\n  query creativeArtsGraphs($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n": types.CreativeArtsGraphsDocument,
    "\n  mutation RecordMinistryOnStageAttendance(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $onStagePictures: [String!]!\n  ) {\n    RecordMinistryOnStageAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      onStagePictures: $onStagePictures\n    ) {\n      id\n      week\n    }\n  }\n": types.RecordMinistryOnStageAttendanceDocument,
    "\n  query displayMinistryOnStageAttendanceDetails(\n    $serviceId: ID!\n    $ministryId: ID!\n  ) {\n    stageAttendanceRecords(where: { id: $serviceId }) {\n      id\n      week\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      onStagePictures\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n": types.DisplayMinistryOnStageAttendanceDetailsDocument,
    "\n  mutation RecordService(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n": types.RecordServiceDocument,
    "\n  mutation RecordSpecialService(\n    $serviceName: String!\n    $serviceDescription: String!\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordSpecialService(\n      serviceName: $serviceName\n      serviceDescription: $serviceDescription\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n": types.RecordSpecialServiceDocument,
    "\n  mutation RecordCancelledService(\n    $churchId: ID!\n    $serviceDate: String!\n    $noServiceReason: String!\n  ) {\n    RecordCancelledService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      noServiceReason: $noServiceReason\n    ) {\n      id\n      serviceLog {\n        id\n        fellowship {\n          id\n          services(limit: 3) {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.RecordCancelledServiceDocument,
    "\n  mutation UndoCancelledService($serviceRecordId: ID!) {\n    UndoCancelledService(serviceRecordId: $serviceRecordId) {\n      id\n      services(limit: 3) {\n        id\n        noServiceReason\n        bankingProof\n      }\n    }\n  }\n": types.UndoCancelledServiceDocument,
    "\n  mutation ManuallyConfirmOfferingPayment($serviceRecordId: ID!) {\n    ManuallyConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      createdAt\n\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n\n      transactionId\n\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n": types.ManuallyConfirmOfferingPaymentDocument,
    "\n  mutation RecordServiceNoIncome(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordServiceNoIncome(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n": types.RecordServiceNoIncomeDocument,
    "\n  mutation RecordHubRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n": types.RecordHubRehearsalMeetingDocument,
    "\n  mutation RecordHubCouncilRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n": types.RecordHubCouncilRehearsalMeetingDocument,
    "\n  mutation RecordMinistryRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n": types.RecordMinistryRehearsalMeetingDocument,
    "\n  mutation RecordHubCouncilSundayMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordHubCouncilSundayAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n": types.RecordHubCouncilSundayMeetingDocument,
    "\n  query fellowshipDisplayServiceRecords($serviceId: ID!, $fellowshipId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      noIncomeTracking\n      stream_name\n    }\n  }\n": types.FellowshipDisplayServiceRecordsDocument,
    "\n  query aggregateServiceRecordForWeek($week: Int!, $governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateServiceRecordForWeek(week: $week) {\n        id\n        income\n        foreignCurrency\n      }\n    }\n  }\n": types.AggregateServiceRecordForWeekDocument,
    "\n  query bacentaDisplayServiceRecords($serviceId: ID!, $bacentaId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n    }\n  }\n": types.BacentaDisplayServiceRecordsDocument,
    "\n  query hubCouncilDisplaySundayMeetingRecords(\n    $serviceId: ID!\n    $hubCouncilId: ID!\n  ) {\n    ministryAttendanceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      familyPicture\n      week\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n": types.HubCouncilDisplaySundayMeetingRecordsDocument,
    "\n  query hubDisplayRehearsalRecords($serviceId: ID!, $hubId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubs(where: { id: $hubId }) {\n      id\n      name\n    }\n  }\n": types.HubDisplayRehearsalRecordsDocument,
    "\n  query hubCouncilDisplayRehearsalRecords($serviceId: ID!, $hubCouncilId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n": types.HubCouncilDisplayRehearsalRecordsDocument,
    "\n  query MinistryDisplayRehearsalRecords($serviceId: ID!, $ministryId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n": types.MinistryDisplayRehearsalRecordsDocument,
    "\n  query governorshipDisplayServiceRecords(\n    $serviceId: ID!\n    $governorshipId: ID!\n  ) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      stream_name\n    }\n  }\n": types.GovernorshipDisplayServiceRecordsDocument,
    "\n  query councilDisplayServiceRecords($serviceId: ID!, $councilId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    councils(where: { id: $councilId }) {\n      id\n      name\n      stream_name\n    }\n  }\n": types.CouncilDisplayServiceRecordsDocument,
    "\n  query streamDisplayServiceRecords($serviceId: ID!, $streamId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      # For Special Services\n      name\n      description\n\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    streams(where: { id: $streamId }) {\n      id\n      name\n      stream_name\n    }\n  }\n": types.StreamDisplayServiceRecordsDocument,
    "\n  query gatheringDisplayServiceRecords($serviceId: ID!, $campusId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    campuses(where: { id: $campusId }) {\n      id\n      name\n    }\n  }\n": types.GatheringDisplayServiceRecordsDocument,
    "\n  query getBishops {\n    members(where: { title_SOME: { name: \"Bishop\" } }) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n": types.GetBishopsDocument,
    "\n  query getGovernorshipBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      stream_name\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      bacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetGovernorshipBacentasDocument,
    "\n  query getGovernorshipIcBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      icBacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetGovernorshipIcBacentasDocument,
    "\n  query getCouncilGovernorships($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetCouncilGovernorshipsDocument,
    "\n  query getGatheringGovernorships($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n        fullName\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n          stream_name\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n": types.GetGatheringGovernorshipsDocument,
    "\n  query getStreamCouncils($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      councils {\n        name\n        id\n        stream_name\n        memberCount\n        target\n        governorshipCount\n        governorships {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n": types.GetStreamCouncilsDocument,
    "\n  query gatheringStreams($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      streams {\n        name\n        id\n        stream_name\n        memberCount\n        councilCount\n        vacationStatus\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n          fullName\n        }\n      }\n    }\n  }\n": types.GatheringStreamsDocument,
    "\n  query getDenominationOversights($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      oversights {\n        name\n        id\n\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.GetDenominationOversightsDocument,
    "\n  query getOversightCampuses($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      campuses {\n        name\n        id\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n": types.GetOversightCampusesDocument,
    "\n  query getStreamGovernorships($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n          fullName\n        }\n      }\n    }\n  }\n": types.GetStreamGovernorshipsDocument,
    "\n  query getCouncils {\n    councils {\n      id\n      name\n      governorships {\n        id\n      }\n    }\n  }\n": types.GetCouncilsDocument,
    "\n  query getStreams {\n    streams {\n      id\n      name\n      councils {\n        id\n      }\n    }\n  }\n": types.GetStreamsDocument,
    "\n  query getCampuses {\n    campuses {\n      id\n      name\n      streams {\n        id\n      }\n    }\n  }\n": types.GetCampusesDocument,
    "\n  query getOversights {\n    oversights {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n": types.GetOversightsDocument,
    "\n  query getDenominations {\n    denominations {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n": types.GetDenominationsDocument,
    "\n  query getCreativeArts {\n    creativeArts {\n      id\n      name\n    }\n  }\n": types.GetCreativeArtsDocument,
    "\n  query getMinistries {\n    ministries {\n      id\n      name\n    }\n  }\n": types.GetMinistriesDocument,
    "\n  query getHubs {\n    hubs {\n      id\n      name\n    }\n  }\n": types.GetHubsDocument,
    "\n  query getCampusBasontas($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      basontas {\n        id\n        name\n      }\n    }\n  }\n": types.GetCampusBasontasDocument,
    "\n  query getHubFellowships($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      memberCount\n      hubFellowships {\n        id\n        name\n        vacationStatus\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetHubFellowshipsDocument,
    "\n  query getStreamMinistries($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetStreamMinistriesDocument,
    "\n  query getStreamHubs($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetStreamHubsDocument,
    "\n  query getStreamSontas($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n    }\n  }\n": types.GetStreamSontasDocument,
    "\n  query getHubCouncilHubs($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetHubCouncilHubsDocument,
    "\n  query getMinistryHubCouncils($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      councils {\n        id\n        name\n        hubCouncilsFromMinistry(ministryId: $id) {\n          name\n          id\n          memberCount\n          leader {\n            id\n            firstName\n            lastName\n            stream_name\n            pictureUrl\n          }\n        }\n      }\n    }\n  }\n": types.GetMinistryHubCouncilsDocument,
    "\n  query getMinistrySontas($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n": types.GetMinistrySontasDocument,
    "\n  query getHubSontas($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n": types.GetHubSontasDocument,
    "\n  query getCreativeArtsMinistries($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      # admin {\n      #   id\n      #   firstName\n      #   lastName\n      #   fullName\n      #   stream_name\n      # }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        # admin {\n        #   id\n        #   firstName\n        #   lastName\n        #   stream_name\n        #   fullName\n        # }\n      }\n    }\n  }\n": types.GetCreativeArtsMinistriesDocument,
    "\n  query getCampusCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      creativeArtsCount\n      creativeArts {\n        name\n        id\n        memberCount\n        hubCount\n        ministryCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetCampusCreativeArtsDocument,
    "\n  query getCouncilHubCouncils($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubCouncils {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetCouncilHubCouncilsDocument,
    "\n  query getGovernorshipHubs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetGovernorshipHubsDocument,
    "\n  query getCreativeArtsMinistriesList($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n": types.GetCreativeArtsMinistriesListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeGovernorshipAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForGovernorship {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeGovernorshipAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipAdmin(\n      governorshipId: $governorshipId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForGovernorship {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCouncilAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilAdmin(\n      councilId: $councilId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilAdmin(\n      councilId: $councilId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCouncil {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCouncilAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilAdmin(\n      councilId: $councilId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilAdmin(\n      councilId: $councilId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCouncil {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamAdmin($streamId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveStreamAdmin(\n      streamId: $streamId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamAdmin(\n      streamId: $streamId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForStream {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamAdmin($streamId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveStreamAdmin(\n      streamId: $streamId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamAdmin(\n      streamId: $streamId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForStream {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCampusAdmin($campusId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveCampusAdmin(\n      campusId: $campusId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusAdmin(\n      campusId: $campusId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCampus {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCampusAdmin($campusId: ID!, $newAdminId: ID!, $oldAdminId: ID!) {\n    RemoveCampusAdmin(\n      campusId: $campusId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusAdmin(\n      campusId: $campusId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCampus {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeOversightAdmin(\n    $oversightId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveOversightAdmin(\n      oversightId: $oversightId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightAdmin(\n      oversightId: $oversightId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForOversight {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeOversightAdmin(\n    $oversightId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveOversightAdmin(\n      oversightId: $oversightId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightAdmin(\n      oversightId: $oversightId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForOversight {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeMinistryAdmin(\n    $ministryId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForMinistry {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeMinistryAdmin(\n    $ministryId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryAdmin(\n      ministryId: $ministryId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForMinistry {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCreativeArtsAdmin(\n    $creativeArtsId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCreativeArts {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCreativeArtsAdmin(\n    $creativeArtsId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $oldAdminId\n      newAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsAdmin(\n      creativeArtsId: $creativeArtsId\n      adminId: $newAdminId\n      oldAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isAdminForCreativeArts {\n        id\n        admin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberByEmail($email: String!) {\n    memberByEmail(email: $email) {\n      id\n      firstName\n      lastName\n      currentTitle\n      nameWithTitle\n      pictureUrl\n      stream_name\n\n      bacenta {\n        id\n        governorship {\n          id\n          council {\n            id\n            stream {\n              id\n              campus {\n                id\n                noIncomeTracking\n                currency\n                conversionRateToDollar\n                oversight {\n                  id\n                  denomination {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberByEmail($email: String!) {\n    memberByEmail(email: $email) {\n      id\n      firstName\n      lastName\n      currentTitle\n      nameWithTitle\n      pictureUrl\n      stream_name\n\n      bacenta {\n        id\n        governorship {\n          id\n          council {\n            id\n            stream {\n              id\n              campus {\n                id\n                noIncomeTracking\n                currency\n                conversionRateToDollar\n                oversight {\n                  id\n                  denomination {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightBacentaSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightBacentaSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentaSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentaSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentaSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentaSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentaSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentaSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentaSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentaSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberBacentaSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key) {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberBacentaSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      bacentaSearch(key: $key) {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberCampusSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      campusSearch(key: $key) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberCampusSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      campusSearch(key: $key) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightCampusSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      campusSearch(key: $key, limit: 5) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightCampusSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      campusSearch(key: $key, limit: 5) {\n        id\n        name\n        oversight {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringCouncilSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringCouncilSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamCouncilSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamCouncilSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      councilSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      councilSearch(key: $key) {\n        id\n        name\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      councilSearch(key: $key) {\n        id\n        name\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringCreativeArtsSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringCreativeArtsSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberCreativeArtsSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberCreativeArtsSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      creativeArtsSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightFellowshipSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightFellowshipSearch($id: ID!, $key: String!) {\n    oversights(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringFellowshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringFellowshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamFellowshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamFellowshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilFellowshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilFellowshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipFellowshipSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipFellowshipSearch($id: ID!, $key: String!) {\n    governorships(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaFellowshipSearch($id: ID!, $key: String!) {\n    bacentas(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaFellowshipSearch($id: ID!, $key: String!) {\n    bacentas(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key) {\n        id\n        name\n        bacenta {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      fellowshipSearch(key: $key) {\n        id\n        name\n        bacenta {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringGovernorshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringGovernorshipSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamGovernorshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamGovernorshipSearch($id: ID!, $key: String!) {\n    streams(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilGovernorshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilGovernorshipSearch($id: ID!, $key: String!) {\n    councils(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberGovernorshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key) {\n        id\n        name\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberGovernorshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      governorshipSearch(key: $key) {\n        id\n        name\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberHubCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubCouncilSearch(key: $key) {\n        id\n        name\n        ministry {\n          id\n          name\n        }\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberHubCouncilSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubCouncilSearch(key: $key) {\n        id\n        name\n        ministry {\n          id\n          name\n        }\n        council {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberHubFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubFellowshipSearch(key: $key) {\n        id\n        name\n        hub {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberHubFellowshipSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubFellowshipSearch(key: $key) {\n        id\n        name\n        hub {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberHubSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubSearch(key: $key) {\n        id\n        name\n\n        governorship {\n          id\n          name\n        }\n\n        hubCouncil {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberHubSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      hubSearch(key: $key) {\n        id\n        name\n\n        governorship {\n          id\n          name\n        }\n\n        hubCouncil {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query basontaMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query basontaMemberSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearch(key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query basontaMemberSearchFromHub($id: ID!, $key: String!, $hubId: ID!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearchFromHub(hubId: $hubId, key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query basontaMemberSearchFromHub($id: ID!, $key: String!, $hubId: ID!) {\n    members(where: { id: $id }) {\n      id\n      basontaMemberSearchFromHub(hubId: $hubId, key: $key, limit: 5) {\n        id\n        firstName\n        middleName\n        lastName\n        pictureUrl\n        email\n        location {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringMinistrySearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      ministrySearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringMinistrySearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      ministrySearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberMinistrySearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      ministrySearch(key: $key) {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberMinistrySearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      ministrySearch(key: $key) {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n        stream {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringStreamSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      streamSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringStreamSearch($id: ID!, $key: String!) {\n    campuses(where: { id: $id }) {\n      id\n      streamSearch(key: $key, limit: 5) {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberStreamSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      streamSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberStreamSearch($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      streamSearch(key: $key) {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilAccountDashboard($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      hrAmount\n      bussingAmount\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  query CouncilAccountDashboard($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      hrAmount\n      bussingAmount\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampusAccountDashboard($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampusAccountDashboard($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OversightAccountDashboard($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  query OversightAccountDashboard($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      weekdayBalance\n      bussingSocietyBalance\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampusByCouncilAccounts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streams {\n        id\n        name\n\n        councils(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampusByCouncilAccounts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streams {\n        id\n        name\n\n        councils(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OversightByCampusesAccounts($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      campuses {\n        id\n        name\n\n        streams(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OversightByCampusesAccounts($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      campuses {\n        id\n        name\n\n        streams(options: { sort: { name: ASC } }) {\n          id\n          name\n\n          weekdayBalance\n          bussingSocietyBalance\n\n          leader {\n            id\n            firstName\n            lastName\n            pictureUrl\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncilPendingApprovalTransactions($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      councils {\n        id\n        name\n        transactions(where: { status: \"pending approval\" }) {\n          id\n          createdAt\n          lastModified\n          amount\n          account\n          category\n          description\n          status\n          loggedBy {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncilPendingApprovalTransactions($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      councils {\n        id\n        name\n        transactions(where: { status: \"pending approval\" }) {\n          id\n          createdAt\n          lastModified\n          amount\n          account\n          category\n          description\n          status\n          loggedBy {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveExpense($transactionId: ID!, $charge: Float!) {\n    ApproveExpense(transactionId: $transactionId, charge: $charge) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ApproveExpense($transactionId: ID!, $charge: Float!) {\n    ApproveExpense(transactionId: $transactionId, charge: $charge) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeclineExpense($transactionId: ID!) {\n    DeclineExpense(transactionId: $transactionId) {\n      id\n      createdAt\n      lastModified\n      amount\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeclineExpense($transactionId: ID!) {\n    DeclineExpense(transactionId: $transactionId) {\n      id\n      createdAt\n      lastModified\n      amount\n      category\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DepositIntoCouncilCurrentAccounts(\n    $councilId: ID!\n    $weekdayBalanceDepositAmount: Float!\n  ) {\n    DepositIntoCouncilCurrentAccount(\n      councilId: $councilId\n      weekdayBalanceDepositAmount: $weekdayBalanceDepositAmount\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DepositIntoCouncilCurrentAccounts(\n    $councilId: ID!\n    $weekdayBalanceDepositAmount: Float!\n  ) {\n    DepositIntoCouncilCurrentAccount(\n      councilId: $councilId\n      weekdayBalanceDepositAmount: $weekdayBalanceDepositAmount\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DepositIntoCouncilBussingSociety(\n    $councilId: ID!\n    $bussingSocietyBalance: Float!\n  ) {\n    DepositIntoCouncilBussingSociety(\n      councilId: $councilId\n      bussingSocietyBalance: $bussingSocietyBalance\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DepositIntoCouncilBussingSociety(\n    $councilId: ID!\n    $bussingSocietyBalance: Float!\n  ) {\n    DepositIntoCouncilBussingSociety(\n      councilId: $councilId\n      bussingSocietyBalance: $bussingSocietyBalance\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation setHrAmount($councilId: ID!, $amount: Float!) {\n    SetCouncilHRAmount(councilId: $councilId, amount: $amount) {\n      id\n      name\n      hrAmount\n    }\n  }\n"): (typeof documents)["\n  mutation setHrAmount($councilId: ID!, $amount: Float!) {\n    SetCouncilHRAmount(councilId: $councilId, amount: $amount) {\n      id\n      name\n      hrAmount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ExpenseRequest(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n    $description: String!\n    $accountType: String!\n  ) {\n    ExpenseRequest(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n      description: $description\n      accountType: $accountType\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ExpenseRequest(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n    $description: String!\n    $accountType: String!\n  ) {\n    ExpenseRequest(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n      description: $description\n      accountType: $accountType\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DebitBussingSociety(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n  ) {\n    DebitBussingSociety(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DebitBussingSociety(\n    $councilId: ID!\n    $expenseAmount: Float!\n    $expenseCategory: String!\n  ) {\n    DebitBussingSociety(\n      councilId: $councilId\n      expenseAmount: $expenseAmount\n      expenseCategory: $expenseCategory\n    ) {\n      id\n      createdAt\n      lastModified\n      amount\n      account\n      category\n      description\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCampusTransactionHistory($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      transactions {\n        id\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCampusTransactionHistory($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      transactions {\n        id\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncilTransactionHistory($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      transactions(options: { sort: { lastModified: DESC } }) {\n        id\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncilTransactionHistory($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      transactions(options: { sort: { lastModified: DESC } }) {\n        id\n        createdAt\n        lastModified\n        amount\n        account\n        charge\n        category\n        description\n        status\n\n        bussingSocietyBalance\n        weekdayBalance\n\n        loggedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransactionDetails($id: ID!) {\n    accountTransactions(where: { id: $id }) {\n      id\n      createdAt\n      lastModified\n      bussingSocietyBalance\n      weekdayBalance\n      amount\n      account\n      category\n      charge\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransactionDetails($id: ID!) {\n    accountTransactions(where: { id: $id }) {\n      id\n      createdAt\n      lastModified\n      bussingSocietyBalance\n      weekdayBalance\n      amount\n      account\n      category\n      charge\n      description\n      status\n      loggedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation undoBussingTransaction($transactionId: ID!) {\n    UndoBussingTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation undoBussingTransaction($transactionId: ID!) {\n    UndoBussingTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation undoWeekdayTransaction($transactionId: ID!) {\n    UndoWeekdayTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation undoWeekdayTransaction($transactionId: ID!) {\n    UndoWeekdayTransaction(transactionId: $transactionId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StreamArrivalsHelpers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsCounters {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaICCount\n    }\n  }\n"): (typeof documents)["\n  query StreamArrivalsHelpers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsCounters {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaICCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamArrivalsCounter($streamId: ID!, $arrivalsCounterId: ID!) {\n    MakeStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamArrivalsCounter($streamId: ID!, $arrivalsCounterId: ID!) {\n    MakeStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveStreamArrivalsCounter(\n    $streamId: ID!\n    $arrivalsCounterId: ID!\n  ) {\n    RemoveStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveStreamArrivalsCounter(\n    $streamId: ID!\n    $arrivalsCounterId: ID!\n  ) {\n    RemoveStreamArrivalsCounter(\n      streamId: $streamId\n      arrivalsCounterId: $arrivalsCounterId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilArrivalsPayers($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsPayers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n"): (typeof documents)["\n  query councilArrivalsPayers($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsPayers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    MakeCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    MakeCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    RemoveCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCouncilArrivalsPayer($councilId: ID!, $arrivalsPayerId: ID!) {\n    RemoveCouncilArrivalsPayer(\n      councilId: $councilId\n      arrivalsPayerId: $arrivalsPayerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetStreamArrivalTimes(\n    $id: ID!\n    $mobilisationStartTime: String!\n    $mobilisationEndTime: String!\n    $arrivalStartTime: String!\n    $arrivalEndTime: String!\n  ) {\n    SetStreamArrivalTimes(\n      id: $id\n      mobilisationStartTime: $mobilisationStartTime\n      mobilisationEndTime: $mobilisationEndTime\n      arrivalStartTime: $arrivalStartTime\n      arrivalEndTime: $arrivalEndTime\n    ) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n"): (typeof documents)["\n  mutation SetStreamArrivalTimes(\n    $id: ID!\n    $mobilisationStartTime: String!\n    $mobilisationEndTime: String!\n    $arrivalStartTime: String!\n    $arrivalEndTime: String!\n  ) {\n    SetStreamArrivalTimes(\n      id: $id\n      mobilisationStartTime: $mobilisationStartTime\n      mobilisationEndTime: $mobilisationEndTime\n      arrivalStartTime: $arrivalStartTime\n      arrivalEndTime: $arrivalEndTime\n    ) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamArrivalTimes($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n"): (typeof documents)["\n  query getStreamArrivalTimes($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      mobilisationStartTime\n      mobilisationEndTime\n      arrivalStartTime\n      arrivalEndTime\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeGovernorshipArrrivalsAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForGovernorship {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeGovernorshipArrrivalsAdmin(\n    $governorshipId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipArrivalsAdmin(\n      governorshipId: $governorshipId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForGovernorship {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCouncilArrrivalsAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForCouncil {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCouncilArrrivalsAdmin(\n    $councilId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilArrivalsAdmin(\n      councilId: $councilId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      isArrivalsAdminForCouncil {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamArrrivalsAdmin(\n    $streamId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForStream {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamArrrivalsAdmin(\n    $streamId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamArrivalsAdmin(\n      streamId: $streamId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForStream {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCampusArrrivalsAdmin(\n    $campusId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForCampus {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCampusArrrivalsAdmin(\n    $campusId: ID!\n    $newAdminId: ID!\n    $oldAdminId: ID!\n  ) {\n    RemoveCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $oldAdminId\n      newArrivalsAdminId: $newAdminId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusArrivalsAdmin(\n      campusId: $campusId\n      arrivalsAdminId: $newAdminId\n      oldArrivalsAdminId: $oldAdminId\n    ) {\n      id\n      firstName\n      lastName\n      isArrivalsAdminForCampus {\n        id\n        arrivalsAdmin {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadMobilisationPicture(\n    $bacentaId: ID!\n    $serviceDate: String!\n    $mobilisationPicture: String!\n  ) {\n    UploadMobilisationPicture(\n      bacentaId: $bacentaId\n      serviceDate: $serviceDate\n      mobilisationPicture: $mobilisationPicture\n    ) {\n      id\n      attendance\n      mobilisationPicture\n      serviceLog {\n        bacenta {\n          id\n          stream_name\n          bussing(limit: 1) {\n            id\n            serviceDate {\n              date\n            }\n            week\n            mobilisationPicture\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UploadMobilisationPicture(\n    $bacentaId: ID!\n    $serviceDate: String!\n    $mobilisationPicture: String!\n  ) {\n    UploadMobilisationPicture(\n      bacentaId: $bacentaId\n      serviceDate: $serviceDate\n      mobilisationPicture: $mobilisationPicture\n    ) {\n      id\n      attendance\n      mobilisationPicture\n      serviceLog {\n        bacenta {\n          id\n          stream_name\n          bussing(limit: 1) {\n            id\n            serviceDate {\n              date\n            }\n            week\n            mobilisationPicture\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordVehicleFromBacenta(\n    $bacentaId: ID!\n    $bussingRecordId: ID!\n    $leaderDeclaration: Int!\n    $vehicle: String!\n    $picture: String!\n  ) {\n    RecordVehicleFromBacenta(\n      bacentaId: $bacentaId\n      bussingRecordId: $bussingRecordId\n      leaderDeclaration: $leaderDeclaration\n      vehicle: $vehicle\n      picture: $picture\n    ) {\n      id\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      bussingRecord {\n        serviceLog {\n          bacenta {\n            id\n            stream_name\n            bussing(limit: 1) {\n              id\n              week\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RecordVehicleFromBacenta(\n    $bacentaId: ID!\n    $bussingRecordId: ID!\n    $leaderDeclaration: Int!\n    $vehicle: String!\n    $picture: String!\n  ) {\n    RecordVehicleFromBacenta(\n      bacentaId: $bacentaId\n      bussingRecordId: $bussingRecordId\n      leaderDeclaration: $leaderDeclaration\n      vehicle: $vehicle\n      picture: $picture\n    ) {\n      id\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      bussingRecord {\n        serviceLog {\n          bacenta {\n            id\n            stream_name\n            bussing(limit: 1) {\n              id\n              week\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmVehicleByAdmin(\n    $vehicleRecordId: ID!\n    $attendance: Int!\n    $vehicle: String!\n    $comments: String!\n  ) {\n    ConfirmVehicleByAdmin(\n      vehicleRecordId: $vehicleRecordId\n      attendance: $attendance\n      vehicle: $vehicle\n      comments: $comments\n    ) {\n      id\n      attendance\n      arrivalTime\n      vehicle\n      vehicleTopUp\n      momoName\n      momoNumber\n\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      comments\n      outbound\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmVehicleByAdmin(\n    $vehicleRecordId: ID!\n    $attendance: Int!\n    $vehicle: String!\n    $comments: String!\n  ) {\n    ConfirmVehicleByAdmin(\n      vehicleRecordId: $vehicleRecordId\n      attendance: $attendance\n      vehicle: $vehicle\n      comments: $comments\n    ) {\n      id\n      attendance\n      arrivalTime\n      vehicle\n      vehicleTopUp\n      momoName\n      momoNumber\n\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      comments\n      outbound\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVehicleSupport($vehicleRecordId: ID!) {\n    SetVehicleSupport(vehicleRecordId: $vehicleRecordId) {\n      id\n      vehicleTopUp\n    }\n  }\n"): (typeof documents)["\n  mutation SetVehicleSupport($vehicleRecordId: ID!) {\n    SetVehicleSupport(vehicleRecordId: $vehicleRecordId) {\n      id\n      vehicleTopUp\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendVehicleSupport(\n    $vehicleRecordId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $vehicleTopUp: Int!\n    $outbound: Boolean!\n  ) {\n    SendVehicleSupport(\n      vehicleRecordId: $vehicleRecordId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      vehicleTopUp: $vehicleTopUp\n      outbound: $outbound\n    ) {\n      id\n      vehicleTopUp\n      momoNumber\n      momoName\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  mutation SendVehicleSupport(\n    $vehicleRecordId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $vehicleTopUp: Int!\n    $outbound: Boolean!\n  ) {\n    SendVehicleSupport(\n      vehicleRecordId: $vehicleRecordId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      vehicleTopUp: $vehicleTopUp\n      outbound: $outbound\n    ) {\n      id\n      vehicleTopUp\n      momoNumber\n      momoName\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetSwellDate($date: String!) {\n    SetSwellDate(date: $date) {\n      id\n      date\n      swell\n    }\n  }\n"): (typeof documents)["\n  mutation SetSwellDate($date: String!) {\n    SetSwellDate(date: $date) {\n      id\n      date\n      swell\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCodeOfTheDay($code: String!) {\n    SetCodeOfTheDay(code: $code)\n  }\n"): (typeof documents)["\n  mutation SetCodeOfTheDay($code: String!) {\n    SetCodeOfTheDay(code: $code)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      council {\n        id\n        stream {\n          id\n          name\n          meetingDay {\n            day\n            dayNumber\n          }\n          arrivalEndTime\n        }\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n    }\n  }\n"): (typeof documents)["\n  query governorshipArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      council {\n        id\n        stream {\n          id\n          name\n          meetingDay {\n            day\n            dayNumber\n          }\n          arrivalEndTime\n        }\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalEndTime\n      }\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorshipCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n"): (typeof documents)["\n  query councilArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalEndTime\n      }\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorshipCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      arrivalEndTime\n      councilCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n"): (typeof documents)["\n  query streamArrivalsDashboard($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      arrivalEndTime\n      councilCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringArrivalsDashboard(\n    $id: ID!\n    $date: Date!\n    $arrivalDate: String!\n  ) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      streamCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n"): (typeof documents)["\n  query gatheringArrivalsDashboard(\n    $id: ID!\n    $date: Date!\n    $arrivalDate: String!\n  ) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      arrivalsAdmin {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      streamCount\n      bacentasNoActivityCount(arrivalDate: $arrivalDate)\n      bacentasMobilisingCount(arrivalDate: $arrivalDate)\n      bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n      bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n      bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n      bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n      bussesOnTheWayCount(arrivalDate: $arrivalDate)\n      bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n      vehiclesNotCountedCount(arrivalDate: $arrivalDate)\n\n      vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n      vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n      vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n      vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query confirmGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query confirmGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query confirmCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query confirmCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query confirmStreamArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query confirmStreamArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query confirmGatheringArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query confirmGatheringArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussing(limit: 1) {\n          id\n          counted_by {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaArrivals($id: ID!, $date: Date!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        mobilisationStartTime\n        mobilisationEndTime\n        arrivalStartTime\n        arrivalEndTime\n      }\n      momoNumber\n      sprinterTopUp\n      urvanTopUp\n\n      arrivalsCodeOfTheDay\n      bussing(limit: 1) {\n        id\n        createdAt\n        serviceDate {\n          date\n        }\n        attendance\n        vehicleRecords {\n          id\n          vehicle\n          attendance\n          arrivalTime\n        }\n        week\n        mobilisationPicture\n      }\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n"): (typeof documents)["\n  query bacentaArrivals($id: ID!, $date: Date!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        mobilisationStartTime\n        mobilisationEndTime\n        arrivalStartTime\n        arrivalEndTime\n      }\n      momoNumber\n      sprinterTopUp\n      urvanTopUp\n\n      arrivalsCodeOfTheDay\n      bussing(limit: 1) {\n        id\n        createdAt\n        serviceDate {\n          date\n        }\n        attendance\n        vehicleRecords {\n          id\n          vehicle\n          attendance\n          arrivalTime\n        }\n        week\n        mobilisationPicture\n      }\n    }\n    timeGraphs(where: { date: $date }) {\n      id\n      date\n      swell\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsGovernorship {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsGovernorship {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCouncil {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCouncil {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsStream {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsStream {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCampus {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringLeaderArrivals($id: ID!) {\n    members(where: { id: $id }, options: { limit: 1 }) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsCampus {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayBussingRecords($bussingRecordId: ID!, $bacentaId: ID!) {\n    bussingRecords(where: { id: $bussingRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      serviceDate {\n        date\n      }\n      week\n      mobilisationPicture\n      leaderDeclaration\n      attendance\n      bussingTopUp\n      numberOfBusses\n      bussingPictures\n      numberOfSprinters\n      numberOfUrvans\n      numberOfCars\n      vehicleRecords {\n        id\n        vehicle\n        arrivalTime\n        attendance\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        arrivalStartTime\n        arrivalEndTime\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayBussingRecords($bussingRecordId: ID!, $bacentaId: ID!) {\n    bussingRecords(where: { id: $bussingRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      serviceDate {\n        date\n      }\n      week\n      mobilisationPicture\n      leaderDeclaration\n      attendance\n      bussingTopUp\n      numberOfBusses\n      bussingPictures\n      numberOfSprinters\n      numberOfUrvans\n      numberOfCars\n      vehicleRecords {\n        id\n        vehicle\n        arrivalTime\n        attendance\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        arrivalStartTime\n        arrivalEndTime\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayVehicleRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      vehicle\n      picture\n      comments\n      arrivalTime\n      outbound\n      mobileNetwork\n      momoName\n      momoNumber\n      transactionReference\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalStartTime\n        arrivalEndTime\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayVehicleRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleTopUp\n      vehicle\n      picture\n      comments\n      arrivalTime\n      outbound\n      mobileNetwork\n      momoName\n      momoNumber\n      transactionReference\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n\n      stream {\n        id\n        name\n        meetingDay {\n          day\n          dayNumber\n        }\n        arrivalStartTime\n        arrivalEndTime\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayVehiclePaymentRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleCost\n      picture\n      momoNumber\n      momoName\n      vehicle\n      arrivalTime\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorship {\n        id\n        name\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      stream {\n        id\n        name\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayVehiclePaymentRecords($vehicleRecordId: ID!, $bacentaId: ID!) {\n    vehicleRecords(where: { id: $vehicleRecordId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      counted_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      leaderDeclaration\n      attendance\n      vehicleCost\n      picture\n      momoNumber\n      momoName\n      vehicle\n      arrivalTime\n      outbound\n      paystackTransferCode\n      transactionStatus\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      governorship {\n        id\n        name\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      stream {\n        id\n        name\n      }\n      bussing(limit: 1) {\n        id\n        vehicleRecords {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayArrivalsPaymentData($arrivalsDate: String!, $streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      arrivalsPaymentData(arrivalsDate: $arrivalsDate) {\n        stream\n        bacenta\n        councilHead\n        leader\n        bacentaCode\n        attendance\n        confirmedAttendance\n        vehicle\n        outbound\n        topUp\n        vehicleCost\n        momoNumber\n        momoName\n        comments\n        council\n        governorship\n        society\n        date\n        arrivalTime\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayArrivalsPaymentData($arrivalsDate: String!, $streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      arrivalsPaymentData(arrivalsDate: $arrivalsDate) {\n        stream\n        bacenta\n        councilHead\n        leader\n        bacentaCode\n        attendance\n        confirmedAttendance\n        vehicle\n        outbound\n        topUp\n        vehicleCost\n        momoNumber\n        momoName\n        comments\n        council\n        governorship\n        society\n        date\n        arrivalTime\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasNoActivity($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNoActivity(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasMobilising($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasMobilising(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasOnTheWay($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasOnTheWay(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasToCount($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasToCount($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasToCount($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasToCount($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilVehiclesToBePaid($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasToBePaid(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehiclesToBePaid {\n            id\n            attendance\n            vehicle\n            vehicleTopUp\n            arrivalTime\n            transactionStatus\n            transactionReference\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilVehiclesToBePaid($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasToBePaid(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehiclesToBePaid {\n            id\n            attendance\n            vehicle\n            vehicleTopUp\n            arrivalTime\n            transactionStatus\n            transactionReference\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasToCount($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehicleRecords(where: { arrivalTime: null }) {\n            id\n            attendance\n            vehicle\n            arrivalTime\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasToCount($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          vehicleRecords(where: { arrivalTime: null }) {\n            id\n            attendance\n            vehicle\n            arrivalTime\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasToCount($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasToCount($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasNotCounted(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasArrived($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasArrived($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasArrived($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasArrived($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasArrived($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasArrived($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasArrived($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasArrived($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasHaveArrived(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBacentasBelow8($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      bacentasBelow8(arrivalDate: $arrivalDate) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          nameWithTitle\n          pictureUrl\n          phoneNumber\n          whatsappNumber\n        }\n        bussingThisWeek(limit: 1, bussingDate: $arrivalDate) {\n          id\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilByGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilByGovernorshipArrivals($id: ID!, $arrivalDate: String!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamByCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamByCouncilArrivals($id: ID!, $arrivalDate: String!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringByStreamArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringByStreamArrivals($id: ID!, $arrivalDate: String!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          currentTitle\n          nameWithTitle\n          pictureUrl\n        }\n\n        activeBacentaCount\n        bacentasNoActivityCount(arrivalDate: $arrivalDate)\n        bacentasMobilisingCount(arrivalDate: $arrivalDate)\n        bacentasOnTheWayCount(arrivalDate: $arrivalDate)\n        bacentasBelow8Count(arrivalDate: $arrivalDate)\n\n        bacentasHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussingMembersOnTheWayCount(arrivalDate: $arrivalDate)\n        bussingMembersHaveArrivedCount(arrivalDate: $arrivalDate)\n        bussesOnTheWayCount(arrivalDate: $arrivalDate)\n        bussesThatArrivedCount(arrivalDate: $arrivalDate)\n\n        vehiclesToBePaidCount(arrivalDate: $arrivalDate)\n        vehiclesHaveBeenPaidCount(arrivalDate: $arrivalDate)\n        vehicleAmountToBePaid(arrivalDate: $arrivalDate)\n        vehicleAmountHasBeenPaid(arrivalDate: $arrivalDate)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusCampaigns($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"): (typeof documents)["\n  query campusCampaigns($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusTrends($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query campusTrends($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      campaigns\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCampusByStream($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCampusByStream($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetEquipmentDeadline(\n    $startDate: Date!\n    $endDate: Date!\n    $campusId: ID!\n  ) {\n    SetEquipmentDeadline(\n      startDate: $startDate\n      endDate: $endDate\n      id: $campusId\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SetEquipmentDeadline(\n    $startDate: Date!\n    $endDate: Date!\n    $campusId: ID!\n  ) {\n    SetEquipmentDeadline(\n      startDate: $startDate\n      endDate: $endDate\n      id: $campusId\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentEndDate($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      equipmentEndDate\n    }\n  }\n"): (typeof documents)["\n  query equipmentEndDate($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      equipmentEndDate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $campusId: ID\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      streamCount\n    }\n  }\n"): (typeof documents)["\n  query campusEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $campusId: ID\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      streamCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCampusByStreamDefaulters($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCampusByStreamDefaulters($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      streams {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCampusDefaultersByGovernorship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCampusDefaultersByGovernorship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCampusDefaultersByFellowship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCampusDefaultersByFellowship($campusId: ID) {\n    campuses(where: { id: $campusId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamCampaigns($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"): (typeof documents)["\n  query streamCampaigns($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamTrends($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query streamTrends($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentStreamByCouncil($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentStreamByCouncil($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n        governorshipEquipmentFilledCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentStreamByCouncilDefaulters($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentStreamByCouncilDefaulters($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      councils {\n        id\n        name\n        governorshipCount\n        governorshipEquipmentFilledCount\n        governorshipEquipmentNotFilledCount\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $streamId: ID\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      councilCount\n    }\n  }\n"): (typeof documents)["\n  query streamEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $streamId: ID\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      councilCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentStreamDefaultersByGovernorship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentStreamDefaultersByGovernorship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentStreamDefaultersByFellowship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentStreamDefaultersByFellowship($streamId: ID) {\n    streams(where: { id: $streamId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilsCampaigns($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"): (typeof documents)["\n  query councilsCampaigns($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilsTrends($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query councilsTrends($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      equipmentRecord {\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n      governorshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCouncilByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        equipmentRecord {\n          id\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCouncilByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        equipmentRecord {\n          id\n          bluetoothSpeakers\n          offeringBags\n          pulpits\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $councilId: ID\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n"): (typeof documents)["\n  query councilEquipmentDefaultersNumberByGovernorshipAndFellowship(\n    $councilId: ID\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipCount\n      governorshipEquipmentFilledCount\n      governorshipEquipmentNotFilledCount\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCouncilDefaultersByFellowship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCouncilDefaultersByFellowship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentCouncilByGovernorshipDefaulters($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        equipmentRecord {\n          id\n          pulpits\n        }\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentCouncilByGovernorshipDefaulters($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n        fellowshipEquipmentFilledCount\n        fellowshipEquipmentNotFilledCount\n        equipmentRecord {\n          id\n          pulpits\n        }\n        admin {\n          id\n          firstName\n          lastName\n          whatsappNumber\n          phoneNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentGovernorshipDefaultersByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentGovernorshipDefaultersByGovernorship($councilId: ID) {\n    councils(where: { id: $councilId }) {\n      id\n      governorshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipCampaigns($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"): (typeof documents)["\n  query governorshipCampaigns($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipsTrends($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query governorshipsTrends($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n        pulpits\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateGovernorshipEquipmentRecord(\n    $id: ID!\n    $pulpits: Int!\n    $date: Date!\n  ) {\n    CreateGovernorshipEquipmentRecord(id: $id, pulpits: $pulpits, date: $date) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateGovernorshipEquipmentRecord(\n    $id: ID!\n    $pulpits: Int!\n    $date: Date!\n  ) {\n    CreateGovernorshipEquipmentRecord(id: $id, pulpits: $pulpits, date: $date) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LatestEquipmentRecord($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n"): (typeof documents)["\n  query LatestEquipmentRecord($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      equipmentRecord {\n        id\n        pulpits\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentGovernorshipByBacenta($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      bacentas {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentGovernorshipByBacenta($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      bacentas {\n        id\n        name\n        equipmentRecord {\n          bluetoothSpeakers\n          offeringBags\n        }\n        fellowshipEquipmentFilledCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentGovernorshipDefaultersNumberByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n"): (typeof documents)["\n  query equipmentGovernorshipDefaultersNumberByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query equipmentGovernorshipDefaultersListByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query equipmentGovernorshipDefaultersListByFellowship($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      fellowshipEquipmentFilledCount\n      fellowshipEquipmentNotFilledCount\n      fellowshipEquipmentNotFilled {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaCampaigns($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"): (typeof documents)["\n  query bacentaCampaigns($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      campaigns\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaTrends($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      equipmentRecord {\n        offeringBags\n        bluetoothSpeakers\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query bacentaTrends($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      equipmentRecord {\n        offeringBags\n        bluetoothSpeakers\n      }\n      fellowshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaByFellowship($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n    }\n  }\n"): (typeof documents)["\n  query bacentaByFellowship($bacentaId: ID) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      fellowshipEquipmentFilledCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipTrends($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"): (typeof documents)["\n  query fellowshipTrends($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFellowshipEquipmentRecord(\n    $id: ID!\n    $offeringBags: Int!\n    $date: Date!\n    $bluetoothSpeakers: Int!\n  ) {\n    CreateFellowshipEquipmentRecord(\n      id: $id\n      offeringBags: $offeringBags\n      date: $date\n      bluetoothSpeakers: $bluetoothSpeakers\n    ) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFellowshipEquipmentRecord(\n    $id: ID!\n    $offeringBags: Int!\n    $date: Date!\n    $bluetoothSpeakers: Int!\n  ) {\n    CreateFellowshipEquipmentRecord(\n      id: $id\n      offeringBags: $offeringBags\n      date: $date\n      bluetoothSpeakers: $bluetoothSpeakers\n    ) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LatestEquipmenRecord($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"): (typeof documents)["\n  query LatestEquipmenRecord($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      equipmentRecord {\n        id\n        bluetoothSpeakers\n        offeringBags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Governorships($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      bacentas {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query Governorships($governorshipId: ID) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      bacentas {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordMultiplicationEvent(\n    $churchId: ID!\n    $preacherId: String!\n    $crusadeLocation: String!\n    $attendance: Int!\n    $income: Float!\n    $souls: Int!\n    $miracles: Int!\n    $crusadePictures: [String!]!\n    $treasurerSelfie: String!\n    $crusadeDate: Date!\n    $treasurers: [ID]!\n    $foreignCurrency: String\n  ) {\n    RecordMultiplicationEvent(\n      churchId: $churchId\n      preacherId: $preacherId\n      crusadeLocation: $crusadeLocation\n      attendance: $attendance\n      income: $income\n      souls: $souls\n      miracles: $miracles\n      crusadePictures: $crusadePictures\n      treasurerSelfie: $treasurerSelfie\n      crusadeDate: $crusadeDate\n      treasurers: $treasurers\n      foreignCurrency: $foreignCurrency\n    ) {\n      attendance\n      crusadeLocation\n      crusadePictures\n      id\n      income\n      miracles\n      souls\n    }\n  }\n"): (typeof documents)["\n  mutation RecordMultiplicationEvent(\n    $churchId: ID!\n    $preacherId: String!\n    $crusadeLocation: String!\n    $attendance: Int!\n    $income: Float!\n    $souls: Int!\n    $miracles: Int!\n    $crusadePictures: [String!]!\n    $treasurerSelfie: String!\n    $crusadeDate: Date!\n    $treasurers: [ID]!\n    $foreignCurrency: String\n  ) {\n    RecordMultiplicationEvent(\n      churchId: $churchId\n      preacherId: $preacherId\n      crusadeLocation: $crusadeLocation\n      attendance: $attendance\n      income: $income\n      souls: $souls\n      miracles: $miracles\n      crusadePictures: $crusadePictures\n      treasurerSelfie: $treasurerSelfie\n      crusadeDate: $crusadeDate\n      treasurers: $treasurers\n      foreignCurrency: $foreignCurrency\n    ) {\n      attendance\n      crusadeLocation\n      crusadePictures\n      id\n      income\n      miracles\n      souls\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MultiplicationRecords($id: ID!) {\n    multiplicationRecords(where: { id: $id }) {\n      id\n      crusadeLocation\n      attendance\n      income\n      foreignCurrency\n      souls\n      miracles\n      bankingSlip\n      bankingProof\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      crusadePictures\n      treasurerSelfie\n      crusadeDate {\n        date\n      }\n      preacher {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  query MultiplicationRecords($id: ID!) {\n    multiplicationRecords(where: { id: $id }) {\n      id\n      crusadeLocation\n      attendance\n      income\n      foreignCurrency\n      souls\n      miracles\n      bankingSlip\n      bankingProof\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      crusadePictures\n      treasurerSelfie\n      crusadeDate {\n        date\n      }\n      preacher {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipServiceMultiplicationGraphs($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipServiceMultiplicationGraphs($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampusServiceMultiplicationGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampusServiceMultiplicationGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilServiceMultiplicationGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CouncilServiceMultiplicationGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamServiceMultiplicationGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamServiceMultiplicationGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      aggregateMultiplicationRecords(limit: 4) {\n        attendance\n        id\n        income\n        week\n      }\n      multiplicationRecords(limit: 4) {\n        id\n        attendance\n        income\n        crusadeDate {\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MultiplicationBankingSlipSubmission(\n    $multiplicationRecordId: String!\n    $bankingSlip: String!\n  ) {\n    SubmitMultiplicationBankingSlip(\n      multiplicationRecordId: $multiplicationRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MultiplicationBankingSlipSubmission(\n    $multiplicationRecordId: String!\n    $bankingSlip: String!\n  ) {\n    SubmitMultiplicationBankingSlip(\n      multiplicationRecordId: $multiplicationRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusMultiplicationBankingSlipQueries($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusMultiplicationBankingSlipQueries($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamMultiplicationBankingSlipQueries($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamMultiplicationBankingSlipQueries($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilMultiplicationBankingSlipQueries($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilMultiplicationBankingSlipQueries($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipMultiplicationBankingSlipQueries($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipMultiplicationBankingSlipQueries($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      multiplicationRecords(limit: 20) {\n        id\n        created_by {\n          id\n          firstName\n          lastName\n        }\n        crusadeDate {\n          date\n        }\n        bankingProof\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n        }\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusAggregateMemberConversion($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusAggregateMemberConversion($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamAggregateMemberConversion($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamAggregateMemberConversion($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilAggregateMemberConversion($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilAggregateMemberConversion($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipAggregateMemberConversion($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipAggregateMemberConversion($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaAggregateMemberConversion($bacentaId: ID!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaAggregateMemberConversion($bacentaId: ID!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipAggregateMemberConversion($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"): (typeof documents)["\n  query fellowshipAggregateMemberConversion($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      aggregateMemberConversion {\n        howYouJoined\n        number\n        percentage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamSheepSeekers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      sheepseekers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      activeBacentaCount\n    }\n  }\n"): (typeof documents)["\n  query streamSheepSeekers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      sheepseekers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      activeBacentaCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    MakeStreamSheepSeeker(streamId: $streamId, sheepseekerId: $sheepseekerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    MakeStreamSheepSeeker(streamId: $streamId, sheepseekerId: $sheepseekerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    RemoveStreamSheepSeeker(\n      streamId: $streamId\n      sheepseekerId: $sheepseekerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveStreamSheepSeeker($streamId: ID!, $sheepseekerId: ID!) {\n    RemoveStreamSheepSeeker(\n      streamId: $streamId\n      sheepseekerId: $sheepseekerId\n    ) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStatForYearTillDate(\n    $campusId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStatForYearTillDate(\n    $campusId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamStatForYearTillDate(\n    $streamId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamStatForYearTillDate(\n    $streamId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilStatForYearTillDate(\n    $councilId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilStatForYearTillDate(\n    $councilId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipStatForYearTillDate(\n    $governorshipId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipStatForYearTillDate(\n    $governorshipId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaStatForYearTillDate(\n    $bacentaId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaStatForYearTillDate(\n    $bacentaId: ID\n    $startDate: String!\n    $endDate: String!\n  ) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      statsForYearTillDate(startDate: $startDate, endDate: $endDate) {\n        income\n        attendance\n        bussing\n        avgWeeklyIncome\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveRoleFromMember($role: String!) {\n    RemoveRoleFromMember(role: $role)\n  }\n"): (typeof documents)["\n  mutation RemoveRoleFromMember($role: String!) {\n    RemoveRoleFromMember(role: $role)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipLeaderDashboard($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        fullName\n      }\n      serviceLogs {\n        id\n        historyRecord\n        serviceRecords {\n          createdAt\n          attendance\n          income\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query fellowshipLeaderDashboard($fellowshipId: ID!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        fullName\n      }\n      serviceLogs {\n        id\n        historyRecord\n        serviceRecords {\n          createdAt\n          attendance\n          income\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query churchList($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      leadsFellowship {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsBacenta {\n        id\n        name\n        vacationStatus\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n      leadsCouncil {\n        id\n        name\n      }\n      leadsStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      leadsCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n      leadsOversight {\n        id\n        name\n      }\n      leadsDenomination {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isAdminForCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForDenomination {\n        id\n        name\n      }\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n      }\n      isArrivalsAdminForStream {\n        id\n        name\n        vacationStatus\n      }\n      isArrivalsAdminForCampus {\n        id\n        name\n      }\n\n      #MArrivals\n      isArrivalsCounterForStream {\n        id\n        name\n      }\n      isArrivalsAdminForCouncil {\n        id\n        name\n      }\n\n      isTellerForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isArrivalsPayerForCouncil {\n        id\n        name\n      }\n\n      #sheepSeeking\n      isSheepSeekerForStream {\n        id\n        name\n        bankAccount\n      }\n\n      leadsHub {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n        vacationStatus\n      }\n      isAdminForCreativeArts {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query churchList($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      leadsFellowship {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsBacenta {\n        id\n        name\n        vacationStatus\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n      leadsCouncil {\n        id\n        name\n      }\n      leadsStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      leadsCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n      leadsOversight {\n        id\n        name\n      }\n      leadsDenomination {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isAdminForCampus {\n        id\n        name\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n      }\n\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForDenomination {\n        id\n        name\n      }\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n      }\n      isArrivalsAdminForStream {\n        id\n        name\n        vacationStatus\n      }\n      isArrivalsAdminForCampus {\n        id\n        name\n      }\n\n      #MArrivals\n      isArrivalsCounterForStream {\n        id\n        name\n      }\n      isArrivalsAdminForCouncil {\n        id\n        name\n      }\n\n      isTellerForStream {\n        id\n        name\n        vacationStatus\n        bankAccount\n      }\n      isArrivalsPayerForCouncil {\n        id\n        name\n      }\n\n      #sheepSeeking\n      isSheepSeekerForStream {\n        id\n        name\n        bankAccount\n      }\n\n      leadsHub {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n        vacationStatus\n      }\n\n      leadsCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n        vacationStatus\n      }\n      isAdminForCreativeArts {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query churchesLed($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberCount\n      basontaMembershipCount\n      leadsFellowshipCount\n      leadsBacentaCount\n      leadsAdminsGovernorshipCount\n      leadsAdminsCouncilCount\n      leadsAdminsCampusCount\n      leadsHubCount\n      leadsAdminsMinistryCount\n      leadsAdminsCreativeArtsCount\n    }\n  }\n"): (typeof documents)["\n  query churchesLed($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberCount\n      basontaMembershipCount\n      leadsFellowshipCount\n      leadsBacentaCount\n      leadsAdminsGovernorshipCount\n      leadsAdminsCouncilCount\n      leadsAdminsCampusCount\n      leadsHubCount\n      leadsAdminsMinistryCount\n      leadsAdminsCreativeArtsCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsFellowship {\n        id\n        name\n        stream_name\n        memberCount\n        vacationStatus\n\n        services(limit: 4) {\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query fellowshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsFellowship {\n        id\n        name\n        stream_name\n        memberCount\n        vacationStatus\n\n        services(limit: 4) {\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsBacenta {\n        id\n        name\n        stream_name\n\n        vacationStatus\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsBacenta {\n        id\n        name\n        stream_name\n\n        vacationStatus\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsGovernorship {\n        id\n        name\n        stream_name\n\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsGovernorship {\n        id\n        name\n        stream_name\n\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCouncil {\n        id\n        name\n        stream_name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCouncil {\n        id\n        name\n        stream_name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsStream {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsStream {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        council {\n          id\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCampus {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForOversight {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForDenomination {\n        id\n        name\n\n        aggregateServiceRecords(limit: 4) {\n          id\n          attendance\n          income\n          dollarIncome\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForGovernorship {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCouncil {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCampus {\n        id\n        name\n\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusArrivalsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsAdminForCampus {\n        id\n        name\n\n        aggregateBussingRecords(limit: 4) {\n          id\n          attendance\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamArrivalsCounter($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsCounterForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamArrivalsCounter($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isArrivalsCounterForStream {\n        id\n        name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamArrivalsTeller($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isTellerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamArrivalsTeller($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isTellerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query sheepSheepSeekerStream($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isSheepSeekerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query sheepSheepSeekerStream($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isSheepSeekerForStream {\n        id\n        name\n        stream_name\n\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHub {\n        id\n        name\n\n        rehearsals(limit: 4) {\n          id\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHub {\n        id\n        name\n\n        rehearsals(limit: 4) {\n          id\n          createdAt\n          attendance\n          income\n          week\n          serviceDate {\n            date\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHubCouncil {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsHubCouncil {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsLeader($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      leadsCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForMinistry {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      isAdminForCreativeArts {\n        id\n        name\n\n        aggregateRehearsalRecords(limit: 4) {\n          id\n          attendance\n          income\n          week\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMember(\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $email: String\n    $phoneNumber: String!\n    $whatsappNumber: String!\n    $dob: String!\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $visitationArea: String!\n    $basonta: String\n    $pictureUrl: String!\n  ) {\n    CreateMember(\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      visitationArea: $visitationArea\n      bacenta: $bacenta\n      basonta: $basonta\n      pictureUrl: $pictureUrl\n    ) {\n      id\n      firstName\n      lastName\n      stream_name\n\n      bacenta {\n        id\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMember(\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $email: String\n    $phoneNumber: String!\n    $whatsappNumber: String!\n    $dob: String!\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $visitationArea: String!\n    $basonta: String\n    $pictureUrl: String!\n  ) {\n    CreateMember(\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      visitationArea: $visitationArea\n      bacenta: $bacenta\n      basonta: $basonta\n      pictureUrl: $pictureUrl\n    ) {\n      id\n      firstName\n      lastName\n      stream_name\n\n      bacenta {\n        id\n\n        governorship {\n          id\n          council {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddMemberTitle(\n    $memberId: ID!\n    $title: String # $status: Boolean # $date: String\n    $date: Date\n  ) {\n    updateMembers(\n      where: { id: $memberId }\n      connect: {\n        title: { where: { node: { name: $title } }, edge: { date: $date } }\n      }\n    ) {\n      members {\n        id\n        firstName\n        lastName\n        title {\n          name\n        }\n        titleConnection {\n          edges {\n            date\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddMemberTitle(\n    $memberId: ID!\n    $title: String # $status: Boolean # $date: String\n    $date: Date\n  ) {\n    updateMembers(\n      where: { id: $memberId }\n      connect: {\n        title: { where: { node: { name: $title } }, edge: { date: $date } }\n      }\n    ) {\n      members {\n        id\n        firstName\n        lastName\n        title {\n          name\n        }\n        titleConnection {\n          edges {\n            date\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFellowship(\n    $name: String!\n    $bacentaId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateFellowship(\n      name: $name\n      bacentaId: $bacentaId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n      }\n      bacenta {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFellowship(\n    $name: String!\n    $bacentaId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateFellowship(\n      name: $name\n      bacentaId: $bacentaId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n      }\n      bacenta {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBacenta(\n    $name: String!\n    $governorshipId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateBacenta(\n      name: $name\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      governorship {\n        id\n        bacentas {\n          id\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBacenta(\n    $name: String!\n    $governorshipId: ID!\n    $leaderId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateBacenta(\n      name: $name\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      stream_name\n      governorship {\n        id\n        bacentas {\n          id\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateGovernorship($name: String!, $leaderId: ID!, $councilId: ID!) {\n    CreateGovernorship(\n      name: $name\n      leaderId: $leaderId\n      councilId: $councilId\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n        governorships {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateGovernorship($name: String!, $leaderId: ID!, $councilId: ID!) {\n    CreateGovernorship(\n      name: $name\n      leaderId: $leaderId\n      councilId: $councilId\n    ) {\n      id\n      name\n      stream_name\n      council {\n        id\n        governorships {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCouncil($name: String!, $leaderId: ID!, $streamId: ID!) {\n    CreateCouncil(name: $name, leaderId: $leaderId, streamId: $streamId) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        councils {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCouncil($name: String!, $leaderId: ID!, $streamId: ID!) {\n    CreateCouncil(name: $name, leaderId: $leaderId, streamId: $streamId) {\n      id\n      name\n      stream_name\n      stream {\n        id\n        councils {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateStream(\n    $name: String!\n    $leaderId: ID!\n    $campusId: ID!\n    $meetingDay: String!\n    $bankAccount: String!\n  ) {\n    CreateStream(\n      name: $name\n      leaderId: $leaderId\n      campusId: $campusId\n      meetingDay: $meetingDay\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      campus {\n        id\n        streams {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStream(\n    $name: String!\n    $leaderId: ID!\n    $campusId: ID!\n    $meetingDay: String!\n    $bankAccount: String!\n  ) {\n    CreateStream(\n      name: $name\n      leaderId: $leaderId\n      campusId: $campusId\n      meetingDay: $meetingDay\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      campus {\n        id\n        streams {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCampus(\n    $name: String!\n    $leaderId: ID!\n    $oversightId: ID!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    CreateCampus(\n      name: $name\n      leaderId: $leaderId\n      oversightId: $oversightId\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      oversight {\n        id\n        campuses {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCampus(\n    $name: String!\n    $leaderId: ID!\n    $oversightId: ID!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    CreateCampus(\n      name: $name\n      leaderId: $leaderId\n      oversightId: $oversightId\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      oversight {\n        id\n        campuses {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOversight(\n    $name: String!\n    $leaderId: ID!\n    $denominationId: ID!\n  ) {\n    CreateOversight(\n      name: $name\n      leaderId: $leaderId\n      denominationId: $denominationId\n    ) {\n      id\n      name\n\n      denomination {\n        id\n        oversights {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOversight(\n    $name: String!\n    $leaderId: ID!\n    $denominationId: ID!\n  ) {\n    CreateOversight(\n      name: $name\n      leaderId: $leaderId\n      denominationId: $denominationId\n    ) {\n      id\n      name\n\n      denomination {\n        id\n        oversights {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCreativeArts($name: String!, $leaderId: ID!, $campusId: ID!) {\n    CreateCreativeArts(name: $name, leaderId: $leaderId, campusId: $campusId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCreativeArts($name: String!, $leaderId: ID!, $campusId: ID!) {\n    CreateCreativeArts(name: $name, leaderId: $leaderId, campusId: $campusId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMinistry(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $streamId: ID!\n    $bankAccount: String!\n  ) {\n    CreateMinistry(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      streamId: $streamId\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMinistry(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $streamId: ID!\n    $bankAccount: String!\n  ) {\n    CreateMinistry(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      streamId: $streamId\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateHubCouncil($leaderId: ID!, $ministryId: ID!, $councilId: ID!) {\n    CreateHubCouncil(\n      leaderId: $leaderId\n      ministryId: $ministryId\n      councilId: $councilId\n    ) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateHubCouncil($leaderId: ID!, $ministryId: ID!, $councilId: ID!) {\n    CreateHubCouncil(\n      leaderId: $leaderId\n      ministryId: $ministryId\n      councilId: $councilId\n    ) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateHub(\n    $name: String!\n    $leaderId: ID!\n    $hubCouncilId: ID!\n    $governorshipId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateHub(\n      name: $name\n      leaderId: $leaderId\n      hubCouncilId: $hubCouncilId\n      governorshipId: $governorshipId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateHub(\n    $name: String!\n    $leaderId: ID!\n    $hubCouncilId: ID!\n    $governorshipId: ID!\n    $meetingDay: String!\n    $venueLongitude: Float\n    $venueLatitude: Float\n  ) {\n    CreateHub(\n      name: $name\n      leaderId: $leaderId\n      hubCouncilId: $hubCouncilId\n      governorshipId: $governorshipId\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMemberAccount($memberId: ID!) {\n    CreateMemberAccount(memberId: $memberId) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMemberAccount($memberId: ID!) {\n    CreateMemberAccount(memberId: $memberId) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewFellowshipLeader($fellowshipId: ID!, $leaderId: ID!) {\n    MakeFellowshipLeader(fellowshipId: $fellowshipId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewFellowshipLeader($fellowshipId: ID!, $leaderId: ID!) {\n    MakeFellowshipLeader(fellowshipId: $fellowshipId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewBacentaLeader($bacentaId: ID!, $leaderId: ID!) {\n    MakeBacentaLeader(bacentaId: $bacentaId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewBacentaLeader($bacentaId: ID!, $leaderId: ID!) {\n    MakeBacentaLeader(bacentaId: $bacentaId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewGovernorshipLeader($governorshipId: ID!, $leaderId: ID!) {\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewGovernorshipLeader($governorshipId: ID!, $leaderId: ID!) {\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewCouncilLeader($councilId: ID!, $leaderId: ID!) {\n    MakeCouncilLeader(councilId: $councilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewCouncilLeader($councilId: ID!, $leaderId: ID!) {\n    MakeCouncilLeader(councilId: $councilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewStreamLeader($streamId: ID!, $leaderId: ID!) {\n    MakeStreamLeader(streamId: $streamId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewStreamLeader($streamId: ID!, $leaderId: ID!) {\n    MakeStreamLeader(streamId: $streamId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewCampusLeader($campusId: ID!, $leaderId: ID!) {\n    MakeCampusLeader(campusId: $campusId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewCampusLeader($campusId: ID!, $leaderId: ID!) {\n    MakeCampusLeader(campusId: $campusId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewOversightLeader($oversightId: ID!, $leaderId: ID!) {\n    MakeOversightLeader(oversightId: $oversightId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewOversightLeader($oversightId: ID!, $leaderId: ID!) {\n    MakeOversightLeader(oversightId: $oversightId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewCreativeArtsLeader($creativeArtsId: ID!, $leaderId: ID!) {\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewCreativeArtsLeader($creativeArtsId: ID!, $leaderId: ID!) {\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewMinistryLeader($ministryId: ID!, $leaderId: ID!) {\n    MakeMinistryLeader(ministryId: $ministryId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewMinistryLeader($ministryId: ID!, $leaderId: ID!) {\n    MakeMinistryLeader(ministryId: $ministryId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewHubCouncilLeader($hubCouncilId: ID!, $leaderId: ID!) {\n    MakeHubCouncilLeader(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewHubCouncilLeader($hubCouncilId: ID!, $leaderId: ID!) {\n    MakeHubCouncilLeader(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewHubLeader($hubId: ID!, $leaderId: ID!) {\n    MakeHubLeader(hubId: $hubId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation NewHubLeader($hubId: ID!, $leaderId: ID!) {\n    MakeHubLeader(hubId: $hubId, leaderId: $leaderId) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMemberBio($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      stickyNote\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n      title {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayMemberBio($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      auth_id\n      firstName\n      middleName\n      lastName\n      fullName\n      nameWithTitle\n      email\n      phoneNumber\n      stickyNote\n      pictureUrl\n      visitationArea\n      whatsappNumber\n      pictureUrl\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n      title {\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMemberLeadership($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      leadsBacenta {\n        id\n        name\n        stream_name\n      }\n      leadsGovernorship {\n        id\n        name\n        stream_name\n      }\n      leadsCouncil {\n        id\n        name\n        stream_name\n      }\n      leadsStream {\n        id\n        name\n      }\n      leadsCampus {\n        id\n        name\n      }\n      leadsCreativeArts {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n      }\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsHub {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayMemberLeadership($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      leadsBacenta {\n        id\n        name\n        stream_name\n      }\n      leadsGovernorship {\n        id\n        name\n        stream_name\n      }\n      leadsCouncil {\n        id\n        name\n        stream_name\n      }\n      leadsStream {\n        id\n        name\n      }\n      leadsCampus {\n        id\n        name\n      }\n      leadsCreativeArts {\n        id\n        name\n      }\n\n      leadsMinistry {\n        id\n        name\n      }\n      leadsHubCouncil {\n        id\n        name\n      }\n\n      leadsHub {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMemberAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      #Admin Information\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n      }\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n      }\n\n      isAdminForCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayMemberAdmin($id: ID!) {\n    members(where: { id: $id }) {\n      id\n\n      #Admin Information\n      isAdminForOversight {\n        id\n        name\n      }\n      isAdminForCampus {\n        id\n        name\n      }\n      isAdminForStream {\n        id\n        name\n      }\n      isAdminForCouncil {\n        id\n        name\n        stream_name\n      }\n      isAdminForGovernorship {\n        id\n        name\n        stream_name\n      }\n\n      isAdminForCreativeArts {\n        id\n        name\n      }\n      isAdminForMinistry {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMemberChurch($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      #church info\n      basonta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n      }\n\n      bacenta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      #Personal history\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayMemberChurch($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      #church info\n      basonta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n      }\n\n      bacenta {\n        id\n        name\n        leader {\n          firstName\n          lastName\n        }\n        council {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n        }\n      }\n      #Personal history\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayFellowship($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      hubStatus\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      hub {\n        id\n        name\n        hubCouncil {\n          id\n          name\n          ministry {\n            id\n            name\n            creativeArts {\n              id\n              name\n            }\n          }\n        }\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayFellowship($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      hubStatus\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      hub {\n        id\n        name\n        hubCouncil {\n          id\n          name\n          ministry {\n            id\n            name\n            creativeArts {\n              id\n              name\n            }\n          }\n        }\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayFellowshipHistory($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayFellowshipHistory($id: ID!) {\n    fellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayBacentaHistory($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayBacentaHistory($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      services(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayBacenta($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      bankingCode\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      vacationStatus\n      target\n      outbound\n      sprinterTopUp\n      urvanTopUp\n\n      momoNumber\n      stream_name\n\n      governorship {\n        id\n        name\n        stream_name\n        council {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query displayBacenta($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      bankingCode\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      vacationStatus\n      target\n      outbound\n      sprinterTopUp\n      urvanTopUp\n\n      momoNumber\n      stream_name\n\n      governorship {\n        id\n        name\n        stream_name\n        council {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayGovernorship($id: ID!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream_name\n      hubCount\n      bacentaCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      bacentas(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n      hubs(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      council {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query displayGovernorship($id: ID!) {\n    governorships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream_name\n      hubCount\n      bacentaCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      bacentas(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n      hubs(options: { limit: 5 }) {\n        id\n        name\n        leader {\n          id\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      council {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayCouncil($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream {\n        id\n        name\n      }\n      stream_name\n      governorshipCount\n      bacentaCount\n      hubCouncilCount\n      hubCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      stream {\n        id\n        name\n      }\n      governorships(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      hubCouncils(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayCouncil($id: ID!) {\n    councils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      target\n      stream {\n        id\n        name\n      }\n      stream_name\n      governorshipCount\n      bacentaCount\n      hubCouncilCount\n      hubCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      stream {\n        id\n        name\n      }\n      governorships(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      hubCouncils(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayStream($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      target\n      councilCount\n      governorshipCount\n      bacentaCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      ministryCount\n      hubCount\n      hubCouncilCount\n      meetingDay {\n        day\n        dayNumber\n      }\n      campus {\n        id\n        name\n      }\n      councils(options: { limit: 5 }) {\n        id\n        name\n      }\n      ministries(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayStream($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      target\n      councilCount\n      governorshipCount\n      bacentaCount\n      hubFellowshipCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      ministryCount\n      hubCount\n      hubCouncilCount\n      meetingDay {\n        day\n        dayNumber\n      }\n      campus {\n        id\n        name\n      }\n      councils(options: { limit: 5 }) {\n        id\n        name\n      }\n      ministries(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayCampus($id: ID!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      target\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      creativeArtsCount\n      oversight {\n        id\n        name\n      }\n      streams(options: { limit: 5 }) {\n        id\n        name\n        stream_name\n      }\n      creativeArts(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayCampus($id: ID!) {\n    campuses(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      target\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      creativeArtsCount\n      oversight {\n        id\n        name\n      }\n      streams(options: { limit: 5 }) {\n        id\n        name\n        stream_name\n      }\n      creativeArts(options: { limit: 5 }) {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayOversight($id: ID!) {\n    oversights(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      denomination {\n        id\n        name\n      }\n      campuses {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayOversight($id: ID!) {\n    oversights(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n      activeIcBacentaCount\n      vacationIcBacentaCount\n      denomination {\n        id\n        name\n      }\n      campuses {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayCreativeArts($id: ID!) {\n    creativeArts(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      ministryCount\n      hubCouncilCount\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      ministries {\n        id\n        name\n      }\n      campus {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayCreativeArts($id: ID!) {\n    creativeArts(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      ministryCount\n      hubCouncilCount\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      ministries {\n        id\n        name\n      }\n      campus {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayDenomination($id: ID!) {\n    denominations(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n\n      oversights {\n        id\n        name\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayDenomination($id: ID!) {\n    denominations(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      campusCount\n      streamCount\n      councilCount\n      governorshipCount\n      bacentaCount\n      memberCount\n      pastorCount\n      vacationGraduatedBacentaCount\n\n      oversights {\n        id\n        name\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMinistry($id: ID!) {\n    ministries(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      stream {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      hubCouncilCount\n      hubCount\n\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncils {\n        id\n        name\n      }\n      creativeArts {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayMinistry($id: ID!) {\n    ministries(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      stream {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      admin {\n        id\n        firstName\n        lastName\n        pictureUrl\n      }\n      memberCount\n      hubCouncilCount\n      hubCount\n\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncils {\n        id\n        name\n      }\n      creativeArts {\n        id\n        name\n        campus {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayHubCouncil($id: ID!) {\n    hubCouncils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      memberCount\n      council {\n        id\n        name\n      }\n      hubs {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      ministry {\n        id\n        name\n        creativeArts {\n          id\n          name\n          campus {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayHubCouncil($id: ID!) {\n    hubCouncils(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      hubCount\n      activeHubFellowshipCount\n      vacationHubFellowshipCount\n      memberCount\n      council {\n        id\n        name\n      }\n      hubs {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      ministry {\n        id\n        name\n        creativeArts {\n          id\n          name\n          campus {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayHub($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      meetingDay {\n        day\n      }\n      location {\n        longitude\n        latitude\n      }\n      governorship {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      memberCount\n      vacationHubFellowshipCount\n      activeHubFellowshipCount\n\n      hubFellowships {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncil {\n        id\n        name\n\n        ministry {\n          id\n          name\n          creativeArts {\n            id\n            name\n            campus {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayHub($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n      vacationStatus\n      meetingDay {\n        day\n      }\n      location {\n        longitude\n        latitude\n      }\n      governorship {\n        id\n        name\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n      memberCount\n      vacationHubFellowshipCount\n      activeHubFellowshipCount\n\n      hubFellowships {\n        id\n        name\n      }\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n      hubCouncil {\n        id\n        name\n\n        ministry {\n          id\n          name\n          creativeArts {\n            id\n            name\n            campus {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayHubHistory($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      rehearsals(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayHubHistory($id: ID!) {\n    hubs(where: { id: $id }, options: { limit: 1 }) {\n      id\n      rehearsals(limit: 5) {\n        id\n        bankingProof\n        week\n        noServiceReason\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayHubFellowship($id: ID!) {\n    hubFellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query displayHubFellowship($id: ID!) {\n    hubFellowships(where: { id: $id }, options: { limit: 1 }) {\n      id\n      noIncomeTracking\n      vacationStatus\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n      bacenta {\n        id\n        name\n        governorship {\n          id\n          name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        currentTitle\n        nameWithTitle\n        pictureUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MemberHistory($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query MemberHistory($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StreamsHistory($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query StreamsHistory($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilsHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query CouncilsHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GovernorshipsHistory($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query GovernorshipsHistory($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BacentasHistory($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query BacentasHistory($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HubCouncilsHistory($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query HubCouncilsHistory($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HubHistory($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query HubHistory($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MinistryHistory($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query MinistryHistory($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CreativeArtsHistory($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query CreativeArtsHistory($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FellowshipsHistory($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query FellowshipsHistory($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampusHistory($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampusHistory($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      history(limit: 100) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getFederalMembers {\n    members(options: { sort: { firstName: ASC } }) {\n      id\n      firstName\n      lastName\n      pictureUrl\n      bacenta {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n      maritalStatus {\n        status\n      }\n      gender {\n        gender\n      }\n      title {\n        name\n      }\n      leadsFellowship {\n        name\n      }\n      leadsBacenta {\n        id\n        name\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n\n      leadsHubFellowship {\n        id\n        name\n      }\n      leadsHub {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getFederalMembers {\n    members(options: { sort: { firstName: ASC } }) {\n      id\n      firstName\n      lastName\n      pictureUrl\n      bacenta {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n      maritalStatus {\n        status\n      }\n      gender {\n        gender\n      }\n      title {\n        name\n      }\n      leadsFellowship {\n        name\n      }\n      leadsBacenta {\n        id\n        name\n      }\n      leadsGovernorship {\n        id\n        name\n      }\n\n      leadsHubFellowship {\n        id\n        name\n      }\n      leadsHub {\n        id\n        name\n      }\n      basonta {\n        id\n        name\n      }\n\n      isAdminForCouncil {\n        id\n        name\n      }\n      isAdminForGovernorship {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getServantMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getServantMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      firstName\n      lastName\n      fullName\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGatheringMembers($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGatheringMembers($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamMembers($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamMembers($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOversightMembers($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOversightMembers($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncilMembers($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncilMembers($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGovernorshipMembers($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGovernorshipMembers($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBacentaMembers($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBacentaMembers($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getFellowshipMembers($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getFellowshipMembers($id: ID!) {\n    fellowships(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubMembers($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHubMembers($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubCouncilMembers($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHubCouncilMembers($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistryMembers($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMinistryMembers($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCreativeArtsMembers($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCreativeArtsMembers($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      members {\n        id\n        firstName\n        lastName\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          name\n        }\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        title {\n          name\n        }\n        bacenta {\n          id\n          name\n        }\n        leadsBacenta {\n          id\n          name\n        }\n        leadsGovernorship {\n          id\n          name\n        }\n\n        bacenta {\n          id\n          name\n        }\n        leadsHub {\n          id\n          name\n        }\n        leadsMinistry {\n          id\n          name\n        }\n\n        isAdminForCouncil {\n          id\n          name\n        }\n        isAdminForGovernorship {\n          id\n          name\n        }\n\n        isAdminForMinistry {\n          id\n          name\n        }\n        isAdminForCreativeArts {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberSearch($key: String!, $id: ID!, $limit: Int!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: $limit) {\n        id\n        firstName\n        lastName\n        nameWithTitle\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      oversightSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n\n      campusSearch(key: $key, limit: $limit) {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      streamSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      councilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      governorshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      bacentaSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      fellowshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      creativeArtsSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      ministrySearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubCouncilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberSearch($key: String!, $id: ID!, $limit: Int!) {\n    members(where: { id: $id }) {\n      id\n      memberSearch(key: $key, limit: $limit) {\n        id\n        firstName\n        lastName\n        nameWithTitle\n        pictureUrl\n        stream_name\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n      oversightSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n\n      campusSearch(key: $key, limit: $limit) {\n        id\n        name\n        noIncomeTracking\n        currency\n        conversionRateToDollar\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      streamSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      councilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      governorshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      bacentaSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      fellowshipSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      creativeArtsSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      ministrySearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubCouncilSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n      hubSearch(key: $key, limit: $limit) {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          nameWithTitle\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipAvgWeekdayStats($fellowshipId: ID, $days: Int!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgFellowshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query fellowshipAvgWeekdayStats($fellowshipId: ID, $days: Int!) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgFellowshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaAvgWeekdayStats($bacentaId: ID, $days: Int!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgBacentaBussingAttendance(days: $days)\n        avgBacentaWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaAvgWeekdayStats($bacentaId: ID, $days: Int!) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgBacentaBussingAttendance(days: $days)\n        avgBacentaWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipAvgWeekdayStats($governorshipId: ID, $days: Int!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgGovernorshipBussingAttendance(days: $days)\n        avgGovernorshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipAvgWeekdayStats($governorshipId: ID, $days: Int!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      council {\n        id\n        name\n        avgGovernorshipBussingAttendance(days: $days)\n        avgGovernorshipWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilAvgWeekdayStats($councilId: ID, $days: Int!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      stream {\n        id\n        name\n        avgCouncilBussingAttendance(days: $days)\n        avgCouncilWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilAvgWeekdayStats($councilId: ID, $days: Int!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      stream {\n        id\n        name\n        avgCouncilBussingAttendance(days: $days)\n        avgCouncilWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamAvgWeekdayStats($streamId: ID, $days: Int!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      campus {\n        id\n        name\n        avgStreamBussingAttendance(days: $days)\n        avgStreamWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamAvgWeekdayStats($streamId: ID, $days: Int!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      campus {\n        id\n        name\n        avgStreamBussingAttendance(days: $days)\n        avgStreamWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusAvgWeekdayStats($campusId: ID, $days: Int!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      oversight {\n        id\n        name\n        avgCampusBussingAttendance(days: $days)\n        avgCampusWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusAvgWeekdayStats($campusId: ID, $days: Int!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      avgBussingAttendance(days: $days)\n      leader {\n        id\n        firstName\n        lastName\n      }\n      avgWeekdayStats(days: $days) {\n        income\n        attendance\n      }\n      oversight {\n        id\n        name\n        avgCampusBussingAttendance(days: $days)\n        avgCampusWeekdayStats(days: $days) {\n          income\n          attendance\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistryHubCouncilsList($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMinistryHubCouncilsList($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubCouncilGovernorships($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHubCouncilGovernorships($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistryCouncils($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMinistryCouncils($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCreativeArtsStreams($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      streams {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCreativeArtsStreams($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      streams {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeFellowshipLeader(\n    $fellowshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeFellowshipLeader(\n    $fellowshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeFellowshipLeader(\n      fellowshipId: $fellowshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      fullName\n      leadsFellowship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeBacentaLeader(\n    $bacentaId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        momoNumber\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeBacentaLeader(\n    $bacentaId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeBacentaLeader(\n      bacentaId: $bacentaId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsBacenta {\n        id\n        momoNumber\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeGovernorshipLeader(\n    $governorshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeGovernorshipLeader(\n    $governorshipId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeGovernorshipLeader(\n      governorshipId: $governorshipId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsGovernorship {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCouncilLeader(\n    $councilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCouncilLeader(\n      councilId: $councilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilLeader(\n      councilId: $councilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCouncilLeader(\n    $councilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCouncilLeader(\n      councilId: $councilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCouncilLeader(\n      councilId: $councilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamLeader(\n    $streamId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveStreamLeader(\n      streamId: $streamId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamLeader(\n      streamId: $streamId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamLeader(\n    $streamId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveStreamLeader(\n      streamId: $streamId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeStreamLeader(\n      streamId: $streamId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsStream {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n        # history(limit: 5 ) {\n        #   id\n        #   timeStamp\n        #   createdAt {\n        #     date\n        #   }\n        #   loggedBy {\n        #     id\n        #     firstName\n        #     lastName\n        #   }\n        #   historyRecord\n        # }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCampusLeader(\n    $campusId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCampusLeader(\n      campusId: $campusId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusLeader(\n      campusId: $campusId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCampusLeader(\n    $campusId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCampusLeader(\n      campusId: $campusId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCampusLeader(\n      campusId: $campusId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCampus {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeOversightLeader(\n    $oversightId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveOversightLeader(\n      oversightId: $oversightId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightLeader(\n      oversightId: $oversightId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeOversightLeader(\n    $oversightId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveOversightLeader(\n      oversightId: $oversightId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeOversightLeader(\n      oversightId: $oversightId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsOversight {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeDenominationLeader(\n    $denominationId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsDenomination {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeDenominationLeader(\n    $denominationId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeDenominationLeader(\n      denominationId: $denominationId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsDenomination {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeCreativeArtsLeader(\n    $creativeArtsId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeCreativeArtsLeader(\n    $creativeArtsId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeCreativeArtsLeader(\n      creativeArtsId: $creativeArtsId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsCreativeArts {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeMinistryLeader(\n    $ministryId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeMinistryLeader(\n    $ministryId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeMinistryLeader(\n      ministryId: $ministryId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsMinistry {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeHubCouncilLeader(\n    $hubCouncilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeHubCouncilLeader(\n    $hubCouncilId: ID!\n    $newLeaderId: ID!\n    $oldLeaderId: ID!\n  ) {\n    RemoveHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubCouncilLeader(\n      hubCouncilId: $hubCouncilId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHubCouncil {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeHubLeader($hubId: ID!, $newLeaderId: ID!, $oldLeaderId: ID!) {\n    RemoveHubLeader(\n      hubId: $hubId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubLeader(\n      hubId: $hubId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MakeHubLeader($hubId: ID!, $newLeaderId: ID!, $oldLeaderId: ID!) {\n    RemoveHubLeader(\n      hubId: $hubId\n      leaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n    ) {\n      id\n      firstName\n      lastName\n    }\n    MakeHubLeader(\n      hubId: $hubId\n      leaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      firstName\n      lastName\n      leadsHub {\n        id\n        leader {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownBacenta($id: ID!, $leaderId: ID!) {\n    CloseDownBacenta(bacentaId: $id, leaderId: $leaderId) {\n      id\n      name\n\n      bacentas {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownBacenta($id: ID!, $leaderId: ID!) {\n    CloseDownBacenta(bacentaId: $id, leaderId: $leaderId) {\n      id\n      name\n\n      bacentas {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownGovernorship($id: ID!, $adminId: ID!, $leaderId: ID!) {\n    CloseDownGovernorship(\n      governorshipId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownGovernorship($id: ID!, $adminId: ID!, $leaderId: ID!) {\n    CloseDownGovernorship(\n      governorshipId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      governorships {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownCouncil($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCouncil(councilId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownCouncil($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCouncil(councilId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n      councils {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownStream($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownStream(streamId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      streams {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownStream($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownStream(streamId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      streams {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownCampus($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCampus(campusId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      campuses {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownCampus($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownCampus(campusId: $id, leaderId: $leaderId, adminId: $adminId) {\n      id\n      name\n\n      campuses {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownOversight($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownOversight(\n      oversightId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      oversights {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownOversight($id: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownOversight(\n      oversightId: $id\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      oversights {\n        id\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownHub($hubId: ID!, $leaderId: ID!) {\n    CloseDownHub(hubId: $hubId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownHub($hubId: ID!, $leaderId: ID!) {\n    CloseDownHub(hubId: $hubId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownHubCouncil($hubCouncilId: ID!, $leaderId: ID!) {\n    CloseDownHubCouncil(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownHubCouncil($hubCouncilId: ID!, $leaderId: ID!) {\n    CloseDownHubCouncil(hubCouncilId: $hubCouncilId, leaderId: $leaderId) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownMinistry($ministryId: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownMinistry(\n      ministryId: $ministryId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownMinistry($ministryId: ID!, $leaderId: ID!, $adminId: ID!) {\n    CloseDownMinistry(\n      ministryId: $ministryId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseDownCreativeArtss(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $adminId: ID!\n  ) {\n    CloseDownCreativeArts(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CloseDownCreativeArtss(\n    $creativeArtsId: ID!\n    $leaderId: ID!\n    $adminId: ID!\n  ) {\n    CloseDownCreativeArts(\n      creativeArtsId: $creativeArtsId\n      leaderId: $leaderId\n      adminId: $adminId\n    ) {\n      id\n      name\n      history {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogFellowshipHistory(\n    $fellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldBacentaId: ID\n    $newBacentaId: ID\n  ) {\n    LogFellowshipHistory(\n      fellowshipId: $fellowshipId\n      historyRecord: $historyRecord\n      oldLeaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n      oldBacentaId: $oldBacentaId\n      newBacentaId: $newBacentaId\n    ) {\n      id\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogFellowshipHistory(\n    $fellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldBacentaId: ID\n    $newBacentaId: ID\n  ) {\n    LogFellowshipHistory(\n      fellowshipId: $fellowshipId\n      historyRecord: $historyRecord\n      oldLeaderId: $oldLeaderId\n      newLeaderId: $newLeaderId\n      oldBacentaId: $oldBacentaId\n      newBacentaId: $newBacentaId\n    ) {\n      id\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogBacentaHistory(\n    $bacentaId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldGovernorshipId: ID\n    $newGovernorshipId: ID\n  ) {\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogBacentaHistory(\n    $bacentaId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldGovernorshipId: ID\n    $newGovernorshipId: ID\n  ) {\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogGovernorshipHistory(\n    $governorshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCouncilId: ID\n    $newCouncilId: ID\n  ) {\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogGovernorshipHistory(\n    $governorshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCouncilId: ID\n    $newCouncilId: ID\n  ) {\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogCouncilHistory(\n    $councilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldStreamId: ID\n    $newStreamId: ID\n  ) {\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogCouncilHistory(\n    $councilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldStreamId: ID\n    $newStreamId: ID\n  ) {\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogStreamHistory(\n    $streamId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogStreamHistory(\n    $streamId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogCampusHistory(\n    $campusId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldOversightId: ID\n    $newOversightId: ID\n  ) {\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogCampusHistory(\n    $campusId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldOversightId: ID\n    $newOversightId: ID\n  ) {\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogOversightHistory(\n    $oversightId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldDenominationId: ID\n    $newDenominationId: ID\n  ) {\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogOversightHistory(\n    $oversightId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldDenominationId: ID\n    $newDenominationId: ID\n  ) {\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogDenominationHistory(\n    $denominationId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n  ) {\n    LogDenominationHistory(\n      denominationId: $denominationId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogDenominationHistory(\n    $denominationId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n  ) {\n    LogDenominationHistory(\n      denominationId: $denominationId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogCreativeArtsHistory(\n    $creativeArtsId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogCreativeArtsHistory(\n    $creativeArtsId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCampusId: ID\n    $newCampusId: ID\n  ) {\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogMinistryHistory(\n    $ministryId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCreativeArtsId: ID\n    $newCreativeArtsId: ID\n  ) {\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogMinistryHistory(\n    $ministryId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldCreativeArtsId: ID\n    $newCreativeArtsId: ID\n  ) {\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogHubCouncilHistory(\n    $hubCouncilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldMinistryId: ID\n    $newMinistryId: ID\n  ) {\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogHubCouncilHistory(\n    $hubCouncilId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldMinistryId: ID\n    $newMinistryId: ID\n  ) {\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogHubHistory(\n    $hubId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubCouncilId: ID\n    $newHubCouncilId: ID\n  ) {\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hubCouncil {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogHubHistory(\n    $hubId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubCouncilId: ID\n    $newHubCouncilId: ID\n  ) {\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hubCouncil {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogHubFellowshipHistory(\n    $hubFellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubId: ID\n    $newHubId: ID\n  ) {\n    LogHubFellowshipHistory(\n      hubFellowshipId: $hubFellowshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubId: $oldHubId\n      newHubId: $newHubId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hub {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogHubFellowshipHistory(\n    $hubFellowshipId: ID!\n    $historyRecord: String!\n    $oldLeaderId: ID\n    $newLeaderId: ID\n    $oldHubId: ID\n    $newHubId: ID\n  ) {\n    LogHubFellowshipHistory(\n      hubFellowshipId: $hubFellowshipId\n      historyRecord: $historyRecord\n      newLeaderId: $newLeaderId\n      oldLeaderId: $oldLeaderId\n      oldHubId: $oldHubId\n      newHubId: $newHubId\n    ) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n      }\n      hub {\n        id\n        name\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVacationStream($streamId: ID!) {\n    SetVacationStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetVacationStream($streamId: ID!) {\n    SetVacationStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetActiveStream($streamId: ID!) {\n    SetActiveStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetActiveStream($streamId: ID!) {\n    SetActiveStream(streamId: $streamId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVacationFellowship($fellowshipId: ID!) {\n    SetVacationFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetVacationFellowship($fellowshipId: ID!) {\n    SetVacationFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetActiveFellowship($fellowshipId: ID!) {\n    SetActiveFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetActiveFellowship($fellowshipId: ID!) {\n    SetActiveFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetOnlineFellowship($fellowshipId: ID!) {\n    SetOnlineFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetOnlineFellowship($fellowshipId: ID!) {\n    SetOnlineFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVacationBacenta($bacentaId: ID!) {\n    SetVacationBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetVacationBacenta($bacentaId: ID!) {\n    SetVacationBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetActiveBacenta($bacentaId: ID!) {\n    SetActiveBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetActiveBacenta($bacentaId: ID!) {\n    SetActiveBacenta(bacentaId: $bacentaId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetActiveHub($hubId: ID!) {\n    SetActiveHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetActiveHub($hubId: ID!) {\n    SetActiveHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVacationHub($hubId: ID!) {\n    SetVacationHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetVacationHub($hubId: ID!) {\n    SetVacationHub(hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetFellowshipToHubFellowship($fellowshipId: ID!, $hubId: ID!) {\n    SetFellowshipToHubFellowship(fellowshipId: $fellowshipId, hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetFellowshipToHubFellowship($fellowshipId: ID!, $hubId: ID!) {\n    SetFellowshipToHubFellowship(fellowshipId: $fellowshipId, hubId: $hubId) {\n      id\n      name\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetHubFellowshipToRegularFellowship($fellowshipId: ID!) {\n    SetHubFellowshipToRegularFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      hubStatus\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetHubFellowshipToRegularFellowship($fellowshipId: ID!) {\n    SetHubFellowshipToRegularFellowship(fellowshipId: $fellowshipId) {\n      id\n      name\n      hubStatus\n      vacationStatus\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayBacentaBussingDetails($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n      }\n      target\n      sprinterTopUp\n      urvanTopUp\n      outbound\n      vacationStatus\n\n      momoName\n      momoNumber\n      mobileNetwork\n    }\n  }\n"): (typeof documents)["\n  query DisplayBacentaBussingDetails($id: ID!) {\n    bacentas(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n      }\n      target\n      sprinterTopUp\n      urvanTopUp\n      outbound\n      vacationStatus\n\n      momoName\n      momoNumber\n      mobileNetwork\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBacentaBussingDetails(\n    $bacentaId: ID!\n    $target: Int!\n    $sprinterTopUp: Float!\n    $urvanTopUp: Float!\n    $outbound: Boolean!\n  ) {\n    UpdateBacentaBussingDetails(\n      bacentaId: $bacentaId\n      target: $target\n      sprinterTopUp: $sprinterTopUp\n      urvanTopUp: $urvanTopUp\n      outbound: $outbound\n    ) {\n      id\n      name\n      target\n\n      outbound\n      sprinterTopUp\n      urvanTopUp\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBacentaBussingDetails(\n    $bacentaId: ID!\n    $target: Int!\n    $sprinterTopUp: Float!\n    $urvanTopUp: Float!\n    $outbound: Boolean!\n  ) {\n    UpdateBacentaBussingDetails(\n      bacentaId: $bacentaId\n      target: $target\n      sprinterTopUp: $sprinterTopUp\n      urvanTopUp: $urvanTopUp\n      outbound: $outbound\n    ) {\n      id\n      name\n      target\n\n      outbound\n      sprinterTopUp\n      urvanTopUp\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBusPaymentDetails(\n    $bacentaId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $mobileNetwork: String!\n  ) {\n    UpdateBusPaymentDetails(\n      bacentaId: $bacentaId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      mobileNetwork: $mobileNetwork\n    ) {\n      id\n      name\n\n      momoName\n      momoNumber\n      mobileNetwork\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBusPaymentDetails(\n    $bacentaId: ID!\n    $momoName: String!\n    $momoNumber: String!\n    $mobileNetwork: String!\n  ) {\n    UpdateBusPaymentDetails(\n      bacentaId: $bacentaId\n      momoName: $momoName\n      momoNumber: $momoNumber\n      mobileNetwork: $mobileNetwork\n    ) {\n      id\n      name\n\n      momoName\n      momoNumber\n      mobileNetwork\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendMobileVerificationNumber(\n    $firstName: String!\n    $phoneNumber: String!\n    $otp: String!\n  ) {\n    SendMobileVerificationNumber(\n      firstName: $firstName\n      phoneNumber: $phoneNumber\n      otp: $otp\n    )\n  }\n"): (typeof documents)["\n  mutation SendMobileVerificationNumber(\n    $firstName: String!\n    $phoneNumber: String!\n    $otp: String!\n  ) {\n    SendMobileVerificationNumber(\n      firstName: $firstName\n      phoneNumber: $phoneNumber\n      otp: $otp\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMemberDetails(\n    $id: ID!\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $phoneNumber: String!\n    $whatsappNumber: String\n    $dob: String\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $pictureUrl: String!\n  ) {\n    UpdateMemberDetails(\n      id: $id\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      bacenta: $bacenta\n      pictureUrl: $pictureUrl\n    ) {\n      firstName\n      middleName\n      lastName\n      fullName\n      email\n      phoneNumber\n      pictureUrl\n      whatsappNumber\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n\n      occupation {\n        occupation\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMemberDetails(\n    $id: ID!\n    $firstName: String!\n    $middleName: String\n    $lastName: String!\n    $phoneNumber: String!\n    $whatsappNumber: String\n    $dob: String\n    $maritalStatus: String!\n    $gender: String!\n    $occupation: String\n    $bacenta: String!\n    $pictureUrl: String!\n  ) {\n    UpdateMemberDetails(\n      id: $id\n      firstName: $firstName\n      middleName: $middleName\n      lastName: $lastName\n      phoneNumber: $phoneNumber\n      whatsappNumber: $whatsappNumber\n      dob: $dob\n      maritalStatus: $maritalStatus\n      gender: $gender\n      occupation: $occupation\n      bacenta: $bacenta\n      pictureUrl: $pictureUrl\n    ) {\n      firstName\n      middleName\n      lastName\n      fullName\n      email\n      phoneNumber\n      pictureUrl\n      whatsappNumber\n      dob {\n        date\n      }\n      gender {\n        gender\n      }\n      maritalStatus {\n        status\n      }\n      occupation {\n        occupation\n      }\n\n      occupation {\n        occupation\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMemberStickyNote(\n    $id: ID!\n    $stickyNote: String\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    updateMembers(where: { id: $id }, update: { stickyNote: $stickyNote }) {\n      members {\n        id\n        stickyNote\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMemberStickyNote(\n    $id: ID!\n    $stickyNote: String\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    updateMembers(where: { id: $id }, update: { stickyNote: $stickyNote }) {\n      members {\n        id\n        stickyNote\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMemberEmail($id: ID!, $email: String!) {\n    UpdateMemberEmail(id: $id, email: $email) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMemberEmail($id: ID!, $email: String!) {\n    UpdateMemberEmail(id: $id, email: $email) {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMemberBasonta($memberId: ID!, $basontaId: ID!) {\n    UpdateMemberBasonta(memberId: $memberId, basontaId: $basontaId) {\n      id\n      firstName\n      lastName\n      basonta {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMemberBasonta($memberId: ID!, $basontaId: ID!) {\n    UpdateMemberBasonta(memberId: $memberId, basontaId: $basontaId) {\n      id\n      firstName\n      lastName\n      basonta {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogMemberHistory($ids: [ID], $historyRecord: String!) {\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LogMemberHistory($ids: [ID], $historyRecord: String!) {\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMemberBacenta(\n    $memberId: ID!\n    $bacentaId: ID!\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    UpdateMemberBacenta(memberId: $memberId, bacentaId: $bacentaId) {\n      id\n      firstName\n      lastName\n      bacenta {\n        id\n        name\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMemberBacenta(\n    $memberId: ID!\n    $bacentaId: ID!\n    $ids: [ID]\n    $historyRecord: String!\n  ) {\n    UpdateMemberBacenta(memberId: $memberId, bacentaId: $bacentaId) {\n      id\n      firstName\n      lastName\n      bacenta {\n        id\n        name\n      }\n    }\n    LogMemberHistory(ids: $ids, historyRecord: $historyRecord) {\n      id\n      firstName\n      lastName\n      history(limit: 3) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateStream(\n    $streamId: ID!\n    $name: String!\n    $bankAccount: String!\n    $meetingDay: String!\n  ) {\n    UpdateStreamDetails(\n      streamId: $streamId\n      name: $name\n      bankAccount: $bankAccount\n      meetingDay: $meetingDay\n    ) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStream(\n    $streamId: ID!\n    $name: String!\n    $bankAccount: String!\n    $meetingDay: String!\n  ) {\n    UpdateStreamDetails(\n      streamId: $streamId\n      name: $name\n      bankAccount: $bankAccount\n      meetingDay: $meetingDay\n    ) {\n      id\n      name\n      vacationStatus\n      bankAccount\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOversight($oversightId: ID!, $name: String!) {\n    UpdateOversightDetails(oversightId: $oversightId, name: $name) {\n      id\n      name\n      campuses {\n        id\n        name\n        oversight {\n          id\n          name\n          denomination {\n            id\n            oversights {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOversight($oversightId: ID!, $name: String!) {\n    UpdateOversightDetails(oversightId: $oversightId, name: $name) {\n      id\n      name\n      campuses {\n        id\n        name\n        oversight {\n          id\n          name\n          denomination {\n            id\n            oversights {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateDenomination($denominationId: ID!, $name: String!) {\n    UpdateDenominationDetails(denominationId: $denominationId, name: $name) {\n      id\n      name\n      oversights {\n        id\n        name\n        denomination {\n          id\n          name\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDenomination($denominationId: ID!, $name: String!) {\n    UpdateDenominationDetails(denominationId: $denominationId, name: $name) {\n      id\n      name\n      oversights {\n        id\n        name\n        denomination {\n          id\n          name\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCampus(\n    $campusId: ID!\n    $name: String!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    UpdateCampusDetails(\n      campusId: $campusId\n      name: $name\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      streams {\n        id\n        name\n        campus {\n          id\n          name\n          oversight {\n            id\n            campuses {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCampus(\n    $campusId: ID!\n    $name: String!\n    $noIncomeTracking: Boolean!\n    $currency: String!\n    $conversionRateToDollar: Float!\n  ) {\n    UpdateCampusDetails(\n      campusId: $campusId\n      name: $name\n      noIncomeTracking: $noIncomeTracking\n      currency: $currency\n      conversionRateToDollar: $conversionRateToDollar\n    ) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      streams {\n        id\n        name\n        campus {\n          id\n          name\n          oversight {\n            id\n            campuses {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCouncil($councilId: ID!, $name: String!) {\n    UpdateCouncilDetails(councilId: $councilId, name: $name) {\n      id\n      name\n      governorships {\n        id\n        name\n        council {\n          id\n          name\n          stream {\n            id\n            councils {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCouncil($councilId: ID!, $name: String!) {\n    UpdateCouncilDetails(councilId: $councilId, name: $name) {\n      id\n      name\n      governorships {\n        id\n        name\n        council {\n          id\n          name\n          stream {\n            id\n            councils {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateGovernorship($governorshipId: ID!, $name: String!) {\n    UpdateGovernorshipDetails(governorshipId: $governorshipId, name: $name) {\n      id\n      name\n      bacentas {\n        id\n        name\n        governorship {\n          id\n          name\n          council {\n            id\n            governorships {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateGovernorship($governorshipId: ID!, $name: String!) {\n    UpdateGovernorshipDetails(governorshipId: $governorshipId, name: $name) {\n      id\n      name\n      bacentas {\n        id\n        name\n        governorship {\n          id\n          name\n          council {\n            id\n            governorships {\n              id\n            }\n          }\n        }\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n        bacenta {\n          id\n          stream_name\n        }\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBacenta(\n    $id: ID!\n    $name: String!\n    $meetingDay: String!\n    $venueLongitude: Float!\n    $venueLatitude: Float!\n  ) {\n    UpdateBacentaDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      sprinterTopUp\n      urvanTopUp\n\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        whatsappNumber\n        title {\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBacenta(\n    $id: ID!\n    $name: String!\n    $meetingDay: String!\n    $venueLongitude: Float!\n    $venueLatitude: Float!\n  ) {\n    UpdateBacentaDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLongitude: $venueLongitude\n      venueLatitude: $venueLatitude\n    ) {\n      id\n      name\n      sprinterTopUp\n      urvanTopUp\n\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        whatsappNumber\n        title {\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateFellowship(\n    $id: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateFellowshipDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      labels\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateFellowship(\n    $id: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateFellowshipDetails(\n      id: $id\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      labels\n      stream_name\n      bankingCode\n      name\n      memberCount\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeMemberInactive($memberId: ID!, $reason: String!) {\n    MakeMemberInactive(id: $memberId, reason: $reason) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation MakeMemberInactive($memberId: ID!, $reason: String!) {\n    MakeMemberInactive(id: $memberId, reason: $reason) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveOversightToDenomination(\n    $oversightId: ID!\n    $newDenominationId: ID!\n    $oldDenominationId: ID!\n    $historyRecord: String!\n  ) {\n    MoveOversightToDenomination(\n      oversightId: $oversightId\n      denominationId: $newDenominationId\n    ) {\n      id\n      name\n      denomination {\n        id\n        name\n        oversights {\n          id\n          name\n        }\n      }\n    }\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveOversightToDenomination(\n    $oversightId: ID!\n    $newDenominationId: ID!\n    $oldDenominationId: ID!\n    $historyRecord: String!\n  ) {\n    MoveOversightToDenomination(\n      oversightId: $oversightId\n      denominationId: $newDenominationId\n    ) {\n      id\n      name\n      denomination {\n        id\n        name\n        oversights {\n          id\n          name\n        }\n      }\n    }\n    LogOversightHistory(\n      oversightId: $oversightId\n      historyRecord: $historyRecord\n      oldDenominationId: $oldDenominationId\n      newDenominationId: $newDenominationId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveCampusToOversight(\n    $campusId: ID!\n    $newOversightId: ID!\n    $oldOversightId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCampusToOversight(campusId: $campusId, oversightId: $newOversightId) {\n      id\n      name\n      oversight {\n        id\n        name\n        campuses {\n          id\n          name\n        }\n      }\n    }\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveCampusToOversight(\n    $campusId: ID!\n    $newOversightId: ID!\n    $oldOversightId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCampusToOversight(campusId: $campusId, oversightId: $newOversightId) {\n      id\n      name\n      oversight {\n        id\n        name\n        campuses {\n          id\n          name\n        }\n      }\n    }\n    LogCampusHistory(\n      campusId: $campusId\n      historyRecord: $historyRecord\n      oldOversightId: $oldOversightId\n      newOversightId: $newOversightId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveStreamToCampus(\n    $streamId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveStreamToCampus(streamId: $streamId, campusId: $newCampusId) {\n      id\n      name\n      campus {\n        id\n        name\n        streams {\n          id\n          name\n        }\n      }\n    }\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveStreamToCampus(\n    $streamId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveStreamToCampus(streamId: $streamId, campusId: $newCampusId) {\n      id\n      name\n      campus {\n        id\n        name\n        streams {\n          id\n          name\n        }\n      }\n    }\n    LogStreamHistory(\n      streamId: $streamId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveCouncilToStream(\n    $councilId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCouncilToStream(councilId: $councilId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        councils {\n          id\n          name\n        }\n      }\n    }\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveCouncilToStream(\n    $councilId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCouncilToStream(councilId: $councilId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        councils {\n          id\n          name\n        }\n      }\n    }\n    LogCouncilHistory(\n      councilId: $councilId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveGovernorshipToCouncil(\n    $governorshipId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveGovernorshipToCouncil(\n      governorshipId: $governorshipId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        governorships {\n          id\n          name\n        }\n      }\n    }\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveGovernorshipToCouncil(\n    $governorshipId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveGovernorshipToCouncil(\n      governorshipId: $governorshipId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        governorships {\n          id\n          name\n        }\n      }\n    }\n    LogGovernorshipHistory(\n      governorshipId: $governorshipId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveBacentaToGovernorship(\n    $bacentaId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveBacentaToGovernorship(\n      bacentaId: $bacentaId\n      governorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveBacentaToGovernorship(\n    $bacentaId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveBacentaToGovernorship(\n      bacentaId: $bacentaId\n      governorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n    LogBacentaHistory(\n      bacentaId: $bacentaId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveCreativeArtsToCampus(\n    $creativeArtsId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCreativeArtsToCampus(\n      creativeArtsId: $creativeArtsId\n      campusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n    }\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveCreativeArtsToCampus(\n    $creativeArtsId: ID!\n    $newCampusId: ID!\n    $oldCampusId: ID!\n    $historyRecord: String!\n  ) {\n    MoveCreativeArtsToCampus(\n      creativeArtsId: $creativeArtsId\n      campusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n    }\n    LogCreativeArtsHistory(\n      creativeArtsId: $creativeArtsId\n      historyRecord: $historyRecord\n      oldCampusId: $oldCampusId\n      newCampusId: $newCampusId\n    ) {\n      id\n      name\n      campus {\n        id\n        name\n        creativeArts {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveMinistryToCreativeArts(\n    $ministryId: ID!\n    $newCreativeArtsId: ID!\n    $oldCreativeArtsId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToCreativeArts(\n      ministryId: $ministryId\n      creativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveMinistryToCreativeArts(\n    $ministryId: ID!\n    $newCreativeArtsId: ID!\n    $oldCreativeArtsId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToCreativeArts(\n      ministryId: $ministryId\n      creativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistory(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldCreativeArtsId: $oldCreativeArtsId\n      newCreativeArtsId: $newCreativeArtsId\n    ) {\n      id\n      name\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveMinistryToStream(\n    $ministryId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToStream(ministryId: $ministryId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistoryWithStream(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveMinistryToStream(\n    $ministryId: ID!\n    $newStreamId: ID!\n    $oldStreamId: ID!\n    $historyRecord: String!\n  ) {\n    MoveMinistryToStream(ministryId: $ministryId, streamId: $newStreamId) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n    }\n    LogMinistryHistoryWithStream(\n      ministryId: $ministryId\n      historyRecord: $historyRecord\n      oldStreamId: $oldStreamId\n      newStreamId: $newStreamId\n    ) {\n      id\n      name\n      stream {\n        id\n        name\n        ministries {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveHubCouncilToMinistry(\n    $hubCouncilId: ID!\n    $newMinistryId: ID!\n    $oldMinistryId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToMinistry(\n      hubCouncilId: $hubCouncilId\n      ministryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveHubCouncilToMinistry(\n    $hubCouncilId: ID!\n    $newMinistryId: ID!\n    $oldMinistryId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToMinistry(\n      hubCouncilId: $hubCouncilId\n      ministryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistory(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldMinistryId: $oldMinistryId\n      newMinistryId: $newMinistryId\n    ) {\n      id\n      name\n      ministry {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveHubCouncilToCouncil(\n    $hubCouncilId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToCouncil(\n      hubCouncilId: $hubCouncilId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistoryWithCouncil(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveHubCouncilToCouncil(\n    $hubCouncilId: ID!\n    $newCouncilId: ID!\n    $oldCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubCouncilToCouncil(\n      hubCouncilId: $hubCouncilId\n      councilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n    }\n    LogHubCouncilHistoryWithCouncil(\n      hubCouncilId: $hubCouncilId\n      historyRecord: $historyRecord\n      oldCouncilId: $oldCouncilId\n      newCouncilId: $newCouncilId\n    ) {\n      id\n      name\n      council {\n        id\n        name\n        hubCouncils {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveHubsToHubCouncils(\n    $hubId: ID!\n    $newHubCouncilId: ID!\n    $oldHubCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToHubCouncil(hubId: $hubId, hubCouncilId: $newHubCouncilId) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveHubsToHubCouncils(\n    $hubId: ID!\n    $newHubCouncilId: ID!\n    $oldHubCouncilId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToHubCouncil(hubId: $hubId, hubCouncilId: $newHubCouncilId) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistory(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldHubCouncilId: $oldHubCouncilId\n      newHubCouncilId: $newHubCouncilId\n    ) {\n      id\n      name\n      hubCouncil {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MoveHubToGovernorship(\n    $hubId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToGovernorship(hubId: $hubId, governorshipId: $newGovernorshipId) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistoryWithGovernorship(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveHubToGovernorship(\n    $hubId: ID!\n    $newGovernorshipId: ID!\n    $oldGovernorshipId: ID!\n    $historyRecord: String!\n  ) {\n    MoveHubToGovernorship(hubId: $hubId, governorshipId: $newGovernorshipId) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n    }\n    LogHubHistoryWithGovernorship(\n      hubId: $hubId\n      historyRecord: $historyRecord\n      oldGovernorshipId: $oldGovernorshipId\n      newGovernorshipId: $newGovernorshipId\n    ) {\n      id\n      name\n      governorship {\n        id\n        name\n        hubs {\n          id\n          name\n        }\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          stream_name\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCreativeArts($creativeArtsId: ID!, $name: String!) {\n    UpdateCreativeArtsDetails(creativeArtsId: $creativeArtsId, name: $name) {\n      id\n      name\n\n      ministries {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCreativeArts($creativeArtsId: ID!, $name: String!) {\n    UpdateCreativeArtsDetails(creativeArtsId: $creativeArtsId, name: $name) {\n      id\n      name\n\n      ministries {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMinistry(\n    $ministryId: ID!\n    $name: String!\n    $bankAccount: String!\n  ) {\n    UpdateMinistryDetails(\n      ministryId: $ministryId\n      name: $name\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n\n      creativeArts {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMinistry(\n    $ministryId: ID!\n    $name: String!\n    $bankAccount: String!\n  ) {\n    UpdateMinistryDetails(\n      ministryId: $ministryId\n      name: $name\n      bankAccount: $bankAccount\n    ) {\n      id\n      name\n      bankAccount\n\n      creativeArts {\n        id\n        name\n      }\n\n      admin {\n        id\n        firstName\n        lastName\n      }\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateHubCouncil($hubCouncilId: ID!, $name: String!) {\n    UpdateHubCouncilDetails(hubCouncilId: $hubCouncilId, name: $name) {\n      id\n      name\n\n      ministry {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateHubCouncil($hubCouncilId: ID!, $name: String!) {\n    UpdateHubCouncilDetails(hubCouncilId: $hubCouncilId, name: $name) {\n      id\n      name\n\n      ministry {\n        id\n        name\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateHub(\n    $hubId: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateHubDetails(\n      hubId: $hubId\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      name\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateHub(\n    $hubId: ID!\n    $name: String!\n    $meetingDay: String\n    $venueLatitude: Float\n    $venueLongitude: Float\n  ) {\n    UpdateHubDetails(\n      hubId: $hubId\n      name: $name\n      meetingDay: $meetingDay\n      venueLatitude: $venueLatitude\n      venueLongitude: $venueLongitude\n    ) {\n      id\n      name\n      location {\n        longitude\n        latitude\n      }\n      meetingDay {\n        day\n        dayNumber\n      }\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n      }\n      history(limit: 5) {\n        id\n        timeStamp\n        createdAt {\n          date\n        }\n        loggedBy {\n          id\n          firstName\n          lastName\n        }\n        historyRecord\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberPlacesSearchByLocation(\n    $id: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByLocation(latitude: $latitude, longitude: $longitude) {\n        id\n        name\n        typename\n        description\n        picture\n        # TODO: We must eventually switch from these to a location property object\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberPlacesSearchByLocation(\n    $id: ID!\n    $latitude: Float!\n    $longitude: Float!\n  ) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByLocation(latitude: $latitude, longitude: $longitude) {\n        id\n        name\n        typename\n        description\n        picture\n        # TODO: We must eventually switch from these to a location property object\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberPlacesSearchByName($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByName(key: $key) {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberPlacesSearchByName($id: ID!, $key: String!) {\n    members(where: { id: $id }) {\n      id\n      placesSearchByName(key: $key) {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query memberLoadCouncilUnvisitedMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberLoadCouncilUnvisitedMembers {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query memberLoadCouncilUnvisitedMembers($id: ID!) {\n    members(where: { id: $id }) {\n      id\n      memberLoadCouncilUnvisitedMembers {\n        id\n        name\n        typename\n        description\n        picture\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateIndoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateIndoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateIndoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateIndoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOutdoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateOutdoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOutdoorVenue(\n    $name: String!\n    $capacity: Int!\n    $longitude: Float!\n    $latitude: Float!\n  ) {\n    CreateOutdoorVenue(\n      name: $name\n      capacity: $capacity\n      longitude: $longitude\n      latitude: $latitude\n    ) {\n      id\n      capacity\n      location {\n        latitude\n        longitude\n      }\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateHighSchool(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHighSchool(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateHighSchool(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHighSchool(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateHostel(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHostel(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      university\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateHostel(\n    $name: String!\n    $capacity: Int!\n    $latitude: Float!\n    $longitude: Float!\n    $school: String!\n  ) {\n    CreateHostel(\n      name: $name\n      capacity: $capacity\n      latitude: $latitude\n      longitude: $longitude\n      school: $school\n    ) {\n      id\n      name\n      capacity\n      school\n      university\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query IndoorVenues($options: IndoorVenueOptions) {\n    indoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query IndoorVenues($options: IndoorVenueOptions) {\n    indoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OutdoorVenues($options: OutdoorVenueOptions) {\n    outdoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query OutdoorVenues($options: OutdoorVenueOptions) {\n    outdoorVenues(options: $options) {\n      id\n      name\n      capacity\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HighSchools($options: HighSchoolOptions) {\n    highSchools(options: $options) {\n      capacity\n      id\n      location {\n        latitude\n        longitude\n      }\n      name\n      school\n    }\n  }\n"): (typeof documents)["\n  query HighSchools($options: HighSchoolOptions) {\n    highSchools(options: $options) {\n      capacity\n      id\n      location {\n        latitude\n        longitude\n      }\n      name\n      school\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Hostels($options: HostelOptions) {\n    hostels(options: $options) {\n      capacity\n      id\n      name\n      university\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"): (typeof documents)["\n  query Hostels($options: HostelOptions) {\n    hostels(options: $options) {\n      capacity\n      id\n      name\n      university\n      school\n      location {\n        latitude\n        longitude\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaServices($bacentaId: ID!, $skip: Int) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      bankingCode\n      name\n      services(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query bacentaServices($bacentaId: ID!, $skip: Int) {\n    bacentas(where: { id: $bacentaId }) {\n      id\n      bankingCode\n      name\n      services(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SubmitBankingSlip($serviceRecordId: ID!, $bankingSlip: String!) {\n    SubmitBankingSlip(\n      serviceRecordId: $serviceRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitBankingSlip($serviceRecordId: ID!, $bankingSlip: String!) {\n    SubmitBankingSlip(\n      serviceRecordId: $serviceRecordId\n      bankingSlip: $bankingSlip\n    ) {\n      id\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipServices($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipServices($governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamServices($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamServices($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilServices($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilServices($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n\n      name\n      services(limit: 20) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        transactionId\n        transactionStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BacentaServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        bacenta {\n          id\n          name\n          bankingCode\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"): (typeof documents)["\n  query BacentaServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        bacenta {\n          id\n          name\n          bankingCode\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GovernorshipServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        governorship {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"): (typeof documents)["\n  query GovernorshipServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        governorship {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        council {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"): (typeof documents)["\n  query CouncilServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        council {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        stream {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"): (typeof documents)["\n  query streamServiceRecords($serviceId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      serviceLog {\n        stream {\n          id\n          name\n        }\n      }\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      attendance\n      income\n      cash\n      foreignCurrency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubMeetings($hubId: ID!, $skip: Int) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      rehearsals(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubMeetings($hubId: ID!, $skip: Int) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      rehearsals(limit: 10, skip: $skip) {\n        id\n        stream_name\n        noServiceReason\n        createdAt\n        serviceDate {\n          date\n        }\n        created_by {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        bankingProof\n        bankingSlip\n        bankingSlipUploader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        offeringBankedBy {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        income\n        cash\n        numberOfTithers\n        foreignCurrency\n        transactionId\n        transactionReference\n        transactionStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBankTellers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      tellers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n"): (typeof documents)["\n  query streamBankTellers($id: ID!) {\n    streams(where: { id: $id }, options: { limit: 1 }) {\n      id\n      name\n\n      tellers {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        bacenta {\n          id\n          name\n        }\n        basonta {\n          id\n          name\n        }\n      }\n\n      activeBacentaCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakeStreamTeller($streamId: ID!, $tellerId: ID!) {\n    MakeStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation MakeStreamTeller($streamId: ID!, $tellerId: ID!) {\n    MakeStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveStreamTeller($streamId: ID!, $tellerId: ID!) {\n    RemoveStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveStreamTeller($streamId: ID!, $tellerId: ID!) {\n    RemoveStreamTeller(streamId: $streamId, tellerId: $tellerId) {\n      id\n      firstName\n      lastName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmBanking($governorshipId: ID!) {\n    ConfirmBanking(governorshipId: $governorshipId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmBanking($governorshipId: ID!) {\n    ConfirmBanking(governorshipId: $governorshipId) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaServicePayment($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      bankingCode\n    }\n  }\n"): (typeof documents)["\n  query bacentaServicePayment($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      bankingCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubRehearsalsPayment($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query hubRehearsalsPayment($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipServicePayment($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query governorshipServicePayment($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilServicePayment($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query councilServicePayment($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamServicePayment($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query streamServicePayment($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayOfferingDetails($serviceRecordId: ID!) {\n    serviceRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  query displayOfferingDetails($serviceRecordId: ID!) {\n    serviceRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayRehearsalOfferingDetails($serviceRecordId: ID!) {\n    rehearsalRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  query displayRehearsalOfferingDetails($serviceRecordId: ID!) {\n    rehearsalRecords(where: { id: $serviceRecordId }) {\n      id\n      serviceDate {\n        date\n      }\n      cash\n      transactionTime\n      transactionReference\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PayOfferingMutation(\n    $serviceRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankServiceOffering(\n      serviceRecordId: $serviceRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  mutation PayOfferingMutation(\n    $serviceRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankServiceOffering(\n      serviceRecordId: $serviceRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PayRehearsalOfferingMutation(\n    $rehearsalRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankRehearsalOffering(\n      rehearsalRecordId: $rehearsalRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  mutation PayRehearsalOfferingMutation(\n    $rehearsalRecordId: ID!\n    $mobileNetwork: String!\n    $momoName: String!\n    $mobileNumber: String!\n  ) {\n    BankRehearsalOffering(\n      rehearsalRecordId: $rehearsalRecordId\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n      momoName: $momoName\n    ) {\n      id\n      cash\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendPaymentOTP(\n    $serviceRecordId: String!\n    $reference: String!\n    $otp: String!\n  ) {\n    SendPaymentOTP(\n      serviceRecordId: $serviceRecordId\n      reference: $reference\n      otp: $otp\n    ) {\n      id\n      transactionStatus\n    }\n  }\n"): (typeof documents)["\n  mutation SendPaymentOTP(\n    $serviceRecordId: String!\n    $reference: String!\n    $otp: String!\n  ) {\n    SendPaymentOTP(\n      serviceRecordId: $serviceRecordId\n      reference: $reference\n      otp: $otp\n    ) {\n      id\n      transactionStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmOfferingPayment($serviceRecordId: ID!) {\n    ConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      cash\n      transactionId\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmOfferingPayment($serviceRecordId: ID!) {\n    ConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      cash\n      transactionId\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query selfBankingReceipt($id: ID!) {\n    serviceRecords(where: { id: $id }) {\n      id\n      cash\n      serviceDate {\n        date\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      transactionError\n    }\n  }\n"): (typeof documents)["\n  query selfBankingReceipt($id: ID!) {\n    serviceRecords(where: { id: $id }) {\n      id\n      cash\n      serviceDate {\n        date\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      sourceNetwork\n      sourceNumber\n      desc\n      transactionReference\n      transactionTime\n      transactionStatus\n      transactionError\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetTransactionReference(\n    $serviceRecordId: ID!\n    $transactionReference: ID!\n    $currentUserId: ID!\n  ) {\n    updateServiceRecords(\n      where: { id: $serviceRecordId }\n      update: {\n        transactionReference: $transactionReference\n        transactionStatus: \"pending\"\n        transactionError: null\n        confirmedBy: $currentUserId\n      }\n    ) {\n      serviceRecords {\n        id\n        transactionReference\n        transactionStatus\n        transactionError\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetTransactionReference(\n    $serviceRecordId: ID!\n    $transactionReference: ID!\n    $currentUserId: ID!\n  ) {\n    updateServiceRecords(\n      where: { id: $serviceRecordId }\n      update: {\n        transactionReference: $transactionReference\n        transactionStatus: \"pending\"\n        transactionError: null\n        confirmedBy: $currentUserId\n      }\n    ) {\n      serviceRecords {\n        id\n        transactionReference\n        transactionStatus\n        transactionError\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query governorshipDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipCancelledServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipCancelledServicesThisWeek($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipFormDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipFormDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBankingDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBankingDefaulters($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipBanked($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query governorshipBanked($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorshipCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query councilDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorshipCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilCancelledServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilCancelledServicesThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilFormDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilFormDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBankingDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBankingDefaulters($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilBanked($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilBanked($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilByGovernorship($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        bankedBy {\n          id\n          firstName\n          lastName\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilByGovernorship($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      governorships {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        bankedBy {\n          id\n          firstName\n          lastName\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councilCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query streamDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councilCount\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n\n        council {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n\n        council {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamCancelledServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamCancelledServicesThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamFormDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamFormDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBankingDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBankingDefaulters($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n\n        council {\n          id\n          name\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query constitiuencyBankingDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      constitiuencyBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query constitiuencyBankingDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      constitiuencyBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamBanked($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamBanked($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamByCouncil($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamByCouncil($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      councils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streamCount\n      creativeArtsCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query campusDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streamCount\n      creativeArtsCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n\n      activeBacentaCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n      governorshipBankedThisWeekCount\n      governorshipBankingDefaultersThisWeekCount\n      councilBankedThisWeekCount\n      councilBankingDefaultersThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        governorship {\n          id\n          name\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        governorship {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query defaultersCampusByStream($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query defaultersCampusByStream($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringGovernorshipJointServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringGovernorshipJointServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilGovernorshipJointServicesDefaultersThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query councilGovernorshipJointServicesBankedThisWeek($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      governorshipBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        council {\n          id\n          name\n          stream {\n            id\n            name\n          }\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringCouncilJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringCouncilJointServicesBankedThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamCouncilJointServicesDefaultersThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamCouncilJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n"): (typeof documents)["\n  query streamCouncilJointServicesBankedThisWeek($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      councilBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        stream {\n          id\n          name\n        }\n      }\n      services(limit: 1) {\n        id\n        noServiceReason\n        attendance\n        income\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campusCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query oversightDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campusCount\n      activeStreamCount\n\n      streamFormDefaultersThisWeekCount\n      streamBankingDefaultersThisWeekCount\n      streamBankedThisWeekCount\n      streamServicesThisWeekCount\n      streamCancelledServicesThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query hubDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubServicesThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubServicesThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubFormDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubFormDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubBankingDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubBankingDefaulters($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubBanked($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubBanked($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilCancelledhubRehearsalsThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilHubFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilHubFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilHubBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilHubBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilHubBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilHubBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCouncilCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query ministryDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCouncilCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministriehubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministriehubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryCancelledhubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryCancelledhubRehearsalsThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryHubFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryHubFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryHubBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryHubBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryHubBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryHubBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      ministryCount\n      activeHubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      ministryCount\n      activeHubCount\n      formDefaultersThisWeekCount\n      bankingDefaultersThisWeekCount\n      bankedThisWeekCount\n      servicesThisWeekCount\n      cancelledServicesThisWeekCount\n\n      activeHubCount\n      hubFormDefaultersThisWeekCount\n      hubBankingDefaultersThisWeekCount\n      hubsBankedThisWeekCount\n      hubRehearsalsThisWeekCount\n      hubCancelledRehearsalsThisWeekCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsHubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsHubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsCancelledhubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsCancelledhubRehearsalsThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsHubFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsHubFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsHubBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsHubBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsHubBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsHubBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusByCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      creativeArts {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusByCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      creativeArts {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsByMinistry($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      ministries {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsByMinistry($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n      ministries {\n        id\n        name\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryByHubCouncil($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryByHubCouncil($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n      hubCouncils {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        activeHubCount\n        hubFormDefaultersThisWeekCount\n        hubBankingDefaultersThisWeekCount\n        hubsBankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        hubRehearsalsThisWeekCount\n        hubCancelledRehearsalsThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilByHub($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      hubs {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilByHub($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n      hubs {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        servicesThisWeekCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusHubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusHubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusCancelledhubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusCancelledhubRehearsalsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubCancelledRehearsalsThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusHubFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusHubFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusHubBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusHubBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      hubsBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        rehearsals(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsFormDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsBankingDefaulters($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsBanked($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsCancelledServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsCancelledServicesThisWeek($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryFormDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryBankingDefaulters($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryBanked($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryCancelledServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ministryCancelledServicesThisWeek($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilFormDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      formDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilBankingDefaulters($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilBanked($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      bankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilCancelledServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilCancelledServicesThisWeek($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      cancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query defaultersCampusByStreamForStreamServices($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query defaultersCampusByStreamForStreamServices($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      streams {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query defaultersOversightByCampusForStreamServices($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campuses {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query defaultersOversightByCampusForStreamServices($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      campuses {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n\n        activeBacentaCount\n        formDefaultersThisWeekCount\n        bankingDefaultersThisWeekCount\n        bankedThisWeekCount\n        servicesThisWeekCount\n        cancelledServicesThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query defaultersDeominationByOversightForStreamServices($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      oversights {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query defaultersDeominationByOversightForStreamServices($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      oversights {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        activeStreamCount\n        streamFormDefaultersThisWeekCount\n        streamBankingDefaultersThisWeekCount\n        streamBankedThisWeekCount\n        streamServicesThisWeekCount\n        streamCancelledServicesThisWeekCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStreamsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStreamsThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStreamCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStreamCancelledServicesThisWeek($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStreamFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStreamFormDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStreamBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStreamBankingDefaulters($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusStreamBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusStreamBanked($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightStreamsThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightStreamsThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightStreamCancelledServicesThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightStreamCancelledServicesThisWeek($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightStreamFormDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightStreamFormDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightStreamBankingDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightStreamBankingDefaulters($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightStreamBanked($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query oversightStreamBanked($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationStreamsThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationStreamsThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n\n        services(limit: 1) {\n          id\n          noServiceReason\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationStreamCancelledServicesThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationStreamCancelledServicesThisWeek($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamCancelledServicesThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          noServiceReason\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationStreamFormDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationStreamFormDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamFormDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationStreamBankingDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationStreamBankingDefaulters($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankingDefaultersThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationStreamBanked($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query denominationStreamBanked($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n\n      streamBankedThisWeek {\n        id\n        name\n        leader {\n          id\n          firstName\n          lastName\n          fullName\n          phoneNumber\n          whatsappNumber\n        }\n        campus {\n          id\n          name\n        }\n        meetingDay {\n          day\n        }\n        services(limit: 1) {\n          id\n          attendance\n          income\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilTransactionHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      creditsTransactionHistory {\n        id\n        amount\n        createdAt\n        transactionStatus\n        transactionReference\n        mobileNetwork\n        mobileNumber\n        credited\n      }\n    }\n  }\n"): (typeof documents)["\n  query CouncilTransactionHistory($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      creditsTransactionHistory {\n        id\n        amount\n        createdAt\n        transactionStatus\n        transactionReference\n        mobileNetwork\n        mobileNumber\n        credited\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CouncilWithCredits($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n    }\n  }\n"): (typeof documents)["\n  query CouncilWithCredits($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveDownloadCredit($churchId: ID!) {\n    RemoveDownloadCredit(churchId: $churchId)\n  }\n"): (typeof documents)["\n  mutation RemoveDownloadCredit($churchId: ID!) {\n    RemoveDownloadCredit(churchId: $churchId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisplayCouncilMembership($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n      downloadMembership {\n        id\n        firstName\n        lastName\n        phoneNumber\n        whatsappNumber\n        email\n        visitationArea\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        dob {\n          date\n        }\n        basonta {\n          id\n          name\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n            name\n            leader {\n              id\n              firstName\n              lastName\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DisplayCouncilMembership($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      downloadCredits\n      downloadMembership {\n        id\n        firstName\n        lastName\n        phoneNumber\n        whatsappNumber\n        email\n        visitationArea\n        maritalStatus {\n          status\n        }\n        gender {\n          gender\n        }\n        dob {\n          date\n        }\n        basonta {\n          id\n          name\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n            name\n            leader {\n              id\n              firstName\n              lastName\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PurchaseDownloadCredits(\n    $churchId: ID!\n    $amount: Float!\n    $mobileNetwork: String!\n    $mobileNumber: String!\n  ) {\n    PurchaseDownloadCredits(\n      churchId: $churchId\n      amount: $amount\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n    ) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n"): (typeof documents)["\n  mutation PurchaseDownloadCredits(\n    $churchId: ID!\n    $amount: Float!\n    $mobileNetwork: String!\n    $mobileNumber: String!\n  ) {\n    PurchaseDownloadCredits(\n      churchId: $churchId\n      amount: $amount\n      mobileNetwork: $mobileNetwork\n      mobileNumber: $mobileNumber\n    ) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmCreditTransaction($transactionReference: String!) {\n    ConfirmCreditTransaction(transactionReference: $transactionReference) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmCreditTransaction($transactionReference: String!) {\n    ConfirmCreditTransaction(transactionReference: $transactionReference) {\n      id\n      amount\n      mobileNetwork\n      mobileNumber\n      transactionReference\n      transactionStatus\n      credited\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusBacentaServicesThisWeekReport($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n\n        services(limit: 1) {\n          id\n          attendance\n          income\n          serviceDate {\n            date\n          }\n          noServiceReason\n          bankingProof\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query campusBacentaServicesThisWeekReport($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n\n      servicesThisWeek {\n        id\n        name\n\n        services(limit: 1) {\n          id\n          attendance\n          income\n          serviceDate {\n            date\n          }\n          noServiceReason\n          bankingProof\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipGraphs($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query fellowshipGraphs($fellowshipId: ID) {\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaGraphs($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      bussing(limit: 4) {\n        id\n        createdAt\n        attendance\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query bacentaGraphs($id: ID!) {\n    bacentas(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n      bussing(limit: 4) {\n        id\n        createdAt\n        attendance\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipGraphs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query governorshipGraphs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query councilGraphs($councilId: ID!) {\n    councils(where: { id: $councilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query streamGraphs($streamId: ID!) {\n    streams(where: { id: $streamId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campusGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query campusGraphs($campusId: ID!) {\n    campuses(where: { id: $campusId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query oversightGraphs($oversightId: ID!) {\n    oversights(where: { id: $oversightId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query oversightGraphs($oversightId: ID!) {\n    oversights(where: { id: $oversightId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n      services(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query denominationGraphs($denominationId: ID!) {\n    denominations(where: { id: $denominationId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query denominationGraphs($denominationId: ID!) {\n    denominations(where: { id: $denominationId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        dollarIncome\n        numberOfServices\n        week\n      }\n      aggregateBussingRecords(limit: 4) {\n        id\n        attendance\n        week\n        numberOfSprinters\n        numberOfUrvans\n        numberOfCars\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubGraphs($hubId: ID!) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query hubGraphs($hubId: ID!) {\n    hubs(where: { id: $hubId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilGraphs($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilGraphs($hubCouncilId: ID!) {\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        nameWithTitle\n        pictureUrl\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      rehearsals(limit: 4) {\n        id\n        createdAt\n        attendance\n        income\n        week\n        serviceDate {\n          date\n        }\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ministryGraphs($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      onStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        week\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query ministryGraphs($ministryId: ID!) {\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      onStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        week\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query creativeArtsGraphs($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query creativeArtsGraphs($creativeArtsId: ID!) {\n    creativeArts(where: { id: $creativeArtsId }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n        pictureUrl\n        nameWithTitle\n      }\n      aggregateServiceRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n\n      aggregateRehearsalRecords(limit: 4) {\n        id\n        attendance\n        income\n        numberOfServices\n        week\n      }\n      aggregateStageAttendanceRecords(limit: 4) {\n        id\n        attendance\n        numberOfServices\n        week\n      }\n\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordMinistryOnStageAttendance(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $onStagePictures: [String!]!\n  ) {\n    RecordMinistryOnStageAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      onStagePictures: $onStagePictures\n    ) {\n      id\n      week\n    }\n  }\n"): (typeof documents)["\n  mutation RecordMinistryOnStageAttendance(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $onStagePictures: [String!]!\n  ) {\n    RecordMinistryOnStageAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      onStagePictures: $onStagePictures\n    ) {\n      id\n      week\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query displayMinistryOnStageAttendanceDetails(\n    $serviceId: ID!\n    $ministryId: ID!\n  ) {\n    stageAttendanceRecords(where: { id: $serviceId }) {\n      id\n      week\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      onStagePictures\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query displayMinistryOnStageAttendanceDetails(\n    $serviceId: ID!\n    $ministryId: ID!\n  ) {\n    stageAttendanceRecords(where: { id: $serviceId }) {\n      id\n      week\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      onStagePictures\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordService(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"): (typeof documents)["\n  mutation RecordService(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordSpecialService(\n    $serviceName: String!\n    $serviceDescription: String!\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordSpecialService(\n      serviceName: $serviceName\n      serviceDescription: $serviceDescription\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"): (typeof documents)["\n  mutation RecordSpecialService(\n    $serviceName: String!\n    $serviceDescription: String!\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordSpecialService(\n      serviceName: $serviceName\n      serviceDescription: $serviceDescription\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordCancelledService(\n    $churchId: ID!\n    $serviceDate: String!\n    $noServiceReason: String!\n  ) {\n    RecordCancelledService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      noServiceReason: $noServiceReason\n    ) {\n      id\n      serviceLog {\n        id\n        fellowship {\n          id\n          services(limit: 3) {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RecordCancelledService(\n    $churchId: ID!\n    $serviceDate: String!\n    $noServiceReason: String!\n  ) {\n    RecordCancelledService(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      noServiceReason: $noServiceReason\n    ) {\n      id\n      serviceLog {\n        id\n        fellowship {\n          id\n          services(limit: 3) {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UndoCancelledService($serviceRecordId: ID!) {\n    UndoCancelledService(serviceRecordId: $serviceRecordId) {\n      id\n      services(limit: 3) {\n        id\n        noServiceReason\n        bankingProof\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UndoCancelledService($serviceRecordId: ID!) {\n    UndoCancelledService(serviceRecordId: $serviceRecordId) {\n      id\n      services(limit: 3) {\n        id\n        noServiceReason\n        bankingProof\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ManuallyConfirmOfferingPayment($serviceRecordId: ID!) {\n    ManuallyConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      createdAt\n\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n\n      transactionId\n\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ManuallyConfirmOfferingPayment($serviceRecordId: ID!) {\n    ManuallyConfirmOfferingPayment(serviceRecordId: $serviceRecordId) {\n      id\n      createdAt\n\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n\n      transactionId\n\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordServiceNoIncome(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordServiceNoIncome(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n"): (typeof documents)["\n  mutation RecordServiceNoIncome(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordServiceNoIncome(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordHubRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"): (typeof documents)["\n  mutation RecordHubRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordHubCouncilRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"): (typeof documents)["\n  mutation RecordHubCouncilRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordMinistryRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"): (typeof documents)["\n  mutation RecordMinistryRehearsalMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $income: Float!\n    $foreignCurrency: String\n    $numberOfTithers: Int!\n    $treasurers: [ID]!\n    $treasurerSelfie: String!\n    $familyPicture: String!\n  ) {\n    RecordRehearsalMeeting(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      income: $income\n      foreignCurrency: $foreignCurrency\n      numberOfTithers: $numberOfTithers\n      treasurers: $treasurers\n      treasurerSelfie: $treasurerSelfie\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n      attendance\n      income\n      onlineGiving\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecordHubCouncilSundayMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordHubCouncilSundayAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n"): (typeof documents)["\n  mutation RecordHubCouncilSundayMeeting(\n    $churchId: ID!\n    $serviceDate: String!\n    $attendance: Int!\n    $familyPicture: String!\n  ) {\n    RecordHubCouncilSundayAttendance(\n      churchId: $churchId\n      serviceDate: $serviceDate\n      attendance: $attendance\n      familyPicture: $familyPicture\n    ) {\n      id\n      week\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fellowshipDisplayServiceRecords($serviceId: ID!, $fellowshipId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      noIncomeTracking\n      stream_name\n    }\n  }\n"): (typeof documents)["\n  query fellowshipDisplayServiceRecords($serviceId: ID!, $fellowshipId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    fellowships(where: { id: $fellowshipId }) {\n      id\n      name\n      noIncomeTracking\n      stream_name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query aggregateServiceRecordForWeek($week: Int!, $governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateServiceRecordForWeek(week: $week) {\n        id\n        income\n        foreignCurrency\n      }\n    }\n  }\n"): (typeof documents)["\n  query aggregateServiceRecordForWeek($week: Int!, $governorshipId: ID!) {\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      aggregateServiceRecordForWeek(week: $week) {\n        id\n        income\n        foreignCurrency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query bacentaDisplayServiceRecords($serviceId: ID!, $bacentaId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"): (typeof documents)["\n  query bacentaDisplayServiceRecords($serviceId: ID!, $bacentaId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      transactionId\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    bacentas(where: { id: $bacentaId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilDisplaySundayMeetingRecords(\n    $serviceId: ID!\n    $hubCouncilId: ID!\n  ) {\n    ministryAttendanceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      familyPicture\n      week\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilDisplaySundayMeetingRecords(\n    $serviceId: ID!\n    $hubCouncilId: ID!\n  ) {\n    ministryAttendanceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      serviceDate {\n        date\n      }\n      attendance\n      familyPicture\n      week\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubDisplayRehearsalRecords($serviceId: ID!, $hubId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubs(where: { id: $hubId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query hubDisplayRehearsalRecords($serviceId: ID!, $hubId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubs(where: { id: $hubId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hubCouncilDisplayRehearsalRecords($serviceId: ID!, $hubCouncilId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query hubCouncilDisplayRehearsalRecords($serviceId: ID!, $hubCouncilId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    hubCouncils(where: { id: $hubCouncilId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MinistryDisplayRehearsalRecords($serviceId: ID!, $ministryId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query MinistryDisplayRehearsalRecords($serviceId: ID!, $ministryId: ID!) {\n    rehearsalRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    ministries(where: { id: $ministryId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query governorshipDisplayServiceRecords(\n    $serviceId: ID!\n    $governorshipId: ID!\n  ) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"): (typeof documents)["\n  query governorshipDisplayServiceRecords(\n    $serviceId: ID!\n    $governorshipId: ID!\n  ) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    governorships(where: { id: $governorshipId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query councilDisplayServiceRecords($serviceId: ID!, $councilId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    councils(where: { id: $councilId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"): (typeof documents)["\n  query councilDisplayServiceRecords($serviceId: ID!, $councilId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    councils(where: { id: $councilId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query streamDisplayServiceRecords($serviceId: ID!, $streamId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      # For Special Services\n      name\n      description\n\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    streams(where: { id: $streamId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"): (typeof documents)["\n  query streamDisplayServiceRecords($serviceId: ID!, $streamId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      # For Special Services\n      name\n      description\n\n      attendance\n      income\n      cash\n      onlineGiving\n      numberOfTithers\n      foreignCurrency\n      transactionId\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    streams(where: { id: $streamId }) {\n      id\n      name\n      stream_name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringDisplayServiceRecords($serviceId: ID!, $campusId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    campuses(where: { id: $campusId }) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query gatheringDisplayServiceRecords($serviceId: ID!, $campusId: ID!) {\n    serviceRecords(where: { id: $serviceId }) {\n      id\n      createdAt\n      created_by {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      serviceDate {\n        date\n      }\n      noServiceReason\n      attendance\n      income\n      numberOfTithers\n      transactionId\n      foreignCurrency\n      treasurerSelfie\n      familyPicture\n      bankingProof\n      bankingSlip\n      bankingSlipUploader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      offeringBankedBy {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      bankingConfirmer {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      treasurers {\n        id\n        firstName\n        lastName\n        fullName\n      }\n    }\n    campuses(where: { id: $campusId }) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBishops {\n    members(where: { title_SOME: { name: \"Bishop\" } }) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n"): (typeof documents)["\n  query getBishops {\n    members(where: { title_SOME: { name: \"Bishop\" } }) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGovernorshipBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      stream_name\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      bacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGovernorshipBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      stream_name\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      bacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGovernorshipIcBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      icBacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGovernorshipIcBacentas($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      council {\n        id\n      }\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n\n      memberCount\n\n      icBacentas {\n        id\n        name\n        memberCount\n        vacationStatus\n        target\n        council {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncilGovernorships($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncilGovernorships($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n\n        bacentas {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGatheringGovernorships($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n        fullName\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n          stream_name\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGatheringGovernorships($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        stream_name\n        fullName\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n          stream_name\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamCouncils($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      councils {\n        name\n        id\n        stream_name\n        memberCount\n        target\n        governorshipCount\n        governorships {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamCouncils($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      councils {\n        name\n        id\n        stream_name\n        memberCount\n        target\n        governorshipCount\n        governorships {\n          id\n        }\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query gatheringStreams($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      streams {\n        name\n        id\n        stream_name\n        memberCount\n        councilCount\n        vacationStatus\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query gatheringStreams($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      streams {\n        name\n        id\n        stream_name\n        memberCount\n        councilCount\n        vacationStatus\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          stream_name\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getDenominationOversights($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      oversights {\n        name\n        id\n\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getDenominationOversights($id: ID!) {\n    denominations(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      oversights {\n        name\n        id\n\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOversightCampuses($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      campuses {\n        name\n        id\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOversightCampuses($id: ID!) {\n    oversights(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      campuses {\n        name\n        id\n        currency\n        conversionRateToDollar\n        noIncomeTracking\n        memberCount\n        councilCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        admin {\n          id\n          firstName\n          lastName\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamGovernorships($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n          fullName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamGovernorships($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      governorships {\n        name\n        id\n        stream_name\n        memberCount\n        bacentaCount\n        target\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n          fullName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncils {\n    councils {\n      id\n      name\n      governorships {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncils {\n    councils {\n      id\n      name\n      governorships {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreams {\n    streams {\n      id\n      name\n      councils {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreams {\n    streams {\n      id\n      name\n      councils {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCampuses {\n    campuses {\n      id\n      name\n      streams {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCampuses {\n    campuses {\n      id\n      name\n      streams {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOversights {\n    oversights {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOversights {\n    oversights {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getDenominations {\n    denominations {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getDenominations {\n    denominations {\n      id\n      name\n      campuses {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCreativeArts {\n    creativeArts {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getCreativeArts {\n    creativeArts {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistries {\n    ministries {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getMinistries {\n    ministries {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubs {\n    hubs {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getHubs {\n    hubs {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCampusBasontas($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      basontas {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCampusBasontas($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      basontas {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubFellowships($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      memberCount\n      hubFellowships {\n        id\n        name\n        vacationStatus\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHubFellowships($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n      memberCount\n      hubFellowships {\n        id\n        name\n        vacationStatus\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          pictureUrl\n        }\n        bacenta {\n          id\n          name\n          leader {\n            id\n            firstName\n            lastName\n            fullName\n          }\n          governorship {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamMinistries($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamMinistries($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamHubs($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamHubs($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getStreamSontas($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStreamSontas($id: ID!) {\n    streams(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubCouncilHubs($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHubCouncilHubs($id: ID!) {\n    hubCouncils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistryHubCouncils($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      councils {\n        id\n        name\n        hubCouncilsFromMinistry(ministryId: $id) {\n          name\n          id\n          memberCount\n          leader {\n            id\n            firstName\n            lastName\n            stream_name\n            pictureUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMinistryHubCouncils($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      councils {\n        id\n        name\n        hubCouncilsFromMinistry(ministryId: $id) {\n          name\n          id\n          memberCount\n          leader {\n            id\n            firstName\n            lastName\n            stream_name\n            pictureUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMinistrySontas($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query getMinistrySontas($id: ID!) {\n    ministries(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHubSontas($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n"): (typeof documents)["\n  query getHubSontas($id: ID!) {\n    hubs(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCreativeArtsMinistries($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      # admin {\n      #   id\n      #   firstName\n      #   lastName\n      #   fullName\n      #   stream_name\n      # }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        # admin {\n        #   id\n        #   firstName\n        #   lastName\n        #   stream_name\n        #   fullName\n        # }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCreativeArtsMinistries($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      # admin {\n      #   id\n      #   firstName\n      #   lastName\n      #   fullName\n      #   stream_name\n      # }\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n        # admin {\n        #   id\n        #   firstName\n        #   lastName\n        #   stream_name\n        #   fullName\n        # }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCampusCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      creativeArtsCount\n      creativeArts {\n        name\n        id\n        memberCount\n        hubCount\n        ministryCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCampusCreativeArts($id: ID!) {\n    campuses(where: { id: $id }) {\n      id\n      name\n      noIncomeTracking\n      currency\n      conversionRateToDollar\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      creativeArtsCount\n      creativeArts {\n        name\n        id\n        memberCount\n        hubCount\n        ministryCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCouncilHubCouncils($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubCouncils {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCouncilHubCouncils($id: ID!) {\n    councils(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n      admin {\n        id\n        firstName\n        lastName\n        fullName\n        stream_name\n      }\n      hubCouncils {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGovernorshipHubs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGovernorshipHubs($id: ID!) {\n    governorships(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      hubs {\n        name\n        id\n        memberCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCreativeArtsMinistriesList($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCreativeArtsMinistriesList($id: ID!) {\n    creativeArts(where: { id: $id }) {\n      id\n      name\n\n      leader {\n        id\n        firstName\n        lastName\n        fullName\n      }\n      memberCount\n\n      ministries {\n        name\n        id\n        memberCount\n        hubCount\n        leader {\n          id\n          firstName\n          lastName\n          stream_name\n          pictureUrl\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;