extend type Member {
  memberSearch(key: String!, limit: Int! = 5): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..8]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.middleName + ' ' + members.lastName) CONTAINS toLower($key)
      OR toLower(members.firstName + ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName) LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int! = 5): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..8]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int! = 5): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..7]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int! = 5): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..6]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  councilSearch(key: String!, limit: Int! = 5): [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..5]->(council:Council)
      WHERE toLower(council.name) CONTAINS toLower($key)
      RETURN DISTINCT council LIMIT $limit
      """
    )
  streamSearch(key: String!, limit: Int! = 5): [Stream!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR|IS_SHEEP_SEEKER_FOR*1..4]->(stream:Stream)
      WHERE toLower(stream.name) CONTAINS toLower($key)
      RETURN DISTINCT stream LIMIT $limit
      """
    )
  campusSearch(key: String!, limit: Int! = 5): [Campus!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR*1..3]->(campus:Campus)
      WHERE toLower(campus.name) CONTAINS toLower($key)
      RETURN DISTINCT campus LIMIT $limit
      """
    )
  oversightSearch(key: String!, limit: Int! = 5): [Oversight!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|IS_ADMIN_FOR*1..2]->(oversight:Oversight)
      WHERE toLower(oversight.name) CONTAINS toLower($key)
      RETURN DISTINCT oversight LIMIT $limit
      """
    )

  creativeArtsSearch(key: String!, limit: Int! = 5): [CreativeArts!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|HAS_MINISTRY|IS_ADMIN_FOR*1..4]->(creativeArts:CreativeArts)
      WHERE toLower(creativeArts.name) CONTAINS toLower($key)
      RETURN DISTINCT creativeArts LIMIT $limit
      """
    )
  ministrySearch(key: String!, limit: Int! = 5): [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|HAS_MINISTRY|IS_ADMIN_FOR*1..5]->(ministry:Ministry)
      WHERE toLower(ministry.name) CONTAINS toLower($key)
      RETURN DISTINCT ministry LIMIT $limit
      """
    )
  hubCouncilSearch(key: String!, limit: Int! = 5): [HubCouncil!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|HAS_MINISTRY|IS_ADMIN_FOR*1..6]->(hub:HubCouncil)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
  hubSearch(key: String!, limit: Int! = 5): [Hub!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|HAS_MINISTRY|IS_ADMIN_FOR*1..7]->(hub:Hub)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
  hubFellowshipSearch(key: String!, limit: Int! = 5): [HubFellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|HAS_MINISTRY|IS_ADMIN_FOR*1..8]->(hub:HubFellowship)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
}

extend type Denomination {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*8]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName) LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*7]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*6]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int!): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  councilSearch(key: String!, limit: Int!): [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(council:Council)
      WHERE toLower(council.name) CONTAINS toLower($key)
      RETURN DISTINCT council LIMIT $limit
      """
    )
  streamSearch(key: String!, limit: Int!): [Stream!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(stream:Stream)
      WHERE toLower(stream.name) CONTAINS toLower($key)
      RETURN DISTINCT stream LIMIT $limit
      """
    )
  campusSearch(key: String!, limit: Int!): [Campus!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(campus:Campus)
      WHERE toLower(campus.name) CONTAINS toLower($key)
      RETURN DISTINCT campus LIMIT $limit
      """
    )
  oversightSearch(key: String!, limit: Int!): [Oversight!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(oversight:Oversight)
      WHERE toLower(oversight.name) CONTAINS toLower($key)
      RETURN DISTINCT oversight LIMIT $limit
      """
    )
}

extend type Oversight {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*7]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName) LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*6]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int!): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  councilSearch(key: String!, limit: Int!): [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(council:Council)
      WHERE toLower(council.name) CONTAINS toLower($key)
      RETURN DISTINCT council LIMIT $limit
      """
    )
  streamSearch(key: String!, limit: Int!): [Stream!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(stream:Stream)
      WHERE toLower(stream.name) CONTAINS toLower($key)
      RETURN DISTINCT stream LIMIT $limit
      """
    )
  campusSearch(key: String!, limit: Int!): [Campus!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(campus:Campus)
      WHERE toLower(campus.name) CONTAINS toLower($key)
      RETURN DISTINCT campus LIMIT $limit
      """
    )
}

extend type Campus {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName) LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int!): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  councilSearch(key: String!, limit: Int!): [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(council:Council)
      WHERE toLower(council.name) CONTAINS toLower($key)
      RETURN DISTINCT council LIMIT $limit
      """
    )
  streamSearch(key: String!, limit: Int!): [Stream!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)
      WHERE toLower(stream.name) CONTAINS toLower($key)
      RETURN DISTINCT stream LIMIT $limit
      """
    )
  creativeArtsSearch(key: String!, limit: Int!): [CreativeArts!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)
      WHERE toLower(creativeArts.name) CONTAINS toLower($key)
      RETURN DISTINCT creativeArts LIMIT $limit
      """
    )
  ministrySearch(key: String!, limit: Int!): [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry)
      WHERE toLower(ministry.name) CONTAINS toLower($key)
      RETURN DISTINCT ministry LIMIT $limit
      """
    )
  hubSearch(key: String!, limit: Int!): [Hub!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry)-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
}

extend type Stream {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int!): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  councilSearch(key: String!, limit: Int!): [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council:Council)
      WHERE toLower(council.name) CONTAINS toLower($key)
      RETURN DISTINCT council LIMIT $limit
      """
    )
  ministrySearch(key: String!, limit: Int!): [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)
      WHERE toLower(ministry.name) CONTAINS toLower($key)
      RETURN DISTINCT ministry LIMIT $limit
      """
    )
  hubSearch(key: String!, limit: Int!): [Hub!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
}

extend type Council {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
  constituencySearch(key: String!, limit: Int!): [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(constituency:Constituency)
      WHERE toLower(constituency.name) CONTAINS toLower($key)
      RETURN DISTINCT constituency LIMIT $limit
      """
    )
  hubSearch(key: String!, limit: Int!): [Hub!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(hub:Hub)
      WHERE toLower(hub.name) CONTAINS toLower($key)
      RETURN DISTINCT hub LIMIT $limit
      """
    )
}

extend type Constituency {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
  bacentaSearch(key: String!, limit: Int!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) CONTAINS toLower($key)
      RETURN DISTINCT bacenta LIMIT $limit
      """
    )
}

extend type Bacenta {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
  fellowshipSearch(key: String!, limit: Int!): [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) CONTAINS toLower($key)
      RETURN DISTINCT fellowship LIMIT $limit
      """
    )
}

extend type Fellowship {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
}

extend type HubFellowship {
  memberSearch(key: String!, limit: Int!): [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)
      WHERE toLower(members.firstName+ ' ' + members.lastName) CONTAINS toLower($key)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)  LIMIT $limit
      """
    )
}

extend type Query {
  ###Member Searches%####

  oversightMemberSearch(searchKey: String!, oversightId: ID!): [Member!]!
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      RETURN member LIMIT 5
      """
    )

  campusMemberSearch(searchKey: String!, campusId: ID!): [Member!]!
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      RETURN member LIMIT 5
      """
    )
  streamMemberSearch(searchKey: String!, streamId: ID!): [Member!]!
    @auth(
      rules: [{ roles: ["adminStream", "leaderStream", "arrivalsAdminStream"] }]
    )
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      WITH member WHERE member IS NOT NULL
      RETURN DISTINCT(member) LIMIT 5
      """
    )
  councilMemberSearch(searchKey: String!, councilId: ID!): [Member!]!
    @auth(
      rules: [
        {
          roles: [
            "adminCouncil"
            "leaderCouncil"
            "arrivalsAdminCouncil"
            "arrivalsAdminCouncil"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO*]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      WITH member WHERE member IS NOT NULL
      RETURN DISTINCT(member) LIMIT 5
      """
    )
  constituencyMemberSearch(searchKey: String!, constituencyId: ID!): [Member!]!
    @auth(
      rules: [
        {
          roles: [
            "adminConstituency"
            "leaderConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (constituency:Constituency {id:$constituencyId})
      MATCH (constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship:Fellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)

      RETURN member LIMIT 5
      """
    )
  bacentaMemberSearch(searchKey: String!, bacentaId: ID!): [Member!]!
    @auth(rules: [{ roles: ["leaderBacenta"] }])
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)

      RETURN member LIMIT 5
      """
    )
  fellowshipMemberSearch(searchKey: String!, fellowshipId: ID!): [Member!]!
    @auth(rules: [{ roles: ["leaderFellowship"] }])
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id: $fellowshipId})<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)

      RETURN member LIMIT 5
      """
    )
  creativeArtsMemberSearch(searchKey: String!, creativeArtsId: ID!): [Member!]!
    @auth(rules: [{ roles: ["leaderCreativeArts", "adminCreativeArts"] }])
    @cypher(
      statement: """
      MATCH (creativeArts:CreativeArts {id: $creativeArtsId})-[:HAS]->(ministry:Ministry)-[:HAS]->(:Hub)-[:HAS]->(:HubFellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      RETURN member LIMIT 5
      """
    )
  ministryMemberSearch(searchKey: String!, ministryId: ID!): [Member!]!
    @auth(rules: [{ roles: ["leaderMinistry", "adminMinistry"] }])
    @cypher(
      statement: """
      MATCH (ministry:Ministry {id: $ministryId})-[:HAS]->(:Hub)-[:HAS]->(:HubFellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      RETURN member LIMIT 5
      """
    )
  hubMemberSearch(searchKey: String!, hubId: ID!): [Member!]!
    @auth(rules: [{ roles: ["leaderHub"] }])
    @cypher(
      statement: """
      MATCH (hub:Hub {id: $hubId})-[:HAS]->(:HubFellowship)<-[:BELONGS_TO]-(member:Active:Member)
      WHERE toLower(member.firstName) STARTS WITH toLower($searchKey)
      OR toLower(member.middleName) STARTS WITH toLower($searchKey)
      OR toLower(member.lastName) STARTS WITH toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.lastName) CONTAINS toLower($searchKey)
      OR toLower(member.firstName + ' ' + member.middleName+ ' '+ member.lastName) CONTAINS toLower($searchKey)
      RETURN member LIMIT 5
      """
    )

  ### Fellowship Search ###
  oversightFellowshipSearch(
    searchKey: String!
    oversightId: ID!
  ): [Fellowship!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(:Campus)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )

  campusFellowshipSearch(searchKey: String!, campusId: ID!): [Fellowship!]!
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS*5]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )

  streamFellowshipSearch(searchKey: String!, streamId: ID!): [Fellowship!]!
    @auth(
      rules: [{ roles: ["adminStream", "leaderStream", "arrivalsAdminStream"] }]
    )
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS*4]->(fellowship:Fellowship)

      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )

  councilFellowshipSearch(searchKey: String!, councilId: ID!): [Fellowship!]!
    @auth(
      rules: [
        { roles: ["adminCouncil", "leaderCouncil", "arrivalsAdminCouncil"] }
      ]
    )
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})-[:HAS*3]->(fellowship:Fellowship)

      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )
  constituencyFellowshipSearch(
    searchKey: String!
    constituencyId: ID!
  ): [Fellowship!]!
    @auth(
      rules: [
        {
          roles: [
            "adminConstituency"
            "leaderConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (constituency:Constituency {id:$constituencyId})-[:HAS*2]->(fellowship:Fellowship)

      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )
  bacentaFellowshipSearch(searchKey: String!, bacentaId: ID!): [Fellowship!]!
    @auth(rules: [{ roles: ["leaderBacenta"] }])
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})-[:HAS]->(fellowship:Fellowship)
      WHERE toLower(fellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(fellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT fellowship LIMIT 5
      """
    )

  creativeArtsHubFellowshipSearch(
    searchKey: String!
    creativeArtsId: ID!
  ): [HubFellowship!]!
    @auth(rules: [{ roles: ["leaderCreativeArts", "adminCreativeArts"] }])
    @cypher(
      statement: """
      MATCH (creativeArts:CreativeArts {id: $creativeArtsId})-[:HAS]->(ministry:Ministry)-[:HAS]->(hub:Hub)-[:HAS]->(hubFellowship:HubFellowship)
      WHERE toLower(hubFellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(hubFellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT hubFellowship LIMIT 5
      """
    )
  ministryHubFellowshipSearch(
    searchKey: String!
    ministryId: ID!
  ): [HubFellowship!]!
    @auth(rules: [{ roles: ["leaderMinistry", "adminMinistry"] }])
    @cypher(
      statement: """
      MATCH (ministry:Ministry {id: $ministryId})-[:HAS]->(hub:Hub)-[:HAS]->(hubFellowship:HubFellowship)
      WHERE toLower(hubFellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(hubFellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT hubFellowship LIMIT 5
      """
    )
  hubHubFellowshipSearch(searchKey: String!, hubId: ID!): [HubFellowship!]!
    @auth(rules: [{ roles: ["leaderHub"] }])
    @cypher(
      statement: """
      MATCH (hub:Hub {id: $hubId})-[:HAS]->(hubFellowship:HubFellowship)
      WHERE toLower(hubFellowship.name) STARTS WITH toLower($searchKey)
      OR toLower(hubFellowship.name) CONTAINS toLower($searchKey)
      RETURN DISTINCT hubFellowship LIMIT 5
      """
    )

  ### Bacenta Search ###

  oversightBacentaSearch(searchKey: String!, oversightId: ID!): [Bacenta!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) STARTS WITH toLower($searchKey)
      OR toLower(bacenta.name) CONTAINS toLower($searchKey)
      RETURN bacenta LIMIT 5
      """
    )

  campusBacentaSearch(searchKey: String!, campusId: ID!): [Bacenta]
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      WHERE toLower(bacenta.name) STARTS WITH toLower($searchKey)
      OR toLower(bacenta.name) CONTAINS toLower($searchKey)
      RETURN bacenta LIMIT 5
      """
    )
  streamBacentaSearch(searchKey: String!, streamId: ID!): [Bacenta]
    @auth(
      rules: [{ roles: ["adminStream", "leaderStream", "arrivalsAdminStream"] }]
    )
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS*3]->(bacenta:Bacenta)

      WHERE toLower(bacenta.name) STARTS WITH toLower($searchKey)
      OR toLower(bacenta.name) CONTAINS toLower($searchKey)
      RETURN bacenta LIMIT 5
      """
    )
  councilBacentaSearch(searchKey: String!, councilId: ID!): [Bacenta]
    @auth(
      rules: [
        { roles: ["adminCouncil", "leaderCouncil", "arrivalsAdminCouncil"] }
      ]
    )
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})-[:HAS*2]->(bacenta:Bacenta)

      WHERE toLower(bacenta.name) STARTS WITH toLower($searchKey)
      OR toLower(bacenta.name) CONTAINS toLower($searchKey)
      RETURN bacenta LIMIT 5
      """
    )
  constituencyBacentaSearch(
    searchKey: String!
    constituencyId: ID!
  ): [Fellowship!]!
    @auth(
      rules: [
        {
          roles: [
            "adminConstituency"
            "leaderConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (constituency:Constituency {id:$constituencyId})
      MATCH (constituency)-[:HAS]->(bacenta:Bacenta)

      WHERE toLower(bacenta.name) STARTS WITH toLower($searchKey)
      OR toLower(bacenta.name) CONTAINS toLower($searchKey)
      RETURN bacenta LIMIT 5
      """
    )

  ### Constituency Search ###
  oversightConstituencySearch(
    searchKey: String!
    oversightId: ID!
  ): [Constituency!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(constituency:Constituency)
      WHERE toLower(constituency.name) STARTS WITH toLower($searchKey)
      OR toLower(constituency.name) CONTAINS toLower($searchKey)
      RETURN constituency LIMIT 5
      """
    )

  campusConstituencySearch(searchKey: String!, campusId: ID!): [Constituency!]!
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(constituency:Constituency)
      WHERE toLower(constituency.name) STARTS WITH toLower($searchKey)
      OR toLower(constituency.name) CONTAINS toLower($searchKey)
      RETURN constituency LIMIT 5
      """
    )
  streamConstituencySearch(searchKey: String!, streamId: ID!): [Constituency!]!
    @auth(
      rules: [{ roles: ["adminStream", "leaderStream", "arrivalsAdminStream"] }]
    )
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS]->(council:Council)-[:HAS]->(constituency:Constituency)

      WHERE toLower(constituency.name) STARTS WITH toLower($searchKey)
      OR toLower(constituency.name) CONTAINS toLower($searchKey)
      RETURN constituency LIMIT 5
      """
    )
  councilConstituencySearch(
    searchKey: String!
    councilId: ID!
  ): [Constituency!]!
    @auth(
      rules: [
        { roles: ["adminCouncil", "leaderCouncil", "arrivalsAdminCouncil"] }
      ]
    )
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})-[:HAS]->(constituency:Constituency)

      WHERE toLower(constituency.name) STARTS WITH toLower($searchKey)
      OR toLower(constituency.name) CONTAINS toLower($searchKey)
      RETURN constituency LIMIT 5
      """
    )

  ### Council Search ###
  oversightCouncilSearch(searchKey: String!, oversightId: ID!): [Council!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)-[:HAS]->(stream:Stream)-[:HAS]->(council:Council)
      WHERE toLower(council.name) STARTS WITH toLower($searchKey)
      OR toLower(council.name) CONTAINS toLower($searchKey)
      RETURN council LIMIT 5
      """
    )

  campusCouncilSearch(searchKey: String!, campusId: ID!): [Council!]!
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS]->(stream:Stream)-[:HAS]->(council:Council)
      WHERE toLower(council.name) STARTS WITH toLower($searchKey)
      OR toLower(council.name) CONTAINS toLower($searchKey)
      RETURN council LIMIT 5
      """
    )
  streamCouncilSearch(searchKey: String!, streamId: ID!): [Council!]!
    @auth(
      rules: [{ roles: ["adminStream", "leaderStream", "arrivalsAdminStream"] }]
    )
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS]->(council:Council)
      MATCH (council:Council)
      WHERE toLower(council.name) STARTS WITH toLower($searchKey)
      OR toLower(council.name) CONTAINS toLower($searchKey)
      RETURN council LIMIT 5
      """
    )

  ### Stream Search ###
  oversightStreamSearch(searchKey: String!, oversightId: ID!): [Stream!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)-[:HAS]->(stream:Stream)
      WHERE toLower(stream.name) STARTS WITH toLower($searchKey)
      OR toLower(stream.name) CONTAINS toLower($searchKey)
      RETURN stream LIMIT 5
      """
    )
  campusStreamSearch(searchKey: String!, campusId: ID!): [Stream!]!
    @auth(
      rules: [{ roles: ["adminCampus", "leaderCampus", "arrivalsAdminCampus"] }]
    )
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS]->(stream:Stream)
      WHERE toLower(stream.name) STARTS WITH toLower($searchKey)
      OR toLower(stream.name) CONTAINS toLower($searchKey)
      RETURN stream LIMIT 5
      """
    )

  ### Campus Search ###
  oversightCampusSearch(searchKey: String!, oversightId: ID!): [Campus!]!
    @auth(
      rules: [
        {
          roles: ["adminOversight", "leaderOversight", "arrivalsAdminOversight"]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})-[:HAS]->(gathering:Campus)
      WHERE toLower(gathering.name) STARTS WITH toLower($searchKey)
      OR toLower(gathering.name) CONTAINS toLower($searchKey)
      RETURN gathering LIMIT 5
      """
    )

  ### Creative Arts Search ###
  campusCreativeArtsSearch(searchKey: String!, campusId: ID!): [CreativeArts!]!
    @auth(rules: [{ roles: ["adminCampus", "leaderCampus"] }])
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS_MINISTRY]->(creativeArts:CreativeArts)
      WHERE toLower(creativeArts.name) STARTS WITH toLower($searchKey)
      OR toLower(creativeArts.name) CONTAINS toLower($searchKey)
      RETURN creativeArts LIMIT 5
      """
    )

  ### Ministry Search ###
  campusMinistrySearch(searchKey: String!, campusId: ID!): [Ministry!]!
    @auth(rules: [{ roles: ["adminCampus", "leaderCampus"] }])
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry)
      WHERE toLower(ministry.name) STARTS WITH toLower($searchKey)
      OR toLower(ministry.name) CONTAINS toLower($searchKey)
      RETURN ministry LIMIT 5
      """
    )
  streamMinistrySearch(searchKey: String!, streamId: ID!): [Ministry!]!
    @auth(rules: [{ roles: ["adminStream", "leaderStream"] }])
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry)
      WHERE toLower(ministry.name) STARTS WITH toLower($searchKey)
      OR toLower(ministry.name) CONTAINS toLower($searchKey)
      RETURN ministry LIMIT 5
      """
    )
  creativeArtsMinistrySearch(
    searchKey: String!
    creativeArtsId: ID!
  ): [Ministry!]!
    @auth(rules: [{ roles: ["leaderCreativeArts", "adminCreativeArts"] }])
    @cypher(
      statement: """
      MATCH (creativeArts:CreativeArts {id: $creativeArtsId})-[:HAS]->(ministry:Ministry)
      WHERE toLower(ministry.name) STARTS WITH toLower($searchKey)
      OR toLower(ministry.name) CONTAINS toLower($searchKey)
      RETURN ministry LIMIT 5
      """
    )

  ### Hub Search ###
  campusHubSearch(searchKey: String!, campusId: ID!): [Hub!]!
    @auth(rules: [{ roles: ["adminCampus", "leaderCampus"] }])
    @cypher(
      statement: """
      MATCH (gathering:Campus {id: $campusId})-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry)-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) STARTS WITH toLower($searchKey)
      OR toLower(hub.name) CONTAINS toLower($searchKey)
      RETURN hub LIMIT 5
      """
    )
  streamHubSearch(searchKey: String!, streamId: ID!): [Hub!]!
    @auth(rules: [{ roles: ["adminStream", "leaderStream"] }])
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})-[:HAS_MINISTRY]->(ministry:Ministry)-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) STARTS WITH toLower($searchKey)
      OR toLower(hub.name) CONTAINS toLower($searchKey)
      RETURN hub LIMIT 5
      """
    )
  creativeArtsHubSearch(searchKey: String!, creativeArtsId: ID!): [Hub!]!
    @auth(rules: [{ roles: ["leaderCreativeArts", "adminCreativeArts"] }])
    @cypher(
      statement: """
      MATCH (creativeArts:CreativeArts {id: $creativeArtsId})-[:HAS]->(ministry:Ministry)-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) STARTS WITH toLower($searchKey)
      OR toLower(hub.name) CONTAINS toLower($searchKey)
      RETURN hub LIMIT 5
      """
    )
  ministryHubSearch(searchKey: String!, ministryId: ID!): [Hub!]!
    @auth(rules: [{ roles: ["leaderMinistry", "adminMinistry"] }])
    @cypher(
      statement: """
      MATCH (ministry:Ministry {id: $ministryId})-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) STARTS WITH toLower($searchKey)
      OR toLower(hub.name) CONTAINS toLower($searchKey)
      RETURN hub LIMIT 5
      """
    )
  councilHubSearch(searchKey: String!, councilId: ID!): [Hub!]!
    @auth(rules: [{ roles: ["leaderCouncil", "adminCouncil"] }])
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})-[:HAS]->(hub:Hub)
      WHERE toLower(hub.name) STARTS WITH toLower($searchKey)
      OR toLower(hub.name) CONTAINS toLower($searchKey)
      RETURN hub LIMIT 5
      """
    )
}
