type SwellDate implements TimeGraphNode
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID
    @cypher(
      statement: """
      MATCH (this)
      RETURN toString(this.date)
      """
    )
  date: Date
  swell: Boolean
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS swellStatus
      WITH swellStatus WHERE swellStatus ='SwellDate'
      RETURN true
      """
    )
  bussingDate: [BussingRecord!]! @relationship(type: "BUSSED_ON", direction: IN)
}

extend type Member {
  isArrivalsAdminForCouncil: [Council!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForConstituency: [Constituency!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForStream: [Stream!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForGatheringService: [GatheringService!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsCounterForStream: [Stream!]!
    @relationship(type: "COUNTS_ARRIVALS_FOR", direction: OUT)
  isArrivalsConfirmerForStream: [Stream!]!
    @relationship(type: "CONFIRMS_ARRIVALS_FOR", direction: OUT)
}
extend type GatheringService {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
  bacentasHaveBeenCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN bacentas
      """
    )
  bacentasHaveBeenCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
       MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN bacentas
      """
    )
  bacentasNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
        MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
}

extend type Stream {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  arrivalsCounters: [Member!]!
    @relationship(type: "COUNTS_ARRIVALS_FOR", direction: IN)
  arrivalsConfirmers: [Member!]!
    @relationship(type: "CONFIRMS_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
  bacentasHaveBeenCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN bacentas
      """
    )
  bacentasHaveBeenCountedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
        AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
       }
       RETURN COUNT(bacentas)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
       MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN bacentas
      """
    )
  bacentasNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
        MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
}

extend type Council {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  graduatedBacentas: [Bacenta!]!
  icBacentas: [Bacenta!]!
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
  bacentasHaveBeenCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN bacentas
      """
    )
  bacentasHaveBeenCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
       MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN bacentas
      """
    )
  bacentasNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
        MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
}

extend type Constituency {
  #Arrivals in the Constituency
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.attendance IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.bussingPictures IS NOT NULL
        AND bussing.arrivalTime IS NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
  bacentasHaveBeenCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN bacentas
      """
    )
  bacentasHaveBeenCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph) WHERE date(date.date)=date()
       AND EXISTS {MATCH (bussing)-[:CONFIRMED_BY]->(:Member)}
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
       MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN bacentas
      """
    )
  bacentasNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      AND NOT EXISTS {
        MATCH (bussing)-[:CONFIRMED_BY]->(:Member)
      }
      RETURN COUNT(bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE EXISTS {
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL
      }
      RETURN COUNT(bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        AND bussing.arrivalTime IS NOT NULL

      WITH DISTINCT bussing
      RETURN SUM(bussing.attendance)
      """
    )
}

extend type Bacenta {
  graduationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Graduated' OR status = 'IC'
      RETURN status
      """
    )
  target: Int
  normalBussingCost: Float
  normalPersonalContribution: Float
  normalBussingTopUp: Float
    @cypher(
      statement: """
      MATCH (this)
      RETURN this.normalBussingCost - this.normalPersonalContribution
      """
    )
  swellBussingCost: Float
  swellPersonalContribution: Float
  swellBussingTopUp: Float
    @cypher(
      statement: """
      MATCH (this)
      RETURN this.swellBussingCost - this.swellPersonalContribution
      """
    )

  #Arrivals Data
  arrivalsCodeOfTheDay: String!
    @cypher(
      statement: "MATCH (arrivals:ArrivalsCodeOfTheDay) RETURN arrivals.code"
    )
  bussing(limit: Int!): [BussingRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN bussing ORDER BY date.date DESC LIMIT $limit
      """
    )
  bussingThisWeek: BussingRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date).week = date().week
      RETURN bussing ORDER BY date.date
      """
    )
}

type BussingRecord implements Record @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!

  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  # Mobilisation
  created_at: DateTime! #mobilisation time is the time the record was created
  serviceDate: TimeGraph! @relationship(type: "BUSSED_ON", direction: OUT)
  mobilisationPicture: String!
  created_by: Member! @relationship(type: "LOGGED_BY", direction: OUT)

  #On The Way
  bussingPictures: [String]
  attendance: Int
  numberOfBusses: Int
  numberOfCars: Int
  bussingCost: Float
  bussingTopUp: Float
  mobileNetwork: String
  momoName: String
  momoNumber: String
  confirmed_by: Member @relationship(type: "CONFIRMED_BY", direction: OUT)

  #Arrived
  comments: String
  arrivalTime: DateTime
  transactionId: Int
  arrivalTime_Logged_By: Member
    @relationship(type: "ARRIVAL_LOGGED_BY", direction: OUT)

  serviceLog: ServiceLog @relationship(type: "HAS_BUSSING", direction: IN)
}

extend type Mutation {
  #Arrivals Roles
  MakeConstituencyArrivalsAdmin(
    arrivalsAdminId: ID!
    constituencyId: ID!
    oldArrivalsAdminId: ID
  ): Member
  RemoveConstituencyArrivalsAdmin(
    arrivalsAdminId: ID!
    constituencyId: ID!
  ): Member
  MakeCouncilArrivalsAdmin(
    arrivalsAdminId: ID!
    councilId: ID!
    oldArrivalsAdminId: ID
  ): Member
  RemoveCouncilArrivalsAdmin(arrivalsAdminId: ID!, councilId: ID!): Member
  MakeStreamArrivalsAdmin(
    arrivalsAdminId: ID!
    streamId: ID!
    oldArrivalsAdminId: ID
  ): Member
  RemoveStreamArrivalsAdmin(arrivalsAdminId: ID!, streamId: ID!): Member
  MakeGatheringServiceArrivalsAdmin(
    arrivalsAdminId: ID!
    gatheringServiceId: ID!
    oldArrivalsAdminId: ID
  ): Member
  RemoveGatheringServiceArrivalsAdmin(
    arrivalsAdminId: ID!
    gatheringServiceId: ID!
  ): Member

  MakeStreamArrivalsCounter(arrivalsCounterId: ID!, streamId: ID!): Member
  RemoveStreamArrivalsCounter(arrivalsCounterId: ID!, streamId: ID!): Member
  MakeStreamArrivalsConfirmer(arrivalsConfirmerId: ID!, streamId: ID!): Member
  RemoveStreamArrivalsConfirmer(arrivalsConfirmerId: ID!, streamId: ID!): Member
  RemoveAllStreamArrivalsHelpers(streamId: ID!): Stream

  ## GENERATE CODE OF THE DAY
  GenerateCodeOfTheDay: String!
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MERGE (arr:ArrivalsCodeOfTheDay)
      SET arr.code = apoc.text.random(5, 'A-Z0-9')
      RETURN arr.code
      """
    )
  SetCodeOfTheDay(code: String!): String!
    @auth(
      rules: [
        { roles: ["adminGatheringService", "arrivalsAdminGatheringService"] }
      ]
    )
    @cypher(
      statement: """
      MERGE (arr:ArrivalsCodeOfTheDay)
      SET arr.code = $code
      RETURN arr.code
      """
    )

  UpdateBacentaBussingDetails(
    bacentaId: ID!
    target: Int!
    normalBussingCost: Float!
    normalPersonalContribution: Float!
    swellBussingCost: Float!
    swellPersonalContribution: Float!
  ): Bacenta
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "arrivalsAdminStream"
            "adminCouncil"
            "arrivalsAdminCouncil"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})
      	SET bacenta.target = $target,
        bacenta.normalBussingCost = $normalBussingCost,
        bacenta.normalPersonalContribution = $normalPersonalContribution,
        bacenta.swellBussingCost = $swellBussingCost,
        bacenta.swellPersonalContribution = $swellPersonalContribution

      WITH bacenta
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bussing Details were updated'

      WITH log,bacenta
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      RETURN bacenta
      """
    )

  MakeBacentaIC(bacentaId: ID!): Bacenta!
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "arrivalsAdminGatheringService"
            "adminStream"
            "arrivalsAdminStream"
            "adminCouncil"
            "arrivalsAdminCouncil"
            "adminConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' was demoted to IC status'

      WITH log,bacenta
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET bacenta:IC
      REMOVE bacenta:Graduated

      RETURN bacenta
      """
    )

  MakeBacentaGraduated(bacentaId: ID!): Bacenta!
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "arrivalsAdminGatheringService"
            "adminStream"
            "arrivalsAdminStream"
            "adminCouncil"
            "arrivalsAdminCouncil"
            "adminConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' was promoted to Graduated status'

      WITH log,bacenta
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET bacenta:Graduated
      REMOVE bacenta:IC

      RETURN bacenta
      """
    )

  UploadMobilisationPicture(
    bacentaId: ID!
    serviceDate: String!
    mobilisationPicture: String!
  ): BussingRecord
    @cypher(
      statement: """
       CREATE (bussingRecord:BussingRecord {created_at:datetime()})
         SET bussingRecord.id = apoc.create.uuid(),
         bussingRecord.mobilisationPicture = $mobilisationPicture

       WITH bussingRecord
         MATCH (bacenta:Bacenta {id:$bacentaId})
         MATCH (bacenta)-[has_history:HAS_HISTORY {current: true}]->(log:ServiceLog)

       MERGE (log)-[:HAS_BUSSING]->(bussingRecord)
       MERGE (serviceDate:TimeGraph {date: date($serviceDate)})
       MERGE (bussingRecord)-[:BUSSED_ON]->(serviceDate)

      WITH bussingRecord
         MATCH (leader:Member {auth_id: $auth.jwt.sub})
         MERGE (bussingRecord)-[:LOGGED_BY]->(leader)

       RETURN bussingRecord
      """
    )

  #Bussing Records Entries
  RecordBussingFromBacenta(
    bussingRecordId: ID!
    attendance: Int!
    bussingPictures: [String]!
    bussingCost: Float!
    numberOfBusses: Int!
    numberOfCars: Int!
    mobileNetwork: String!
    momoName: String!
    momoNumber: String!
  ): BussingRecord
    @cypher(
      statement: """
      MATCH (bussingRecord:BussingRecord {id: $bussingRecordId})
      SET bussingRecord.attendance = $attendance,
      bussingRecord.leaderDeclaration = $attendance,
      bussingRecord.bussingPictures = $bussingPictures,
      bussingRecord.bussingCost = $bussingCost,
      bussingRecord.numberOfBusses = $numberOfBusses,
      bussingRecord.numberOfCars = $numberOfCars,
      bussingRecord.mobileNetwork = $mobileNetwork,
      bussingRecord.momoNumber = $momoNumber,
      bussingRecord.momoName = $momoName

       WITH bussingRecord
        MATCH (leader:Member {auth_id: $auth.jwt.sub})
        MERGE (bussingRecord)-[:LOGGED_BY]->(leader)

      RETURN bussingRecord
      """
    )

  SetBussingSupport(bussingRecordId: ID!): BussingRecord

  ConfirmBussingByAdmin(
    bussingRecordId: ID!
    attendance: Int!
    comments: String
  ): BussingRecord
    @auth(rules: [{ roles: ["arrivalsCounterStream"] }])
    @cypher(
      statement: """
      MATCH (bussingRecord:BussingRecord {id: $bussingRecordId})
        SET bussingRecord.attendance = $attendance,
        bussingRecord.comments = $comments

         WITH bussingRecord
          MATCH (admin:Member {auth_id: $auth.jwt.sub})
          MERGE (bussingRecord)-[:CONFIRMED_BY]->(admin)

      RETURN bussingRecord
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )


  RecordArrivalTime(bussingRecordId: ID!): BussingRecord
    @auth(rules: [{ roles: ["arrivalsConfirmerStream"] }])
    @cypher(
      statement: """
      MATCH (bussingRecord:BussingRecord {id: $bussingRecordId})
        SET bussingRecord.arrivalTime = datetime()

      WITH bussingRecord
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (bussingRecord)-[:ARRIVAL_LOGGED_BY]->(admin)

      RETURN bussingRecord
      """
    )

  SetSwellDate(date: String!): TimeGraph
  SendBussingSupport(bussingRecordId: ID!, stream_name: String!): BussingRecord
}

#SETTING AND ENDING TIME THINGS
extend type Stream {
  mobilisationStartTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  mobilisationEndTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  arrivalStartTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  arrivalEndTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}

extend type Mutation {
  SetStreamArrivalTimes(
    id: ID!
    mobilisationStartTime: String!
    mobilisationEndTime: String!
    arrivalStartTime: String!
    arrivalEndTime: String!
  ): Stream!
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $id})
      SET stream.mobilisationStartTime = $mobilisationStartTime,
        stream.mobilisationEndTime = $mobilisationEndTime,
        stream.arrivalStartTime = $arrivalStartTime,
        stream.arrivalEndTime = $arrivalEndTime
      RETURN stream
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}

#SETTING AND ENDING TIME THINGS
extend type Stream {
  mobilisationStartTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  mobilisationEndTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  arrivalStartTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
  arrivalEndTime: DateTime
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}

extend type Mutation {
  SetStreamArrivalTimes(
    id: ID!
    mobilisationStartTime: String!
    mobilisationEndTime: String!
    arrivalStartTime: String!
    arrivalEndTime: String!
  ): Stream!
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $id})
      SET stream.mobilisationStartTime = $mobilisationStartTime,
        stream.mobilisationEndTime = $mobilisationEndTime,
        stream.arrivalStartTime = $arrivalStartTime,
        stream.arrivalEndTime = $arrivalEndTime
      RETURN stream
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}
