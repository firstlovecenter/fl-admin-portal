extend type Constituency {
  sprinterCost: Float!
  urvanCost: Float!
}

type SwellDate implements TimeGraphNode
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
    @cypher(
      statement: """
      MATCH (this)
      RETURN toString(this.date)
      """
    )
  date: Date
  swell: Boolean
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS swellStatus
      WITH swellStatus WHERE swellStatus ='SwellDate'
      RETURN true
      """
    )
  bussingDate: [BussingRecord!]! @relationship(type: "BUSSED_ON", direction: IN)
}

extend type Member {
  isArrivalsAdminForCouncil: [Council!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForConstituency: [Constituency!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForStream: [Stream!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsAdminForGatheringService: [GatheringService!]!
    @relationship(type: "DOES_ARRIVALS_FOR", direction: OUT)
  isArrivalsCounterForStream: [Stream!]!
    @relationship(type: "COUNTS_ARRIVALS_FOR", direction: OUT)
}

extend type Oversight {
  graduatedBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(bacentas:Graduated:Bacenta) RETURN bacentas"
    )
  icBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(bacentas:IC:Bacenta) RETURN bacentas"
    )
  icBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(bacentas:IC:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(bacentas:IC:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]-(bacentas:IC:Bacenta:Vacation) RETURN COUNT(bacentas)"
    )
}

extend type GatheringService {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN DISTINCT bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
      WITH DISTINCT record
      RETURN SUM(record.leaderDeclaration)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN DISTINCT bacentas
      """
    )
  vehiclesNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
       WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN COUNT(DISTINCT record)
      """
    )
  bacentasBelow8: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN DISTINCT bacentas
      """
    )
  bacentasBelow8Count: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
       WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
        WITH bacentas, bussing ORDER BY bussing.attendance DESC
      RETURN DISTINCT bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        WITH DISTINCT record
      RETURN SUM(record.attendance)
      """
    )
  bussesThatArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        AND record.attendance > 0
      RETURN COUNT(DISTINCT record)
      """
    )
  graduatedBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:Graduated:Bacenta) RETURN bacentas"
    )
  icBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:IC:Bacenta) RETURN bacentas"
    )
  icBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:IC:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:IC:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]-(bacentas:IC:Bacenta:Vacation) RETURN COUNT(DISTINCT bacentas)"
    )
}

extend type Stream {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  arrivalsCounters: [Member!]!
    @relationship(type: "COUNTS_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN DISTINCT bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
      WITH DISTINCT record
      RETURN SUM(record.leaderDeclaration)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN DISTINCT bacentas
      """
    )
  vehiclesNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN COUNT(DISTINCT record)
      """
    )
  bacentasBelow8: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN DISTINCT bacentas
      """
    )
  bacentasBelow8Count: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
        WITH bacentas, bussing ORDER BY bussing.attendance DESC
      RETURN DISTINCT bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        WITH DISTINCT record
      RETURN SUM(record.attendance)
      """
    )
  bussesThatArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        AND record.attendance > 0
      RETURN COUNT(DISTINCT record)
      """
    )
  graduatedBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:Graduated:Bacenta) RETURN bacentas"
    )
  icBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:IC:Bacenta) RETURN bacentas"
    )
  icBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:IC:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:IC:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]-(bacentas:IC:Bacenta:Vacation) RETURN COUNT(DISTINCT bacentas)"
    )
}

extend type Council {
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN DISTINCT bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
      WITH DISTINCT record
      RETURN SUM(record.leaderDeclaration)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN DISTINCT bacentas
      """
    )
  vehiclesNotCountedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN COUNT(DISTINCT record)
      """
    )
  bacentasBelow8: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN DISTINCT bacentas
      """
    )
  bacentasBelow8Count: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
        WITH bacentas, bussing ORDER BY bussing.attendance DESC
      RETURN DISTINCT bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
      WITH DISTINCT record
      RETURN SUM(record.attendance)
      """
    )
  bussesThatArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        AND record.attendance > 0
      RETURN COUNT(DISTINCT record)
      """
    )
  graduatedBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:Graduated:Bacenta) RETURN bacentas"
    )
  icBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:IC:Bacenta) RETURN bacentas"
    )
  icBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:IC:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:IC:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]-(bacentas:IC:Bacenta:Vacation) RETURN COUNT(DISTINCT bacentas)"
    )
}

extend type Constituency {
  #Arrivals in the Constituency
  arrivalsAdmin: Member @relationship(type: "DOES_ARRIVALS_FOR", direction: IN)
  bacentasNoActivity: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      WHERE NOT EXISTS {
        MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasNoActivityCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       WHERE NOT EXISTS {
         MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
         }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasMobilising: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN DISTINCT bacentas
      """
    )
  bacentasMobilisingCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.mobilisationPicture IS NOT NULL
        AND bussing.leaderDeclaration IS NULL
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasOnTheWay: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN DISTINCT bacentas
      """
    )
  bacentasOnTheWayCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersOnTheWayCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NULL
      WITH DISTINCT record
      RETURN SUM(record.leaderDeclaration)
      """
    )
  bacentasNotCounted: [Bacenta!]!
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN DISTINCT bacentas
      """
    )
  vehiclesNotCountedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date)=date()
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE NOT EXISTS {
       MATCH (record)-[:COUNTED_BY]->(:Member)
      }
      RETURN COUNT(DISTINCT record)
      """
    )
  bacentasBelow8: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN DISTINCT bacentas
      """
    )
  bacentasBelow8Count: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND bussing.attendance < 8
        WITH bacentas, bussing ORDER BY bussing.attendance ASC
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bacentasHaveArrived: [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
        WITH bacentas, bussing ORDER BY bussing.attendance DESC
      RETURN DISTINCT bacentas
      """
    )
  bacentasHaveArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
        WHERE date(date.date)=date()
        AND EXISTS {
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        }
      RETURN COUNT(DISTINCT bacentas)
      """
    )
  bussingMembersHaveArrivedCount: Int
    @cypher(
      statement: """
       MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
       MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        WITH DISTINCT record
      RETURN SUM(record.attendance)
      """
    )
  bussesThatArrivedCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
         WHERE date(date.date)=date()
        MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.arrivalTime IS NOT NULL
        AND record.attendance > 0
      RETURN COUNT(DISTINCT record)
      """
    )
  graduatedBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacentas:Graduated:Bacenta) RETURN bacentas"
    )
  icBacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacentas:IC:Bacenta) RETURN bacentas"
    )
  icBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacentas:IC:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacentas:IC:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationIcBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]-(bacentas:IC:Bacenta:Vacation) RETURN COUNT(DISTINCT bacentas)"
    )
}

extend type Constituency {
  sprinterCost: Float!
  sprinterTopUp: Float!
    @cypher(
      statement: """
      MATCH (this)
      RETURN
      CASE
        WHEN this.sprinterCost <= 50 THEN round(0.5 * this.sprinterCost)
       WHEN this.sprinterCost <= 110 THEN  round(0.7 * this.sprinterCost)
       WHEN this.sprinterCost > 110 THEN  round(0.8 * this.sprinterCost)
       ELSE 0
      END
      """
    )
  urvanCost: Float!
  urvanTopUp: Float!
    @cypher(
      statement: """
      MATCH (this)
      RETURN
      CASE
       WHEN this.urvanCost <= 50 THEN round(0.5 * this.urvanCost)
       WHEN this.urvanCost <= 110 THEN  round(0.7 * this.urvanCost)
       WHEN this.urvanCost > 110 THEN  round(0.8 * this.urvanCost)
       ELSE 0
      END
      """
    )
}

extend type Bacenta {
  sprinterCost: Float!
  sprinterTopUp: Float!
    @cypher(
      statement: """
      MATCH (this)
      RETURN
      CASE
       WHEN this.sprinterCost <= 50 THEN round(0.5 * this.sprinterCost)
       WHEN this.sprinterCost <= 110 THEN  round(0.7 * this.sprinterCost)
       WHEN this.sprinterCost > 110 THEN  round(0.8 * this.sprinterCost)
       ELSE 0
      END
      """
    )
  urvanCost: Float!
  urvanTopUp: Float!
    @cypher(
      statement: """
      MATCH (this)
      RETURN
      CASE
        WHEN this.urvanCost <= 50 THEN round(0.5 * this.urvanCost)
       WHEN this.urvanCost <= 110 THEN  round(0.7 * this.urvanCost)
       WHEN this.urvanCost > 110 THEN  round(0.8 * this.urvanCost)
       ELSE 0
      END
      """
    )

  graduationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Graduated' OR status = 'IC'
      RETURN status
      """
    )

  mobileNetwork: String
  momoNumber: String
  momoName: String

  #Arrivals Data
  arrivalsCodeOfTheDay: String!
    @cypher(
      statement: "MATCH (arrivals:ArrivalsCodeOfTheDay) RETURN arrivals.code"
    )
  bussing(limit: Int!): [BussingRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN bussing ORDER BY date.date DESC LIMIT $limit
      """
    )
  bussingThisWeek: BussingRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date(date.date).week = date().week
      RETURN bussing ORDER BY date.date
      """
    )
  code: Int!
}

type BussingRecord implements Record @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!

  week: Int!
    @cypher(
      statement: """
      MATCH (this)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  # Mobilisation
  createdAt: DateTime! #mobilisation time is the time the record was created
  serviceDate: TimeGraph! @relationship(type: "BUSSED_ON", direction: OUT)
  mobilisationPicture: String!
  created_by: Member! @relationship(type: "LOGGED_BY", direction: OUT)

  #On The Way
  attendance: Int
  leaderDeclaration: Int
  bussingPictures: [String!]!
    @cypher(
      statement: """
      MATCH (this)-[:INCLUDES_RECORD]->(record:VehicleRecord)
      WHERE record.picture IS NOT NULL
      RETURN collect(record.picture)
      """
    )
  numberOfBusses: Int #Legacy Property for before we started collecting Spinter/Urvan details
  personalContribution: Float
  numberOfSprinters: Int
  numberOfUrvans: Int
  numberOfCars: Int
  bussingCost: Float
  bussingTopUp: Float

  #Money Things
  mobileNetwork: String
  momoNumber: String
  momoName: String

  counted_by: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:INCLUDES_RECORD]->(record:VehicleRecord)-[:COUNTED_BY]->(member:Member)
      RETURN DISTINCT member
      """
    )

  vehicleRecords: [VehicleRecord!]!
    @relationship(type: "INCLUDES_RECORD", direction: OUT)
  serviceLog: ServiceLog! @relationship(type: "HAS_BUSSING", direction: IN)
}

type VehicleRecord {
  id: ID!
  created_by: Member! @relationship(type: "LOGGED_BY", direction: OUT)
  createdAt: DateTime! #mobilisation time is the time the record was created
  leaderDeclaration: Int!
  attendance: Int
  picture: String!
  vehicle: String!
  personalContribution: Float!

  momoNumber: String
  momoName: String
  mobileNetwork: String
  vehicleTopUp: Float
  vehicleCost: Float!

  counted_by: Member @relationship(type: "COUNTED_BY", direction: OUT)

  #Arrived
  comments: String
  arrivalTime: DateTime
  transactionId: Int
  outbound: Boolean!

  bussingRecord: BussingRecord!
    @relationship(type: "INCLUDES_RECORD", direction: IN)
}

extend type Mutation {
  #Arrivals Roles
  MakeConstituencyArrivalsAdmin(
    arrivalsAdminId: ID!
    oldArrivalsAdminId: ID
    constituencyId: ID!
  ): Member!
  RemoveConstituencyArrivalsAdmin(
    arrivalsAdminId: ID!
    newArrivalsAdminId: ID!
    constituencyId: ID!
  ): Member
  MakeCouncilArrivalsAdmin(
    arrivalsAdminId: ID!
    oldArrivalsAdminId: ID
    councilId: ID!
  ): Member!
  RemoveCouncilArrivalsAdmin(
    arrivalsAdminId: ID!
    newArrivalsAdminId: ID!
    councilId: ID!
  ): Member
  MakeStreamArrivalsAdmin(
    arrivalsAdminId: ID!
    oldArrivalsAdminId: ID
    streamId: ID!
  ): Member!
  RemoveStreamArrivalsAdmin(
    arrivalsAdminId: ID!
    newArrivalsAdminId: ID!
    streamId: ID!
  ): Member
  MakeGatheringServiceArrivalsAdmin(
    arrivalsAdminId: ID!
    newArrivalsAdminId: ID!
    gatheringServiceId: ID!
  ): Member!
  RemoveGatheringServiceArrivalsAdmin(
    arrivalsAdminId: ID!
    oldArrivalsAdminId: ID
    gatheringServiceId: ID!
  ): Member

  MakeStreamArrivalsCounter(arrivalsCounterId: ID!, streamId: ID!): Member!
  RemoveStreamArrivalsCounter(arrivalsCounterId: ID!, streamId: ID!): Member

  ## GENERATE CODE OF THE DAY
  GenerateCodeOfTheDay: String!
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (arr:ArrivalsCodeOfTheDay)
      SET arr.code = apoc.text.random(5, 'A-Z0-9')
      RETURN arr.code
      """
    )
  SetCodeOfTheDay(code: String!): String!
    @auth(
      rules: [
        { roles: ["adminGatheringService", "arrivalsAdminGatheringService"] }
      ]
    )
    @cypher(
      statement: """
      MATCH (arr:ArrivalsCodeOfTheDay)
      SET arr.code = $code
      RETURN arr.code
      """
    )

  UpdateBacentaBussingDetails(
    bacentaId: ID!
    target: Int!
    sprinterCost: Float!
    urvanCost: Float!
  ): Bacenta!
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "arrivalsAdminGatheringService"
            "adminStream"
            "arrivalsAdminStream"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (swellDate:SwellDate)
      WITH swellDate ORDER BY swellDate.date DESC LIMIT 1
      MATCH (bacenta:Bacenta {id: $bacentaId})-[:CURRENT_HISTORY]->(log:ServiceLog)
      MERGE (targetNode:Target {code: bacenta.code + '-' + toString(swellDate.date)})
       ON CREATE SET
        targetNode.id = apoc.create.uuid(),
        targetNode.date = swellDate.date
      MERGE (log)-[:HAS_TARGET]->(targetNode)

      WITH bacenta, targetNode, targetNode.target AS oldTarget ORDER BY targetNode.date DESC LIMIT 1
      MATCH (bacenta)<-[:HAS*1..7]-(higherChurch)
      MATCH (higherChurch)-[:CURRENT_HISTORY]->(log:ServiceLog)-[:HAS_TARGET]->(higherTargetNode:Target)
        SET higherTargetNode.target = higherTargetNode.target - oldTarget + toInteger($target),
          targetNode.target = $target,
          bacenta.sprinterCost = $sprinterCost,
          bacenta.urvanCost = $urvanCost

      WITH DISTINCT bacenta
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bussing Details were updated'

      WITH log,bacenta
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (date:TimeGraph {date: date()})

      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      RETURN bacenta
      """
    )

  UpdateBusPaymentDetails(
    bacentaId: ID!
    mobileNetwork: String!
    momoName: String!
    momoNumber: String!
  ): Bacenta!
    @auth(rules: [{ roles: ["leaderBacenta"] }])
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})
        SET bacenta.mobileNetwork = $mobileNetwork,
        bacenta.momoName = $momoName,
        bacenta.momoNumber = $momoNumber

      WITH bacenta
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bus Payment Details were updated'

      WITH log,bacenta
      MATCH (admin:Member {auth_id: $auth.jwt.sub})
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      RETURN bacenta
      """
    )

  UpdateConstituencyBussingCost(
    constituencyId: ID!
    sprinterCost: Float!
    urvanCost: Float!
  ): Constituency!
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "arrivalsAdminGatheringService"
            "adminStream"
            "arrivalsAdminStream"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (constituency:Constituency {id: $constituencyId})
      SET constituency.sprinterCost = $sprinterCost,
      constituency.urvanCost = $urvanCost

      RETURN constituency
      """
    )

  UploadMobilisationPicture(
    bacentaId: ID!
    serviceDate: String!
    mobilisationPicture: String!
  ): BussingRecord!

  #Bussing Records Entries
  RecordVehicleFromBacenta(
    bacentaId: ID!
    bussingRecordId: ID!
    leaderDeclaration: Int!
    vehicleCost: Float!
    personalContribution: Float!
    vehicle: String!
    picture: String!
    outbound: Boolean!
  ): VehicleRecord!

  SetVehicleSupport(vehicleRecordId: ID!): VehicleRecord!

  ConfirmVehicleByAdmin(
    vehicleRecordId: ID!
    attendance: Int!
    vehicle: String!
    outbound: Boolean!
    comments: String
  ): VehicleRecord!
    @auth(rules: [{ roles: ["arrivalsCounterStream"] }])
    @cypher(
      statement: """
      MATCH (vehicleRecord:VehicleRecord {id: $vehicleRecordId}) WHERE vehicleRecord.arrivalTime IS NULL
        SET vehicleRecord.attendance = $attendance,
        vehicleRecord.vehicle = $vehicle,
        vehicleRecord.outbound = $outbound,
        vehicleRecord.comments = $comments

         WITH vehicleRecord
          MATCH (admin:Member {auth_id: $auth.jwt.sub})
          MERGE (vehicleRecord)-[:COUNTED_BY]->(admin)

      RETURN vehicleRecord
      """
    )

  SetSwellDate(date: String!): TimeGraph!
  SendVehicleSupport(vehicleRecordId: ID!, stream_name: String!): VehicleRecord!
}

extend type Mutation {
  SetStreamArrivalTimes(
    id: ID!
    mobilisationStartTime: String!
    mobilisationEndTime: String!
    arrivalStartTime: String!
    arrivalEndTime: String!
  ): Stream!
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $id})
      SET stream.mobilisationStartTime = $mobilisationStartTime,
        stream.mobilisationEndTime = $mobilisationEndTime,
        stream.arrivalStartTime = $arrivalStartTime,
        stream.arrivalEndTime = $arrivalEndTime
      RETURN stream
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}

#SETTING AND ENDING TIME THINGS
extend type Stream {
  mobilisationStartTime: DateTime
  mobilisationEndTime: DateTime
  arrivalStartTime: DateTime
  arrivalEndTime: DateTime
}

extend type Mutation {
  SendMobileVerificationNumber(
    firstName: String!
    phoneNumber: String!
    otp: String!
  ): String!

  SetStreamArrivalTimes(
    id: ID!
    mobilisationStartTime: String!
    mobilisationEndTime: String!
    arrivalStartTime: String!
    arrivalEndTime: String!
  ): Stream!
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $id})
      SET stream.mobilisationStartTime = $mobilisationStartTime,
        stream.mobilisationEndTime = $mobilisationEndTime,
        stream.arrivalStartTime = $arrivalStartTime,
        stream.arrivalEndTime = $arrivalEndTime
      RETURN stream
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "adminStream"
            "arrivalsAdminStream"
            "adminGatheringService"
            "arrivalsAdminGatheringService"
          ]
        }
      ]
    )
}

type ArrivalsSheetData {
  date: Date
  stream: String
  bacenta: String
  leader: String
  bacentaCode: String
  attendance: Int
  confirmedAttendance: Int
  vehicle: String
  outbound: String
  topUp: Float
  vehicleCost: Float
  momoNumber: String
  comments: String
  arrivalTime: DateTime
  council: String
  constituency: String
  society: String
  momoName: String
}

extend type Stream {
  arrivalsPaymentData(arrivalsDate: String): [ArrivalsSheetData!]!
}
