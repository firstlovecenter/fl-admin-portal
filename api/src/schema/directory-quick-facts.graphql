extend type ServiceRecord {
  church_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog:HistoryLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Fellowship OR church:Bacenta OR church:Team OR church:Council OR church:Stream OR church:Campus
      RETURN church.name
      """
    )
}

type Stats {
  attendance: Float
  income: Float
}

type MemberConversion {
  howYouJoined: String
  percentage: Float!
  number: Int!
}

extend type Fellowship {
  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      RETURN {
        attendance: toInteger(round(avg(record.attendance))),
        income: round(avg(record.income), 2)
        }
      """
    )

  peakFellowshipAttendance(days: Int!): ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, this
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.attendance) as max, this
      MATCH (fellowship)-[:HAS_HISTORY]->(s:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.attendance = max
      RETURN  record LIMIT 1
      """
    )

  peakFellowshipIncome(days: Int!): ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, this
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.income) as max, this
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.income = max
      RETURN record LIMIT 1
      """
    )
  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Bacenta {
  peakFellowshipAttendance(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.attendance) as max, record
      MATCH (record)
      WHERE record.attendance = max
      RETURN record ORDER BY record.attendance DESC LIMIT 1
      """
    )

  peakFellowshipIncome(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.income) as max, record
      MATCH (record)
      WHERE record.income = max
      RETURN  record ORDER BY record.income DESC LIMIT 1
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, this, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Team {
  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, this, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
       MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(bacenta:Bacenta)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH  agg.attendance as attendance, bacenta, agg.week as weeknumber
       RETURN round(avg(attendance)) AS average
      """
    )

  avgBussingAttendance(days: Int): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, this, agg.week as weeknumber
       RETURN round(avg(attendance)) AS average
      """
    )
  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS*]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Council {
  avgFellowshipWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Team)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(record.attendance) AS attendance, sum(record.income) as income, fellowship, date(date.date).week as weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(:Team)-[:HAS]->(bacenta:Bacenta)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, bacenta, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgTeamWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(team:Team)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, team, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, this, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(:Team)-[:HAS]->(bacenta:Bacenta)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, bacenta, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgTeamBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(team:Team)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, team, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, this, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS*2]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Stream {
  avgWeekdayStats(days: Int!): Stats
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, this, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgCouncilWeekdayStats(days: Int!): Stats
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(council:Council)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, council, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgCouncilBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

       MATCH (this)-[:HAS]->(council:Council)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, council, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, this, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )
  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS*3]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Campus {
  avgTeamBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(team:Team)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, team, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgTeamWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(team:Team)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, team, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgCouncilBussingAttendance(days: Int!): Float!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, council, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgStreamWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, stream, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgStreamBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
       MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, stream, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, this, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, this, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )
  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS*4]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}

extend type Oversight {
  avgCampusWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(campus:Campus)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE_AGGREGATE]->(agg:AggregateServiceRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, sum(agg.income) as income, campus, agg.week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
        }
      """
    )

  avgCampusBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH date(today) - duration({days: $days}) AS startDate, this
      WITH  range(date(startDate).week, date().week) as weeks, this

      MATCH (this)-[:HAS]->(campus:Campus)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING_AGGREGATE]->(agg:AggregateBussingRecord)
      MATCH (agg)
      WHERE agg.week IN weeks and agg.year = date().year
      WITH sum(agg.attendance) AS attendance, campus, agg.week as weeknumber
      RETURN round(avg(attendance)) AS average
      """
    )
  aggregateMemberConversion: [MemberConversion!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)
      WITH this,COUNT(DISTINCT members) AS total

      MATCH (this)-[:HAS*5]->(:Bacenta)<-[:BELONGS_TO]-(members:Active:Member)

      WITH total, members.howYouJoined as howYouJoined, COUNT(DISTINCT members) AS numberOfMembers
      WITH total, howYouJoined, ROUND(100.0*numberOfMembers/total,2)  AS conversion_percent, numberOfMembers
      WITH COLLECT({howYouJoined:howYouJoined, percentage:conversion_percent, number: numberOfMembers}) AS data
      UNWIND data as row
      RETURN DISTINCT row
      """
    )
}
