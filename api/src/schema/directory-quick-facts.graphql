extend type ServiceRecord {
  church_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog:HistoryLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      RETURN church.name
      """
    )
}

type PeakWeek {
  weeknumber: String!
  income: Float
  attendance: Float
}

extend type Fellowship {
  fellowshipAvgAttendanceThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.attendance))
      """
    )

  fellowshipAvgIncomeThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.income), 2)
      """
    )

  fellowshipPeakAttendanceThisMonth: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, this
            MATCH (date)
            WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      WITH  max(records.attendance) as max, this
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      WHERE records.attendance = max
      RETURN  records LIMIT 1
      """
    )

  fellowshipPeakIncomeThisMonth: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, this
            MATCH (date)
            WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      WITH  max(records.income) as max, this
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      WHERE records.income = max
      RETURN  records LIMIT 1
      """
    )

  fellowshipAvgAttendanceThisYear: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowship
            MATCH (date)
            WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH  max(records.income) as max, fellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      WHERE records.income = max
      RETURN  records LIMIT 1
      """
    )

  fellowshipAvgIncomeThisYear: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      RETURN  round(avg(records.income))
      """
    )

  fellowshipPeakAttendanceThisYear: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, this
            MATCH (date)
            WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      WITH  max(records.attendance) as max, this
      MATCH (this)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      WHERE records.attendance = max
      RETURN  records LIMIT 1
      """
    )

  fellowshipPeakIncomeThisYear: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, this
            MATCH (date)
            WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      WITH  max(records.income) as max, this
      MATCH (this)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      WHERE records.income = max
      RETURN  records LIMIT 1
      """
    )
}

extend type Bacenta {
  fellowshipAvgAttendanceThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.attendance))
      """
    )

  fellowshipAvgIncomeThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.income, 2))
      """
    )

  fellowshipPeakAttendanceThisMonth: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
       WITH date, records, fellowship
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
       WITH  max(records.attendance) as max, fellowship
       MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN  records LIMIT 1
      """
    )

  fellowshipPeakIncomeThisMonth: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
       WITH date, records, fellowship
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
       WITH  max(records.attendance) as max, fellowship
       MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN  records LIMIT 1
      """
    )

  fellowshipAvgAttendanceThisYear: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      RETURN  round(avg(records.attendance))
      """
    )

  fellowshipAvgIncomeThisYear: Float
    @cypher(
      statement: """
       MATCH (this:Bacenta {id:"a56a18c3-affb-4a96-a684-418df6657bdd"})-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
      MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      RETURN  round(avg(records.income, 2))
      """
    )

  fellowshipPeakAttendanceThisYear: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
       WITH date, records, fellowship
             MATCH (date)
             WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
       WITH  max(records.attendance) as max, fellowship
       MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN  records LIMIT 1
      """
    )

  fellowshipPeakIncomeThisYear: ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       MATCH (records)-[:SERVICE_HELD_ON]->(date:TimeGraph) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
       WITH date, records, fellowship
             MATCH (date)
             WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
       WITH  max(records.income) as max, fellowship
       MATCH (fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.income = max
       RETURN  records LIMIT 1
      """
    )

  avgWeekdayAttendanceThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgWeekdayAttendanceThisYear: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )
}

extend type Constituency {
  avgWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )
}

extend type Council {
  fellowshipsAvgAttendanceThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowships
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.attendance))
      """
    )

  fellowshipsAvgIncomeThisMonth: Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowships
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.income), 1)
      """
    )

  avgBacentaWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, bacenta, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgBacentaWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, bacenta, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgConstituencyWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgConstituencyWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )
}

extend type Stream {
  avgWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  avgCouncilWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )
}

extend type GatheringService {
  allFellowshipsAvgAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN round(avg(records.attendance))
      """
    )

  allFellowshipsAvgAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      RETURN  round(avg(records.attendance))
      """
    )

  allFellowshipsAvgAttendanceAllTime: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (this)-[:HAS*5]->(fellowships:Active:Fellowship)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN  round(avg(records.attendance))
      """
    )

  allFellowshipsAvgIncomeThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(avg(records.income), 2)
      """
    )

  allFellowshipsAvgIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      RETURN  round(avg(records.income), 2)
      """
    )

  allFellowshipsAvgIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowships:Active:Fellowship)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN  round(avg(records.income), 1)
      """
    )

  fellowshipWithPeakAttendanceThisMonth: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week

       WITH  max(records.attendance) as max

       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  fellowshipWithPeakAttendanceThisYear: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week

       WITH  max(records.attendance) as max

       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  fellowshipWithPeakAttendanceAllTime: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
       WITH  max(records.attendance) as max
       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.attendance = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  fellowshipWithPeakIncomeThisMonth: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week

       WITH  max(records.income) as max

       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.income = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  fellowshipWithPeakIncomeThisYear: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
             MATCH (date)
             WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week

       WITH  max(records.income) as max

       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.income = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  fellowshipWithPeakIncomeAllTime: ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records, fellowships
      MATCH (records)
      WHERE NOT (records:NoService)
       WITH  max(records.income) as max
       MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)
       WHERE records.income = max
       RETURN records ORDER BY records.created_at DESC LIMIT 1
      """
    )

  totalAverageWeekdayIncomeThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      RETURN  round(sum(records.income)/4, 1)
      """
    )

  totalAverageWeekdayIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      RETURN  round(sum(records.income)/52, 1)
      """
    )

  totalAverageWeekdayIncomeAllTime: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowships:Active:Fellowship) WHERE fellowships:Fellowship OR fellowships:ClosedFellowship
      MATCH (fellowships)-[:HAS_HISTORY {current:true}]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, records
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 52) AND date(date.date).week <= date().week
      RETURN  round(sum(records.income)/52, 1)
      """
    )

  totalPeakWeekdayAttendanceThisMonth: PeakWeek!
    @cypher(
      statement: """
      WITH date().week as end, date(date() - duration({months: 1})).week as start
      WITH range(start, end, 1) as list
      UNWIND list as weeknumber
          WITH weeknumber
          MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week = weeknumber
      WITH sum(record.attendance) AS sum, weeknumber
      RETURN weeknumber, sum as attendance ORDER BY sum desc
      LIMIT 1
      """
    )

  totalPeakWeekdayAttendanceThisYear: PeakWeek!
    @cypher(
      statement: """
      WITH date().week as end
      WITH range(1, end, 1) as list
      UNWIND list as weeknumber
          WITH weeknumber
          MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week = weeknumber
      WITH sum(record.attendance) AS sum, weeknumber
      RETURN weeknumber, sum as attendance ORDER BY sum desc
      LIMIT 1
      """
    )

  totalPeakWeekdayIncomeThisMonth: PeakWeek!
    @cypher(
      statement: """
      WITH date().week as end, date(date() - duration({months: 1})).week as start
      WITH range(start, end, 1) as list
      UNWIND list as weeknumber
          WITH weeknumber
          MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week = weeknumber
      WITH sum(record.income) AS sum, weeknumber
      RETURN weeknumber, round(sum, 2) as income ORDER BY sum desc
      LIMIT 1
      """
    )

  totalPeakWeekdayIncomeThisYear: PeakWeek!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, date(date.date).week as weeknumber
      RETURN max(sum) as attendance, weeknumber ORDER BY attendance DESC LIMIT 1
      """
    )

  averageBacentaAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH date, bussing
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      RETURN round(avg(bussing.attendance))
      """
    )

  averageBacentaAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH date, bussing
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      RETURN round(avg(bussing.attendance))
      """
    )

  averageBacentaAttendanceAllTime: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN round(avg(bussing.attendance))
      """
    )

  peakBacentaAttendanceThisMonth: BussingRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH date, bussing, bacenta
      MATCH (date)
      WHERE date(date.date).week >= (date().week - 4) AND date(date.date).week <= date().week
      WITH  max(bussing.attendance) as max
             MATCH (bacenta)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
             WHERE bussing.attendance = max
      RETURN bussing LIMIT 1
      """
    )

  peakBacentaAttendanceThisYear: BussingRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH date, bussing, bacenta
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH  max(bussing.attendance) as max
             MATCH (bacenta)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
             WHERE bussing.attendance = max
      RETURN bussing LIMIT 1
      """
    )

  peakBacentaAttendance: BussingRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH bussing, bacenta
      WITH  max(bussing.attendance) as max
             MATCH (bacenta)-[:HAS_HISTORY {current:true}]->(s:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
             WHERE bussing.attendance = max
      RETURN bussing LIMIT 1
      """
    )

  highestBussingThisYear: BussingRecord!
    @cypher(
      statement: """
      WITH date().week as end
      WITH range(1, end, 1) as list
      UNWIND list as weeknumber
          WITH weeknumber
          MATCH (this:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week = weeknumber
      WITH sum(bussing.attendance) AS sum, weeknumber
      RETURN  sum, weeknumber ORDER BY sum desc
      LIMIT 1
      """
    )

  averageConstituencyBussingAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum,date(date.date).week as weeknumber, con
      RETURN round(avg(sum))
      """
    )

  averageConstituencyBussingAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum,date(date.date).week as weeknumber, con
      RETURN round(avg(sum))
      """
    )

  averageConstituencyWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageConstituencyWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageConstituencyWeekdayIncomeThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageConstituencyWeekdayIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, con, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageCouncilWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageCouncilWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageCouncilWeekdayIncomeThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageCouncilWeekdayIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageCouncilBussingAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageCouncilBussingAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageStreamWeekdayAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageStreamWeekdayAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.attendance) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageStreamWeekdayIncomeThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageStreamWeekdayIncomeThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(record.income) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum), 2)
      """
    )

  averageStreamBussingAttendanceThisMonth: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= date(date() - duration({months: 1})).week AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )

  averageStreamBussingAttendanceThisYear: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY {current:true}]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date(date.date).week >= 1 AND date(date.date).week <= date().week
      WITH sum(bussing.attendance) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum))
      """
    )
}
