extend type ServiceRecord {
  church_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog:HistoryLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      RETURN church.name
      """
    )
}

type Stats {
  attendance: Float
  income: Float
}

extend type Fellowship {
  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      RETURN {
        attendance: toInteger(round(avg(record.attendance))),
        income: round(avg(record.income), 2)
        }
      """
    )

  peakFellowshipAttendance(days: Int!): ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, this
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.attendance) as max, this
      MATCH (fellowship)-[:HAS_HISTORY]->(s:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.attendance = max
      RETURN  record LIMIT 1
      """
    )

  peakFellowshipIncome(days: Int!): ServiceRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, this
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.income) as max, this
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.income = max
      RETURN record LIMIT 1
      """
    )
}

extend type Bacenta {
  avgFellowshipStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record.attendance AS attendance, record.income AS income
      WITH date
      WHERE date.date > date() - duration({days: $days})
      RETURN  {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
      }
      """
    )

  peakFellowshipAttendance(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.attendance) as max, record
      MATCH (record)
      WHERE record.attendance = max
      RETURN record ORDER BY record.attendance DESC LIMIT 1
      """
    )

  peakFellowshipIncome(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
            MATCH (date)
            WHERE date.date > date() - duration({days: $days})
      WITH  max(record.income) as max, record
      MATCH (record)
      WHERE record.income = max
      RETURN  record ORDER BY record.income DESC LIMIT 1
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship) WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(record.attendance) AS attendance, sum(record.income) as income, this, date(date.date).week as weeknumber
      RETURN  {
        attendance: round(avg(attendance)),
        income: round(avg(income), 2)
      }
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )
}

extend type Constituency {
  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..2]->(componentServices)
          MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

      MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
      MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days:$days})

      WITH DISTINCT componentRecords, date(date.date).week as weeknumber, this
      WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, this, weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, bacenta, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgBussingAttendance(days: Int): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )
}

extend type Council {
  avgFellowshipWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(record.attendance) AS attendance, sum(record.income) as income, fellowship, date(date.date).week as weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)-[:HAS]->(fellowship)
          WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(record.attendance) AS attendance, sum(record.income) AS income, bacenta, date(date.date).week as weeknumber
       RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgConstituencyWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(constituency:Constituency)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..2]->(componentServices)
          MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

      MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
      MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days:$days})

      WITH DISTINCT componentRecords, date(date.date).week as weeknumber, constituency
      WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, constituency, weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
       MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..3]->(componentServices)
          MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

      MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
      MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days:$days})

      WITH DISTINCT componentRecords, date(date.date).week as weeknumber, this
      WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, this, weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgBacentaBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, bacenta, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgConstituencyBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(constituency:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, constituency, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )
}

extend type Stream {
  avgWeekdayStats(days: Int!): Stats
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..4]->(componentServices)
          MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

      MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
      MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})

      WITH DISTINCT componentRecords, date(date.date).week as weeknumber, this
      WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, this, weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgCouncilWeekdayStats(days: Int!): Stats
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council:Council)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..4]->(componentServices)
          MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

      MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
      MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})

      WITH DISTINCT componentRecords, date(date.date).week as weeknumber, council
      WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, council, weeknumber
      RETURN {
        attendance: toInteger(round(avg(attendance))),
        income: round(avg(income), 2)
        }
      """
    )

  avgCouncilBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, council, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )
}

extend type GatheringService {
  avgFellowshipAttendanceStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship)
       WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      MATCH (record) WHERE NOT (record:NoService)
      MATCH (record)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
       RETURN {
        attendance: toInteger(round(avg(record.attendance))),
        income: round(avg(record.income), 2)
        }
      """
    )

  highestFellowshipAttendance(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship:Active:Fellowship)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, fellowship
      MATCH (record)
      WHERE NOT (record:NoService)
             MATCH (date)
              WHERE date.date > date() - duration({days: $days})

       WITH  max(record.attendance) as max, fellowship

       MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
       WHERE record.attendance = max
       RETURN record ORDER BY record.created_at DESC LIMIT 1
      """
    )

  highestFellowshipIncome(days: Int!): ServiceRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship:Active:Fellowship)
      WHERE fellowship:Fellowship OR fellowship:ClosedFellowship
      MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH date, record, fellowship
      MATCH (record)
      WHERE NOT (record:NoService)
             MATCH (date)
              WHERE date.date > date() - duration({days: $days})

       WITH  max(record.income) as max, fellowship

       MATCH (fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
       WHERE record.income = max
       RETURN record ORDER BY record.created_at DESC LIMIT 1
      """
    )

  peakBacentaAttendanceThisMonth(days: Int!): BussingRecord!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]-(:Stream)-[:HAS]-(:Council)-[:HAS]-(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WITH date, bussing, bacenta
      MATCH (date)
      WWHERE date.date > date() - duration({days: $days})
      WITH  max(bussing.attendance) as max, bacenta
             MATCH (bacenta)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
             WHERE bussing.attendance = max
      RETURN bussing LIMIT 1
      """
    )

  avgConstituencyBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(con:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(log:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum,date(date.date).week as weeknumber, con
      RETURN round(avg(sum)) AS average
      """
    )

  avgConstituencyWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(constituency:Constituency)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..2]->(componentServices)
           MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

       MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
       MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
       MATCH (date)
       WHERE date.date > date() - duration({days: $days})

       WITH DISTINCT componentRecords, date(date.date).week as weeknumber, constituency
       WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, constituency, weeknumber
       RETURN {
         attendance: toInteger(round(avg(attendance))),
         income: round(avg(income), 2)
         }
      """
    )

  avgCouncilWeekdayAttendanceStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..3]->(componentServices)
           MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

       MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
       MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
       MATCH (date)
       WHERE date.date > date() - duration({days: $days})

       WITH DISTINCT componentRecords, date(date.date).week as weeknumber, council
       WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, council, weeknumber
       RETURN {
         attendance: toInteger(round(avg(attendance))),
         income: round(avg(income), 2)
         }
      """
    )

  avgCouncilBussingAttendance(days: Int!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, council, date(date.date).week as weeknumber
      WITH round(avg(sum)) AS average
      RETURN
      CASE
      WHEN average IS NULL THEN 0
      ELSE average
      END AS average
      """
    )

  avgStreamWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..4]->(componentServices)
           MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

       MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
       MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
       MATCH (date)
       WHERE date.date > date() - duration({days: $days})

       WITH DISTINCT componentRecords, date(date.date).week as weeknumber, stream
       WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, stream, weeknumber
       RETURN {
         attendance: toInteger(round(avg(attendance))),
         income: round(avg(income), 2)
         }
      """
    )

  avgStreamBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
      WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, stream, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, this, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )

  avgWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..5]->(componentServices)
           MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

       MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
       MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
       MATCH (date)
       WHERE date.date > date() - duration({days: $days})

       WITH DISTINCT componentRecords, date(date.date).week as weeknumber, this
       WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, this, weeknumber
       RETURN {
         attendance: toInteger(round(avg(attendance))),
         income: round(avg(income), 2)
         }
      """
    )
}

extend type Oversight {
  avgGatheringServiceWeekdayStats(days: Int!): Stats!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(gatheringService:GatheringService)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_COMPONENT*1..6]->(componentServices)
      MATCH (componentServices)-[:HAS_SERVICE]->(componentRecords:ServiceRecord)

       MATCH (componentRecords) WHERE NOT (componentRecords:NoService)
       MATCH (componentRecords)-[:SERVICE_HELD_ON]->(date:TimeGraph)
       MATCH (date)
       WHERE date.date > date() - duration({days: $days})

       WITH DISTINCT componentRecords, date(date.date).week as weeknumber, gatheringService
       WITH sum(componentRecords.attendance) AS attendance, sum(componentRecords.income) AS income, gatheringService, weeknumber
       RETURN {
         attendance: toInteger(round(avg(attendance))),
         income: round(avg(income), 2)
         }
      """
    )

  avgGatheringServiceBussingAttendance(days: Int!): Float
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(gatheringService:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(bacenta:Bacenta)
      MATCH (bacenta)-[:HAS_HISTORY]-(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)
      MATCH (bussing) WHERE bussing.attendance IS NOT NULL
      MATCH (bussing)-[:BUSSED_ON]->(date:TimeGraph)
      MATCH (date)
       WHERE date.date > date() - duration({days: $days})
      WITH sum(bussing.attendance) AS sum, gatheringService, date(date.date).week as weeknumber
      RETURN round(avg(sum)) AS average
      """
    )
}
