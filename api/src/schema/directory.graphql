type Member @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
  auth_id: String
  firstName: String #@search
  middleName: String
  lastName: String
  fullName: String @computed
  currentTitle: String
    @cypher(
      statement: "MATCH (this)-[:HAS_TITLE]->(title:Title) RETURN title.name ORDER BY title.weight DESC LIMIT 1"
    )
  nameWithTitle: String @computed
  email: String
  phoneNumber: String
  whatsappNumber: String
  pictureUrl: String
  gender: Gender @relationship(type: "HAS_GENDER", direction: OUT)
  maritalStatus: MaritalStatus
    @relationship(type: "HAS_MARITAL_STATUS", direction: OUT)
  dob: TimeGraph @relationship(type: "WAS_BORN_ON", direction: OUT)
  title: [Title!]!
    @relationship(type: "HAS_TITLE", properties: "HasTitle", direction: OUT)
  ministry: Ministry @relationship(type: "BELONGS_TO", direction: OUT)
  occupation: Occupation @relationship(type: "HAS_OCCUPATION", direction: OUT)
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)-[:BELONGS_TO]->(:Fellowship)<-[:HAS*4]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  # Church Details
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR*1..6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )

  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|DOES_ARRIVALS_FOR|IS_ADMIN_FOR*1..6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  basontaMembers: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|IS_ADMIN_FOR*1..6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      MATCH (members)-[:BELONGS_TO]->(:Ministry)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  basontaMembershipCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|HAS|IS_ADMIN_FOR*1..6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      MATCH (members)-[:BELONGS_TO]->(:Ministry)
      RETURN COUNT(DISTINCT members)
      """
    )
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  loggedHistory: [HistoryLog!]! @relationship(type: "LOGGED_BY", direction: IN)
  fellowship: Fellowship @relationship(type: "BELONGS_TO", direction: OUT)
  leadsFellowship: [Fellowship!]! @relationship(type: "LEADS", direction: OUT)
  leadsFellowshipCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(fellowships:Fellowship)
      RETURN COUNT(fellowships)
      """
    )
  leadsBacenta: [Bacenta!]! @relationship(type: "LEADS", direction: OUT)
  leadsBacentaCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(bacentas:Bacenta)
      RETURN COUNT(bacentas)
      """
    )
  leadsMinistry: [Ministry!]! @relationship(type: "LEADS", direction: OUT)
  leadsSonta: [Sonta!]! @relationship(type: "LEADS", direction: OUT)
  leadsBasonta: [Basonta!]! @relationship(type: "LEADS", direction: OUT)
  leadsConstituency: [Constituency!]!
    @relationship(type: "LEADS", direction: OUT)
  leadsConstituencyCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(constituency:Constituency)
      RETURN COUNT(DISTINCT constituency)
      """
    )
  isAdminForConstituencyCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(constituency:Constituency)
      RETURN COUNT(DISTINCT constituency)
      """
    )
  leadsAdminsConstituencyCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|IS_ADMIN_FOR]->(constituency:Constituency)
      RETURN COUNT(DISTINCT constituency)
      """
    )
  leadsCouncil: [Council!]! @relationship(type: "LEADS", direction: OUT)
  leadsCouncilCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(council:Council)
      RETURN COUNT(DISTINCT council)
      """
    )
  isAdminForCouncilCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(council:Council)
      RETURN COUNT(DISTINCT council)
      """
    )
  leadsAdminsCouncilCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|IS_ADMIN_FOR]->(council:Council)
      RETURN COUNT(DISTINCT council)
      """
    )
  leadsStream: [Stream!]! @relationship(type: "LEADS", direction: OUT)
  leadsStreamCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(stream:Stream)
      RETURN COUNT(DISTINCT stream)
      """
    )
  isAdminForStreamCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(stream:Stream)
      RETURN COUNT(DISTINCT stream)
      """
    )
  leadsGatheringService: [GatheringService!]!
    @relationship(type: "LEADS", direction: OUT)
  isAdminForGatheringServiceCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(gatheringService:GatheringService)
      RETURN COUNT(DISTINCT gatheringService)
      """
    )
  leadsGatheringServiceCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(gatheringService:GatheringService)
      RETURN COUNT(DISTINCT gatheringService)
      """
    )
  leadsAdminsGatheringServiceCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|IS_ADMIN_FOR]->(gatheringService:GatheringService)
      RETURN COUNT(DISTINCT gatheringService)
      """
    )
  isAdminForGatheringService: [GatheringService!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)
  isAdminForStream: [Stream!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)
  isAdminForCouncil: [Council!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)
  isAdminForConstituency: [Constituency!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)

  #OTHER WORKS
  was_treasurer_for: [ServiceRecord!]!
    @relationship(type: "WAS_TREASURER_FOR", direction: OUT)
}

type Gender @auth(rules: [{ isAuthenticated: true }]) {
  gender: String
  members: [Member!]! @relationship(type: "HAS_GENDER", direction: IN)
}

type MaritalStatus @auth(rules: [{ isAuthenticated: true }]) {
  status: String
  members: [Member!]! @relationship(type: "HAS_MARITAL_STATUS", direction: IN)
}

type Occupation @auth(rules: [{ isAuthenticated: true }]) {
  occupation: String
  members: [Member!]! @relationship(type: "HAS_OCCUPATION", direction: IN)
}

type Title @auth(rules: [{ isAuthenticated: true }]) {
  name: String! #Pastor, Reverend, Apostle, Bishop (Mother)
  members: [Member!]!
    @relationship(type: "HAS_TITLE", properties: "HasTitle", direction: IN)
}

interface HasTitle @relationshipProperties {
  date: Date
}

interface TimeGraphNode {
  date: Date
}

type TimeGraph implements TimeGraphNode
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID
    @cypher(
      statement: """
      MATCH (this)
      RETURN toString(this.date)
      """
    )
  date: Date
  swell: Boolean
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS swellStatus
      WITH swellStatus WHERE swellStatus ='SwellDate'
      RETURN true
      """
    )
  memberDob: Member @relationship(type: "WAS_BORN_ON", direction: IN)
  # titleAppointmentDate: Member @relationship(type: "APPOINTED_ON", direction: IN)
  leaderHistoryStartDate: Member
    @relationship(type: "LEADER_STARTED_ON", direction: OUT)
  leaderHistoryEndDate: TimeGraph
    @relationship(type: "LEADER_ENDED_ON", direction: OUT)
  historyDate: Member @relationship(type: "RECORDED_ON", direction: OUT)
  serviceDate: [ServiceRecord!]!
    @relationship(type: "SERVICE_HELD_ON", direction: IN)
  bussingDate: [BussingRecord!]! @relationship(type: "BUSSED_ON", direction: IN)
}

type HistoryLog @auth(rules: [{ isAuthenticated: true }]) {
  id: ID @id
  timeStamp: DateTime
  historyRecord: String #leader was transferred to
  created_at: TimeGraph @relationship(type: "RECORDED_ON", direction: OUT)
  loggedBy: Member @relationship(type: "LOGGED_BY", direction: OUT)
  leaders: [Member!]! @relationship(type: "HAS_HISTORY", direction: IN)
  fellowship: [Fellowship!]! @relationship(type: "HAS_HISTORY", direction: IN)
  bacenta: [Bacenta!]! @relationship(type: "HAS_HISTORY", direction: IN)
  constituency: [Constituency!]!
    @relationship(type: "HAS_HISTORY", direction: IN)
  sonta: [Sonta!]! @relationship(type: "HAS_HISTORY", direction: IN)
}

##Church Types##

interface Church @auth(rules: [{ isAuthenticated: true }]) {
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  members: [Member!]!
  memberSearch(key: String!, limit: Int!): [Member!]!
  memberCount: Int
  pastorCount: Int
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
}

type Denomination implements Church {
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  gatheringServices: [GatheringService!]!
    @relationship(type: "HAS", direction: OUT)
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*6]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*6]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )

  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)

  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
}

type GatheringService implements Church {
  id: ID @id
  name: String!
  noIncome: Boolean
  leader: Member @relationship(type: "LEADS", direction: IN)
  denomination: Denomination! @relationship(type: "HAS", direction: IN)
  streams: [Stream!]! @relationship(type: "HAS", direction: OUT)
  councils: [Council!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(councils:Council) RETURN councils"
    )
  constituencies: [Constituency!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(constituencies:Constituency) RETURN constituencies"
    )
  bacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacenta:Bacenta) RETURN bacenta"
    )
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )

  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  streamCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(stream:Stream) RETURN COUNT(stream)"
    )
  councilCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(council:Council) RETURN COUNT(council)"
    )
  constituencyCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(constituency:Constituency) RETURN COUNT(constituency)"
    )
  bacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(bacentas:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]-(bacenta:Vacation:Bacenta) RETURN COUNT(bacenta)"
    )
  fellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(fellowships:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  activeFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(fellowships:Active:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  vacationFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*5]->(fellowship:Vacation:Fellowship) RETURN COUNT(fellowship)"
    )
  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
}

type Stream implements Church {
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  councils: [Council!]! @relationship(type: "HAS", direction: OUT)
  gatheringService: GatheringService @relationship(type: "HAS", direction: IN)
  stream_name: String
    @cypher(
      statement: """
      MATCH (this:Stream)
      RETURN DISTINCT toLower(this.name)
      """
    )
  constituencies: [Constituency!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(constituencies:Constituency) RETURN constituencies"
    )
  bacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacenta:Bacenta) RETURN bacenta"
    )

  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  councilCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(council:Council) RETURN COUNT(council)"
    )
  constituencyCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(constituency:Constituency) RETURN COUNT(constituency)"
    )
  bacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(bacentas:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]-(bacenta:Vacation:Bacenta) RETURN COUNT(bacenta)"
    )
  fellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(fellowships:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  activeFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(fellowships:Active:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  vacationFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(fellowship:Vacation:Fellowship) RETURN COUNT(fellowship)"
    )
  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  serviceRecord: [ServiceRecord!]!
    @relationship(type: "HAS_SERVICE", direction: OUT)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
}

type Council implements Church {
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  stream: Stream @relationship(type: "HAS", direction: IN)
  bacentas: [Bacenta!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*1..2]->(bacenta:Bacenta) RETURN bacenta"
    )
  constituencies: [Constituency!]! @relationship(type: "HAS", direction: OUT)
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  constituencyCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(constituency:Constituency) RETURN COUNT(constituency)"
    )
  bacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:Bacenta) RETURN COUNT(DISTINCT bacentas)"
    )
  activeBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]->(bacentas:Bacenta:Active) RETURN COUNT(DISTINCT bacentas)"
    )
  vacationBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*2]-(bacenta:Vacation:Bacenta) RETURN COUNT(bacenta)"
    )
  fellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(fellowships:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  activeFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(fellowships:Active:Fellowship) RETURN COUNT(DISTINCT fellowships)"
    )
  vacationFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS*3]->(fellowship:Vacation:Fellowship) RETURN COUNT(fellowship)"
    )

  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  serviceRecord: [ServiceRecord!]!
    @relationship(type: "HAS_SERVICE", direction: OUT)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
}

type Constituency implements Church {
  id: ID @id
  name: String!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*2]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  fellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship:Fellowship) RETURN COUNT(fellowship)"
    )
  activeFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship:Active:Fellowship) RETURN COUNT(fellowship)"
    )
  bacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacenta:Bacenta) RETURN COUNT(bacenta)"
    )
  vacationFellowshipCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]-(:Bacenta)-[:HAS]->(fellowship:Vacation:Fellowship) RETURN COUNT(fellowship)"
    )

  activeBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]->(bacenta:Active:Bacenta) RETURN COUNT(bacenta)"
    )
  vacationBacentaCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS]-(bacenta:Vacation:Bacenta) RETURN COUNT(bacenta)"
    )
  leader: Member @relationship(type: "LEADS", direction: IN)
  sontas: [Sonta!]! @relationship(type: "HAS_SONTA", direction: OUT)
  bacentas: [Bacenta!]! @relationship(type: "HAS", direction: OUT)
  council: Council @relationship(type: "HAS", direction: IN)

  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  serviceRecord: [ServiceRecord!]!
    @relationship(type: "HAS_SERVICE", direction: OUT)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int! = 12): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
}

type Bacenta implements Church {
  id: ID @id
  name: String!
  target: Int!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*3]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  vacationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Active' OR status = 'Vacation'
      RETURN status
      """
    )
  labels: [String]
    @cypher(
      statement: """
      MATCH (this)
      RETURN labels(this)
      """
    )
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(:Fellowship)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  leader: Member @relationship(type: "LEADS", direction: IN)
  fellowships: [Fellowship!]! @relationship(type: "HAS", direction: OUT)
  fellowshipCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS]->(fellowship:Fellowship) RETURN COUNT(fellowship)"
    )
  vacationFellowshipCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship:Vacation)
      RETURN COUNT(DISTINCT fellowship)
      """
    )
  activeFellowshipCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship:Active)
      RETURN COUNT(DISTINCT fellowship)
      """
    )
  basontas: Basonta @relationship(type: "HAS_BASONTA", direction: OUT)
  constituency: Constituency @relationship(type: "HAS", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int! = 4): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(services:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT services, date
      RETURN services ORDER BY date.date DESC LIMIT $limit
      """
    )

  council: Council
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*2]-(council:Council)
      RETURN council
      """
    )
  stream: Stream
    @cypher(statement: "MATCH (this)<-[:HAS*3]-(stream:Stream) RETURN stream")
}

# Shared Units: Fellowship, Fellowship, Sonta
type Fellowship implements Church {
  id: ID @id
  bankingCode: Int
  name: String!
  location: Point
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*4]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  vacationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Active' OR status = 'Vacation'
      RETURN status
      """
    )
  bacenta: Bacenta @relationship(type: "HAS", direction: IN)
  leader: Member @relationship(type: "LEADS", direction: IN)
  members: [Member!]! @relationship(type: "BELONGS_TO", direction: IN)
  memberCount: Int
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(pastors:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  meetingDay: ServiceDay @relationship(type: "MEETS_ON", direction: OUT)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records,date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
  labels: [String]
    @cypher(
      statement: """
      MATCH (this)
      RETURN labels(this)
      """
    )
  council: Council
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*3]-(council:Council)
      RETURN council
      """
    )
}
type ClosedFellowship {
  id: ID @id
  bankingCode: Int
  name: String
  location: Point
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*4]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  bacenta: Bacenta @relationship(type: "HAS", direction: IN)
  leader: Member @relationship(type: "LEADS", direction: IN)
  members: [Member!]! @relationship(type: "BELONGS_TO", direction: IN)
  meetingDay: ServiceDay @relationship(type: "MEETS_ON", direction: OUT)
  history: [HistoryLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records, date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
  labels: [String]
    @cypher(
      statement: """
      MATCH (this)
      RETURN labels(this)
      """
    )
  council: Council
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*3]-(council:Council)
      RETURN council
      """
    )
}

# union ChurchWithServices = Fellowship | Constituency | Council

###Basonta Church Types####
type Ministry {
  id: ID @id
  name: String
  sonta: [Sonta!]! @relationship(type: "HAS_SONTA", direction: OUT)
  leader: Member @relationship(type: "LEADS", direction: IN)
  members: [Member!]! @relationship(type: "BELONGS_TO", direction: IN)
}

type Sonta {
  id: ID @id
  name: String
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*4]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  members: [Member!]!
  leader: Member @relationship(type: "LEADS", direction: IN)
  basonta: [Basonta!]! @relationship(type: "HAS_BASONTA", direction: OUT)
  ministry: Ministry @relationship(type: "HAS_SONTA", direction: IN)
  history: [HistoryLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  constituency: Constituency @relationship(type: "HAS_SONTA", direction: IN)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
}

type Basonta {
  id: ID @id
  name: String
  leader: Member @relationship(type: "LEADS", direction: IN)
  bacenta: Bacenta @relationship(type: "HAS_BASONTA", direction: IN)
  sonta: Sonta @relationship(type: "HAS_BASONTA", direction: IN)
}
