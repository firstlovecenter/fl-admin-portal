extend type Member {
  leadscreativeArt: [CreativeArts!]!
    @relationship(type: "LEADS", direction: OUT)
  leadsHubCouncil: [HubCouncil!]! @relationship(type: "LEADS", direction: OUT)
  leadsHub: [Hub!]! @relationship(type: "LEADS", direction: OUT)
  leadsHubFellowship: [HubFellowship!]!
    @relationship(type: "LEADS", direction: OUT)
  leadsHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(fellowships:HubFellowship:Fellowship)
      RETURN COUNT(fellowships)
      """
    )
  leadsHubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(hubs:Hub)
      RETURN COUNT(hubs)
      """
    )
  leadsMinistryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(ministries:Ministry)
      RETURN COUNT(ministries)
      """
    )
  isAdminForMinistryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(ministries:Ministry)
      RETURN COUNT (ministries)
      """
    )
  leadsAdminsMinistryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|IS_ADMIN_FOR]->(ministries:Ministry)
      RETURN COUNT(ministries)
      """
    )
  leadscreativeArtCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS]->(creativeArts:CreativeArts)
      RETURN COUNT(creativeArts)
      """
    )
  isAdminForcreativeArtCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:IS_ADMIN_FOR]->(creativeArts:CreativeArts)
      RETURN COUNT (creativeArts)
      """
    )
  leadsAdminsCreativeArtsCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:LEADS|IS_ADMIN_FOR]->(creativeArts:CreativeArts)
      RETURN COUNT(creativeArts)
      """
    )
  isAdminForMinistry: [Ministry!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)

  isAdminForCreativeArts: [CreativeArts!]!
    @relationship(type: "IS_ADMIN_FOR", direction: OUT)
}

type Basonta {
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC LIMIT $limit"
    )
}

type CreativeArts {
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_MINISTRY]-(campus:Campus)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(this)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_MINISTRY]-(campus:Campus)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(this)
      RETURN COUNT(DISTINCT members)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowships:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  activeHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowships:HubFellowship:Active)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  vacationHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowships:HubFellowship:Vacation)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  hubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(hubs:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubCouncilCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(ministries:Ministry)-[:HAS]->(hubCouncils:HubCouncil)
      RETURN COUNT(DISTINCT hubCouncils)
      """
    )
  ministryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(ministries:Ministry)
      RETURN COUNT(DISTINCT ministries)
      """
    )
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  campus: Campus @relationship(type: "HAS_MINISTRY", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  ministries: [Ministry!]! @relationship(type: "HAS", direction: OUT)
  streams: [Stream!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_MINISTRY]-(:Campus)-[:HAS]->(stream:Stream)
      RETURN stream
      """
    )
}

type Ministry {
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(stream:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN COUNT(DISTINCT members)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowships:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  activeHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowships:Active:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  vacationHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowships:Vacation:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  hubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(hubs:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubCouncilCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(hubs:HubCouncil)
      RETURN COUNT(DISTINCT hubs)
      """
    )
  id: ID @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  admin: Member @relationship(type: "IS_ADMIN_FOR", direction: IN)
  stream: Stream @relationship(type: "HAS_MINISTRY", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  servicelogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  creativeArts: CreativeArts! @relationship(type: "HAS", direction: IN)
  hubCouncils: [HubCouncil!]! @relationship(type: "HAS", direction: OUT)
  councils: [Council!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_MINISTRY]-(stream:Stream)-[:HAS]->(councils:Council)
      RETURN councils
      """
    )
  hubFellowships: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowships:HubFellowship)
      RETURN fellowship
      """
    )
}

type HubCouncil {
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Ministry)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Ministry)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(council:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN COUNT(DISTINCT members)
      """
    )
  hubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(hub:Hub)
      RETURN COUNT(DISTINCT hub)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Hub)-[:HAS]->(fellowships:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  activeHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Hub)-[:HAS]->(fellowships:Active:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  vacationHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Hub)-[:HAS]->(fellowships:Vacation:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  id: ID! @id
  name: String!
  leader: Member @relationship(type: "LEADS", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  vacationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Active' OR status = 'Vacation' OR status = 'Online'
      RETURN status
      """
    )
  hubs: [Hub!]! @relationship(type: "HAS", direction: OUT)
  ministry: Ministry! @relationship(type: "HAS", direction: IN)
  council: Council! @relationship(type: "HAS_MINISTRY", direction: IN)
  constituencies: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_MINISTRY]-(council:Council)-[:HAS]->(constituencies:Constituency)
      RETURN constituencies
      """
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  rehearsals(limit: Int!, skip: Int = 0): [RehearsalRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:RehearsalRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records,date
      RETURN records ORDER BY date.date DESC SKIP $skip LIMIT $limit
      """
    )
}

type Hub {
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(constituency:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (this)<-[:HAS_MINISTRY]-(constituency:Constituency)-[:HAS]->(:Bacenta)-[:HAS]->(:Fellowship)<-[:BELONGS_TO]-(members:Active:Member)
      MATCH (members)-[:BELONGS_TO]->(creativeArts)
      RETURN COUNT(DISTINCT members)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowships:Active:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  activeHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowships:Active:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  vacationHubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowships:Vacation:HubFellowship)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  id: ID! @id
  name: String!
  location: Point
  leader: Member @relationship(type: "LEADS", direction: IN)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC  LIMIT $limit"
    )
  meetingDay: ServiceDay! @relationship(type: "MEETS_ON", direction: OUT)
  vacationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Active' OR status = 'Vacation' OR status = 'Online'
      RETURN status
      """
    )
  hubFellowships: [Fellowship!]! @relationship(type: "HAS", direction: OUT)
  hubCouncil: HubCouncil! @relationship(type: "HAS", direction: IN)
  constituency: Constituency! @relationship(type: "HAS_MINISTRY", direction: IN)
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  rehearsals(limit: Int!, skip: Int = 0): [RehearsalRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:RehearsalRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records,date
      RETURN records ORDER BY date.date DESC SKIP $skip LIMIT $limit
      """
    )
}

extend type Campus {
  basontas: [Basonta!]! @relationship(type: "HAS_MINISTRY", direction: OUT)
  creativeArtsCount: Int
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts) RETURN COUNT(creativeArts)"
    )

  ministryCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry) RETURN COUNT(ministry)"
    )
  hubCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS*2]->(hubs:Hub) RETURN COUNT(hub)"
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS*4]->(fellowship:HubFellowship) RETURN COUNT(fellowship)"
    )
  hubFellowships: [Fellowship!]!
    @cypher(
      statement: "MATCH (this)-[:HAS*4]->(fellowship:HubFellowship) RETURN fellowship"
    )
  hubs: [Hub!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS*2]->(hub:Hub) RETURN hub"
    )
}

extend type Stream {
  ministries: [Ministry!]! @relationship(type: "HAS_MINISTRY", direction: OUT)
  ministryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)
      RETURN COUNT(ministry)
      """
    )
  hubCouncils: [Hub!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)-[HAS]->(hubCouncils:HubCouncil) RETURN hubCouncils"
    )
  hubCouncilCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)-[:HAS]->(hubCouncils:HubCouncil) RETURN COUNT(hubCouncils)"
    )
  hubs: [Hub!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)-[HAS*2]->(hubs:Hub) RETURN hubs"
    )
  hubCount: Int!
    @cypher(
      statement: "MATCH (this)-[:HAS_MINISTRY]->(ministry:Ministry)-[:HAS*2]->(hubs:Hub) RETURN COUNT(hubs)"
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:Ministry)-[:HAS*2]->(:Hub)-[:HAS]->(hubFellowships:HubFellowship)
      RETURN COUNT(hubFellowships)
      """
    )

  hubFellowships: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:Ministry)-[:HAS*2]->(:Hub)-[:HAS]->(hubFellowships:HubFellowship)
      RETURN hubFellowships
      """
    )
}

extend type Council {
  hubCouncils: [HubCouncil!]!
    @relationship(type: "HAS_MINISTRY", direction: OUT)
  hubCouncilsFromMinistry(ministryId: ID!): [HubCouncil!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(hubs:HubCouncil)<-[:HAS]-(ministry:Ministry {id:$ministryId})
      RETURN hubs
      """
    )
  hubCouncilCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(hubs:HubCouncil)
      RETURN COUNT(hubs)
      """
    )
  hubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:HubCouncil)-[:HAS]->(hubs:Hub)
      RETURN COUNT(hubs)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:HubCouncil)-[:HAS*2]->(fellowship:HubFellowship)
      RETURN COUNT(fellowship)
      """
    )
}

extend type Constituency {
  hubs: [Hub!]! @relationship(type: "HAS_MINISTRY", direction: OUT)
  hubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(hubs:Hub)
      RETURN COUNT(hubs)
      """
    )
  hubFellowshipCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:Hub)-[:HAS]->(fellowship:HubFellowship)
      RETURN COUNT(fellowship)
      """
    )
}

extend type Fellowship {
  hub: Hub @relationship(type: "HAS", direction: IN)
  councilHubs: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Constituency)<-[:HAS]-(council:Council)
      MATCH (council)-[:HAS_MINISTRY]->(hub:Hub)
      RETURN hub
      """
    )
}

type HubFellowship implements Church {
  id: ID @id
  bankingCode: Int
  name: String!
  location: Point
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*4]-(stream:Stream)
      RETURN DISTINCT toLower(stream.name)
      """
    )
  vacationStatus: String!
    @cypher(
      statement: """
      MATCH (this)
      UNWIND labels(this) AS status
      WITH status WHERE status = 'Active' OR status = 'Vacation' OR status = 'Online'
      RETURN status
      """
    )
  bacenta: Bacenta @relationship(type: "HAS", direction: IN)
  leader: Member @relationship(type: "LEADS", direction: IN)
  members: [Member!]!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)
      RETURN DISTINCT members ORDER BY toLower(members.lastName), toLower(members.firstName)
      """
    )
  memberCount: Int!
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)
      RETURN COUNT(DISTINCT members)
      """
    )
  ministryMemberCount: Int
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(members:Active:Member)-[:BELONGS_TO]->(:Ministry)
      RETURN COUNT(DISTINCT members)
      """
    )
  pastorCount: Int
    @cypher(
      statement: """
      MATCH (this)<-[:BELONGS_TO]-(pastors:Active:Member)-[:HAS_TITLE]->(:Title)
      RETURN COUNT(DISTINCT pastors)
      """
    )
  meetingDay: ServiceDay @relationship(type: "MEETS_ON", direction: OUT)
  history(limit: Int! = 3): [HistoryLog!]!
    @cypher(
      statement: "MATCH (this)-[:HAS_HISTORY|OLD_HISTORY]->(log:HistoryLog) RETURN log ORDER BY log.timeStamp DESC LIMIT $limit"
    )
  serviceLogs: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  services(limit: Int!, skip: Int): [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(records:ServiceRecord)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      WITH DISTINCT records,date
      RETURN records ORDER BY date.date DESC LIMIT $limit
      """
    )
  labels: [String]
    @cypher(
      statement: """
      MATCH (this)
      RETURN labels(this)
      """
    )

  council: Council
    @cypher(
      statement: """
      MATCH (this)<-[:HAS*3]-(council:Council)
      RETURN council
      """
    )
  hub: Hub! @relationship(type: "HAS", direction: IN)
}

extend type Mutation {
  CreateCreativeArts(
    name: String!
    leaderId: ID!
    campusId: ID!
  ): CreativeArts!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      CREATE (creativeArt:CreativeArts:Basonta {name:$name})
        SET creativeArt.id = apoc.create.uuid()

      WITH creativeArt
      MATCH (leader:Member:Active {id:$leaderId}) WHERE leader.email IS NOT NULL
      MATCH (campus:Campus {id:$campusId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})

      CREATE (log:HistoryLog:ServiceLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=2,
          log.historyRecord = creativeArt.name +' Creative Art Ministry History Begins'

      MERGE (leader)-[:LEADS]->(creativeArt)
      MERGE (campus)-[:HAS_MINISTRY]->(creativeArt)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (creativeArt)-[:HAS_HISTORY]->(log)

      RETURN creativeArt
      """
    )
  CreateMinistry(leaderId: ID!, streamId: ID!, creativeArtsId: ID!): Ministry!
    @auth(
      rules: [{ roles: ["adminCampus", "adminStream", "adminCreativeArts"] }]
    )
    @cypher(
      statement: """
      CREATE (ministry:Ministry)
        SET	ministry.id = apoc.create.uuid()

      WITH ministry
      MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
      MATCH (stream:Stream {id: $streamId})
      MATCH (creativeArt:CreativeArts {id: $creativeArtsId})
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})
        SET ministry.name = stream.name + ' ' +  creativeArt.name

      WITH ministry, stream, leader, creativeArt, currentUser
      CREATE (log:HistoryLog:ServiceLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=2,
          log.historyRecord = ministry.name +' Ministry History Begins'

      WITH ministry, stream, leader, creativeArt, currentUser, log
      MERGE (stream)-[:HAS_MINISTRY]->(ministry)
      MERGE (leader)-[:LEADS]->(ministry)
      MERGE (creativeArt)-[:HAS]->(ministry)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (ministry)-[:HAS_HISTORY]->(log)

      RETURN ministry
      """
    )
  CreateHubCouncil(leaderId: ID!, ministryId: ID!, councilId: ID!): HubCouncil!
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      CREATE (hub:Active:HubCouncil)
        SET hub.id = apoc.create.uuid()

      WITH hub
      CREATE (log:HistoryLog:ServiceLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=1

      WITH hub, log
      MATCH (leader:Active:Member {id: $leaderId})  WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (ministry:Ministry {id: $ministryId})<-[:HAS]-(creativeArts:CreativeArts)
      MATCH (council:Council {id: $councilId})
        SET hub.name = council.name + ' ' + creativeArts.name,
          log.historyRecord = hub.name +' Hub Council History Begins'

      WITH hub, leader, ministry, currentUser, log, council
      MERGE (council)-[:HAS_MINISTRY]->(hub)
      MERGE (ministry)-[:HAS]->(hub)
      MERGE (leader)-[:LEADS]->(hub)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (hub)-[:HAS_HISTORY]->(log)

      RETURN hub
      """
    )
  CreateHub(
    name: String!
    leaderId: ID!
    hubCouncilId: ID!
    constituencyId: ID!
    meetingDay: String!
    venueLongitude: Float
    venueLatitude: Float
  ): Hub!
    @auth(
      rules: [
        {
          roles: [
            "adminCouncil"
            "adminCampus"
            "adminStream"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (council:HubCouncil {id: $hubCouncilId})<-[:HAS]-(:Ministry)<-[:HAS]-(creative:CreativeArts)
      MATCH (constituency:Constituency {id: $constituencyId})
      UNWIND split(creative.name, ' ') AS creativeName
      WITH COLLECT(LEFT(creativeName, 1)) AS firstLetters, constituency.name AS constituencyName
      WITH REDUCE(s = '', letter in firstLetters | s + letter) AS concatenatedString, constituencyName

      CREATE (hub:Active:Hub {name: concatenatedString + ' ' + constituencyName + ' ' + $name})
        SET hub.id = apoc.create.uuid()
        SET hub.location = point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})

      WITH hub
      CREATE (log:HistoryLog:ServiceLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=0,
          log.historyRecord = hub.name +' hub history Begins'

      WITH hub, log
      MATCH (leader:Active:Member {id: $leaderId})  WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (council:HubCouncil {id: $hubCouncilId})
      MATCH (constituency:Constituency {id: $constituencyId})
      MATCH (meetingDay:ServiceDay {day: $meetingDay})

      WITH hub, leader, currentUser, log, council, meetingDay, constituency
      MERGE (council)-[:HAS]->(hub)
      MERGE (constituency)-[:HAS_MINISTRY]->(hub)
      MERGE (leader)-[:LEADS]->(hub)
      MERGE (hub)-[:MEETS_ON]->(meetingDay)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (hub)-[:HAS_HISTORY]->(log)

      RETURN hub
      """
    )
}

extend type Mutation {
  UpdateCreativeArtsDetails(creativeArtsId: ID!, name: String!): CreativeArts!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (creativeArt:CreativeArts {id: $creativeArtsId})
        SET creativeArt.name = $name

      RETURN creativeArt
      """
    )
  UpdateMinistryDetails(ministryId: ID!, name: String!): Ministry!
    @auth(
      rules: [{ roles: ["adminCampus", "adminStream", "adminCreativeArts"] }]
    )
    @cypher(
      statement: """
       MATCH (ministry:Ministry {id:$ministryId})
        SET ministry.name = $name

      RETURN ministry
      """
    )
  UpdateHubCouncilDetails(hubCouncilId: ID!, name: String!): HubCouncil!
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (hub:HubCouncil {id:$hubCouncilId})
        SET hub.name = $name

      RETURN hub
      """
    )
  UpdateHubDetails(
    hubId: ID!
    name: String!
    meetingDay: String
    venueLongitude: Float
    venueLatitude: Float
  ): Hub!
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (hub:Hub {id:$hubId})
        SET hub.name = $name,
        hub.location = point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})

      WITH hub
           CALL {
             WITH hub
             WITH hub WHERE $meetingDay IS NOT NULL
             MATCH (meetingDay:ServiceDay {day: $meetingDay})
             OPTIONAL MATCH (hub)-[r:MEETS_ON]->()
             DELETE r
             MERGE (hub)-[:MEETS_ON]->(meetingDay)
            	RETURN count(hub)
            }

      RETURN hub
      """
    )

  #Set Fellowship to be 'HubFellowship'
  SetFellowshipToHubFellowship(fellowshipId: ID!, hubId: ID!): Fellowship!
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id: $fellowshipId})
      MATCH (hub:Hub {id: $hubId})<-[:HAS]-(ministry:HubCouncil)

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship was made into a hub fellowship for ' + ministry.name

      WITH log,fellowship, hub
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MERGE (hub)-[:HAS]->(fellowship)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (hub)-[:HAS_HISTORY]->(log)

      SET fellowship:HubFellowship

      RETURN fellowship
      """
    )

  SetHubFellowshipToRegularFellowship(fellowshipId: ID!): Fellowship!
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminCreativeArts"
            "adminMinistry"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (fellowship:HubFellowship {id: $fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' hub fellowship was made into a regular fellowship '

      WITH log,fellowship

      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[r:HAS]-(hub:Hub)
      DELETE r

      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (hub)-[:HAS_HISTORY]->(log)

      REMOVE fellowship:HubFellowship

      RETURN fellowship
      """
    )
}

extend type Mutation {
  MakeCreativeArtsLeader(
    leaderId: ID!
    creativeArtsId: ID!
    oldLeaderId: ID
  ): Member!
  RemoveCreativeArtsLeader(
    leaderId: ID!
    creativeArtsId: ID!
    newLeaderId: ID!
  ): Member
  MakeMinistryLeader(leaderId: ID!, ministryId: ID!, oldLeaderId: ID): Member!
  RemoveMinistryLeader(leaderId: ID!, ministryId: ID!, newLeaderId: ID!): Member
  MakeHubCouncilLeader(
    leaderId: ID!
    hubCouncilId: ID!
    oldLeaderId: ID
  ): Member!
  RemoveHubCouncilLeader(
    leaderId: ID!
    hubCouncilId: ID!
    newLeaderId: ID!
  ): Member
  MakeHubLeader(leaderId: ID!, hubId: ID!, oldLeaderId: ID): Member!
  RemoveHubLeader(leaderId: ID!, hubId: ID!, newLeaderId: ID!): Member
  MakeCreativeArtsAdmin(
    adminId: ID!
    creativeArtsId: ID!
    oldAdminId: ID
  ): Member!
  RemoveCreativeArtsAdmin(
    adminId: ID!
    creativeArtsId: ID!
    newAdminId: ID!
  ): Member
  MakeMinistryAdmin(adminId: ID!, ministryId: ID!, oldAdminId: ID): Member!
  RemoveMinistryAdmin(adminId: ID!, ministryId: ID!, newAdminId: ID!): Member
}

type MinistryAttendanceRecord implements Record
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
  createdAt: DateTime!
  created_by: Member
  serviceDate: TimeGraph @relationship(type: "SERVICE_HELD_ON", direction: OUT)
  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  attendance: Int
  familyPicture: String
  serviceLog: ServiceLog! @relationship(type: "HAS_SERVICE", direction: IN)
  noServiceReason: String
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(church)
      WHERE church:HubFellowship
      MATCH (church)<-[:HAS*1..4]-(stream:Stream)
      RETURN stream.name
      """
    )
}

type MinistryStageAttendanceRecord implements Record
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
  createdAt: DateTime!
  created_by: Member
  serviceDate: TimeGraph @relationship(type: "SERVICE_HELD_ON", direction: OUT)
  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  attendance: Int!
  onStagePictures: [String!]!
  serviceLog: ServiceLog! @relationship(type: "HAS_SERVICE", direction: IN)
  noStagePerformanceReason: String
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Ministry
      MATCH (church)<-[:HAS_MINISTRY]-(stream:Stream)
      RETURN stream.name
      """
    )
}

type RehearsalRecord implements Record
  @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
  createdAt: DateTime!
  created_by: Member
  serviceDate: TimeGraph @relationship(type: "SERVICE_HELD_ON", direction: OUT)
  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  attendance: Int
  income: Float
  cash: Float
  onlineGiving: Float
  numberOfTithers: Int
  foreignCurrency: String
  familyPicture: String
  treasurerSelfie: String
  bankingSlip: String
  bankingSlipUploader: Member
    @relationship(type: "UPLOADED_SLIP_FOR", direction: IN)
  transactionId: ID #deprecated
  treasurers: [Member!]! @relationship(type: "WAS_TREASURER_FOR", direction: IN)
  serviceLog: ServiceLog! @relationship(type: "HAS_SERVICE", direction: IN)
  noServiceReason: String
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Fellowship OR church:Constituency OR church:Council OR church:Stream
      MATCH (church)<-[:HAS*1..4]-(stream:Stream)
      RETURN stream.name
      """
    )
  bankedBy: Member
    @cypher(
      statement: """
      MATCH (this)
      WHERE NOT  (this:NoService)
      MATCH (this)<-[:CONFIRMED_BANKING_FOR | :UPLOADED_SLIP_FOR | :OFFERING_BANKED_BY]-(member:Member)
      RETURN member
      """
    )
}

extend type Mutation {
  RecordHubFellowshipSundayAttendance(
    churchId: ID!
    serviceDate: String!
    attendance: Int!
    familyPicture: String!
  ): MinistryAttendanceRecord!

  RecordHubRehearsalService(
    churchId: ID!
    serviceDate: String!
    attendance: Int!
    income: Float!
    foreignCurrency: String
    numberOfTithers: Int
    treasurers: [ID]!
    treasurerSelfie: String!
    familyPicture: String!
  ): RehearsalRecord!

  RecordMinistryOnStageAttendance(
    churchId: ID!
    serviceDate: String!
    attendance: Int!
    onStagePictures: [String!]!
  ):MinistryStageAttendanceRecord

}

## DELETE OPERATIONS
extend type Mutation {
  CloseDownCreativeArts(
    creativeArtsId: ID!
    leaderId: ID!
    adminId: ID!
  ): Campus!
  CloseDownMinistry(ministryId: ID!, leaderId: ID!, adminId: ID!): CreativeArts!
  CloseDownHubCouncil(hubCouncilId: ID!, leaderId: ID!): Ministry!
  CloseDownHub(hubId: ID!, leaderId: ID!): HubCouncil!
}
