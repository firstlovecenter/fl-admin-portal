type Place {
  id: ID!
  name: String!
  typename: String
  firstName: String
  lastName: String
  latitude: Float!
  longitude: Float!
  # TODO: We must eventually switch from these to a location property object
  # Currently this code is breaking in neo4j/graphql
  location: Point!
  description: String
  picture: String
}

extend type Member {
  placesSearchByLocation(
    latitude: Float!
    longitude: Float!
    limit: Int = 30
  ): [Place!]!
  placesSearchByName(key: String!, limit: Int = 30): [Place!]!
}

interface Venue {
  id: ID
  createdAt: DateTime!
}

type IndoorVenue implements Venue{
  id: ID!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(stream:Stream)
      RETURN toLower(stream.name)
      """
    )
  createdAt: DateTime!

}

type OutdoorVenue implements Venue{
  id: ID!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(stream:Stream)
      RETURN toLower(stream.name)
      """
    )
  createdAt: DateTime!
}

type HostelVenue implements Venue{
  id: ID!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(stream:Stream)
      RETURN toLower(stream.name)
      """
    )
  createdAt: DateTime!
}

type HighSchoolVenue implements Venue{
  id: ID!
  stream_name: String
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(stream:Stream)
      RETURN toLower(stream.name)
      """
    )
  createdAt: DateTime!
}

extend type Mutation {
  CreateIndoorVenue(name: String!, capacity: Int!, longitude:Float!, latitude:Float!, streamId: ID!): IndoorVenue
    @auth(rules: [{roles: ["adminFellowship", "adminStream", "adminConstituency"]}])
    @cypher(
      statement: """
      CREATE (indoorVenue: IndoorVenue)
        SET indoorVenue.id = apoc.create.uuid()
        SET indoorVenue.name = $name

      WITH indoorVenue
      MATCH (stream:Stream {id: $streamId})
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH indoorVenue, stream, currentUser
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=0,
          log.historyRecord = 'New indoor venue' + indoorVenue.name + 'created for' + stream.name
      
      WITH indoorVenue, stream, currentUser, log
      MERGE (stream)-[:HAS]->(indoorVenue)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      RETURN indoorVenue
      """
    )

  CreateOutdoorVenue(name: String!, capacity: Int!, longitude:Float!, latitude:Float!, streamId: ID!): OutdoorVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      CREATE (outdoorVenue: OutdoorVenue)
        SET outdoorVenue.id = apoc.create.uuid()
        SET outdoorVenue.name = $name

      WITH outdoorVenue
      MATCH (stream:Stream {id: $streamId})
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH outdoorVenue, stream, currentUser
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=0,
          log.historyRecord = 'New outdoor venue' + outdoorVenue.name + 'created for' + stream.name
      
      WITH outdoorVenue, stream, currentUser, log
      MERGE (stream)-[:HAS]->(outdoorVenue)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      RETURN outdoorVenue
      """
    )

  CreateHostelVenue(name:String!, capacity:Int!, latitude:Float!, longitude:Float!, streamId:ID!): HostelVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      CREATE (hostelVenue: HostelVenue)
        SET hostelVenue.id = apoc.create.uuid()
        SET hostelVenue.name = $name 

      WITH hostelVenue, 
      MATCH (stream:Stream {id: $streamId})
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH hostelVenue, stream, currentUser 
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid()
          log.timestamp = datetime()
          log.priority = 0
          log.historyRecord = 'New hostel venue' + hostelVenue.name + 'added for' + stream.name + 'stream'

      WITH hostelVenue, stream, currentUser, log 
      MERGE (stream)-[:HAS]->(hostelVenue)
      
      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      RETURN hostelVenue
      """
    )
   CreateHighSchoolVenue(name:String!, capacity:Int!, latitude:Float!, longitude:Float!, streamId:ID!): HighSchoolVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      CREATE (highSchoolVenue: HighSchoolVenue)
        SET highSchoolVenue.id = apoc.create.uuid()
        SET highSchoolVenue.name = $name 

      WITH highSchoolVenue, 
      MATCH (stream:Stream {id: $streamId})
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH highSchoolVenue, stream, currentUser 
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid()
          log.timestamp = datetime()
          log.priority = 0
          log.historyRecord = 'New senior high school venue' + highSchoolVenue.name + 'added for' + stream.name + 'stream'

      WITH highSchoolVenue, stream, currentUser, log 
      MERGE (stream)-[:HAS]->(highSchoolVenue)
      
      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      RETURN highSchoolVenue
      """
    )
}

extend type Mutation {
  UpdateIndoorVenue(longitude: Float!, latitude:Float!, indoorVenueId: ID!, streamId: ID!): IndoorVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (indoorVenue: IndoorVenue {id: $indoorVenueId})
      SET indoorVenue.longitude = $longitude
          indoorVenue.latitude = $latitude 
      
      WITH indoorVenue
          CALL {
              WITH indoorVenue
              MATCH (stream:Stream {id:$streamId})
              OPTIONAL MATCH (stream)-[r:HAS]->(indoorVenue)
              DELETE r
              MERGE (stream)-[:HAS]->(indoorVenue)

              RETURN count(indoorVenue)
          }
      RETURN indoorVenue
      """
    )
  UpdateOutdoorVenue(longitude: Float!, latitude:Float!, outdoorVenueId: ID!, streamId: ID!): OutdoorVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (outdoorVenue: OutdoorVenue {id: $outdoorVenueId})
      SET outdoorVenue.longitude = $longitude
          outdoorVenue.latitude = $latitude 
      
      WITH outdoorVenue
          CALL {
              WITH outdoorVenue
              MATCH (stream:Stream {id:$streamId})
              OPTIONAL MATCH (stream)-[r:HAS]->(outdoorVenue)
              DELETE r
              MERGE (stream)-[:HAS]->(outdoorVenue)

              RETURN count(outdoorVenue)
          }
      RETURN outdoorVenue
      """
    )
  UpdateHostelVenue(longitude: Float!, latitude:Float!, hostelVenueId: ID!, streamId: ID!): HostelVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (hostelVenue: HostelVenue {id: $hostelVenueId})
      SET hostelVenue.longitude = $longitude
          hostelVenue.latitude = $latitude 
      
      WITH hostelVenue
          CALL {
              WITH hostelVenue
              MATCH (stream:Stream {id:$streamId})
              OPTIONAL MATCH (stream)-[r:HAS]->(hostelVenue)
              DELETE r
              MERGE (stream)-[:HAS]->(hostelVenue)

              RETURN count(hostelVenue)
          }
      RETURN hostelVenue
      """
    )
    UpdateHighSchoolVenue(longitude: Float!, latitude:Float!, highSchoolVenueId: ID!, streamId: ID!): HighSchoolVenue
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (highSchoolVenue: HighSchoolVenue {id: $highSchoolVenueId})
      SET highSchoolVenue.longitude = $longitude
          highSchoolVenue.latitude = $latitude 
      
      WITH highSchoolVenue
          CALL {
              WITH highSchoolVenue
              MATCH (stream:Stream {id:$streamId})
              OPTIONAL MATCH (stream)-[r:HAS]->(highSchoolVenue)
              DELETE r
              MERGE (stream)-[:HAS]->(highSchoolVenue)

              RETURN count(highSchoolVenue)
          }
      RETURN highSchoolVenue
      """
    )
}

extend type Mutation{
  CloseDownIndoorVenue(indoorVenueId: ID!): Stream
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (indoorVenue:IndoorVenue {id: $indoorVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (indoorVenue)<-[:HAS]-(stream:Stream)

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The indoor venue' + indoorVenue.name + 'for' + stream.name + 'has been removed'
      
      
      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      DETACH DELETE indoorVenue
      RETURN stream
      """
    )
  CloseDownOutdoorVenue(outdoorVenueId: ID!): Stream
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (outdoorVenue:OutdoorVenue {id: $outdoorVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (outdoorVenue)<-[:HAS]-(stream:Stream)

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The outdoor venue' + outdoorVenue.name + 'for' + stream.name + 'has been removed'
      
      
      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      DETACH DELETE outdoorVenue
      RETURN stream
      """
    )

  CloseDownHostelVenue(hostelVenueId: ID!): Stream
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (hostelVenue:HostelVenue {id: $hostelVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (hostelVenue)<-[:HAS]-(stream:Stream)

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The hostel venue' + hostelVenue.name + 'for' + stream.name + 'has been removed'
      
      
      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      DETACH DELETE hostelVenue
      RETURN stream
      """
    )
  CloseDownHighSchoolVenue(highSchoolVenueId: ID!): Stream
    @auth(rules: [{roles: ["adminStream"]}])
    @cypher(
      statement: """
      MATCH (highSchoolVenue:HighSchoolVenue {id: $highSchoolVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (highSchoolVenue)<-[:HAS]-(stream:Stream)

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The high school venue' + highSchoolVenue.name + 'for' + stream.name + 'has been removed'
      
      
      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      DETACH DELETE highSchoolVenue
      RETURN stream

      """
    )
}