interface MapLocation {
  id: ID!
  name: String!
  location: Point!
}

type Place implements MapLocation {
  id: ID!
  name: String!
  firstName: String
  lastName: String
  latitude: Float!
  longitude: Float!
  # TODO: We must eventually switch from these to a location property object
  # Currently this code is breaking in neo4j/graphql
  location: Point!
  description: String
  picture: String
}

extend type Member {
  placesSearchByLocation(
    latitude: Float!
    longitude: Float!
    limit: Int = 30
  ): [Place!]!
  placesSearchByName(key: String!, limit: Int = 30): [Place!]!
}

type IndoorVenue implements MapLocation {
  id: ID!
  name: String!
  location: Point!
  capacity: Int!
}

type OutdoorVenue implements MapLocation {
  id: ID!
  name: String!
  location: Point!
  capacity: Int!
}

type Hostel implements MapLocation {
  id: ID!
  name: String!
  location: Point!
  capacity: Int!
  school: String!
  university: String! @cypher(statement: "MATCH (this) RETURN this.school")
}

type HighSchool implements MapLocation {
  id: ID!
  name: String!
  location: Point!
  capacity: Int!
  school: String!
}

extend type Mutation {
  CreateIndoorVenue(
    name: String!
    capacity: Int!
    longitude: Float!
    latitude: Float!
  ): IndoorVenue!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      CREATE (indoorVenue:IndoorVenue:OutreachVenue)
        SET indoorVenue.id = apoc.create.uuid(),
         indoorVenue.name = $name,
         indoorVenue.capacity = $capacity,
         indoorVenue.location = point({latitude: $latitude, longitude:$longitude})

      WITH indoorVenue
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH indoorVenue, currentUser
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=0,
          log.historyRecord = 'New Indoor Venue ' + indoorVenue.name + ' Created'

      WITH indoorVenue, currentUser, log

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)

      RETURN indoorVenue
      """
    )

  CreateOutdoorVenue(
    name: String!
    capacity: Int!
    longitude: Float!
    latitude: Float!
  ): OutdoorVenue!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      CREATE (outdoorVenue:OutdoorVenue:OutreachVenue)
        SET outdoorVenue.id = apoc.create.uuid()
        SET outdoorVenue.name = $name
        SET outdoorVenue.capacity = $capacity
        SET outdoorVenue.location = point({latitude: $latitude, longitude:$longitude})


      WITH outdoorVenue
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH outdoorVenue, currentUser
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.priority=0,
          log.historyRecord = 'New outdoor venue ' + outdoorVenue.name + ' created'

      WITH outdoorVenue, currentUser, log

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)

      RETURN outdoorVenue
      """
    )

  CreateHostel(
    name: String!
    capacity: Int!
    latitude: Float!
    longitude: Float!
    school: String!
  ): Hostel!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      CREATE (hostel:Hostel)
        SET hostel.id = apoc.create.uuid()
        SET hostel.name = $name
        SET hostel.capacity = $capacity
        SET hostel.location = point({latitude: $latitude, longitude:$longitude})
        SET hostel.school = $school

      WITH hostel,
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH hostel, currentUser
      CREATE (log:HistoryLog {id: apoc.create.uuid()})
         SET log.timestamp = datetime()
         SET log.priority = 0
         SET log.historyRecord = 'New hostel venue' + hostel.name + 'added'

      WITH hostel, currentUser, log

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)

      RETURN hostel
      """
    )
  CreateHighSchool(
    name: String!
    capacity: Int!
    latitude: Float!
    longitude: Float!
    school: String!
  ): HighSchool!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      CREATE (highSchool:HighSchool)
        SET highSchool.id = apoc.create.uuid()
        SET highSchool.name = $name
        SET highSchool.capacity = $capacity
        SET highSchool.location = point({latitude: $latitude, longitude:$longitude})
        SET highSchool.school = $school

      WITH highSchool,
      MATCH (currentUser:Active:Member {auth_id: $auth.jwt.sub})

      WITH highSchool, currentUser
      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid()
        SET log.timestamp = datetime()
        SET log.priority = 0
        SET log.historyRecord = 'New senior high school venue' + highSchool.name + 'added'

      WITH highSchool, currentUser, log

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)

      RETURN highSchool
      """
    )
}

extend type Mutation {
  UpdateIndoorVenue(
    longitude: Float!
    latitude: Float!
    indoorVenueId: ID!
    capacity: Int!
    name: String!
  ): IndoorVenue!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (indoorVenue:IndoorVenue:OutreachVenue {id: $indoorVenueId})
      SET indoorVenue.location = point({latitude:$latitude, longitude:$longitude})
      SET indoorVenue.name = $name
      SET indoorVenue.capacity = $capacity

      RETURN indoorVenue
      """
    )
  UpdateOutdoorVenue(
    longitude: Float!
    latitude: Float!
    outdoorVenueId: ID!
    capacity: Int!
    name: String!
  ): OutdoorVenue!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (outdoorVenue:OutdoorVenue:OutreachVenue {id: $outdoorVenueId})
      SET outdoorVenue.location = point({latitude:$latitude, longitude:$longitude})
      SET outdoorVenue.name = $name
      SET outdoorVenue.capacity = $capacity

      RETURN outdoorVenue
      """
    )
  UpdateHostel(
    longitude: Float!
    latitude: Float!
    hostelId: ID!
    name: String!
    capacity: Int!
    university: String!
  ): Hostel!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (hostel:Hostel {id: $hostelId})
      SET hostel.location = point({latitude:$latitude, longitude:$longitude}),
          hostel.name = $name,
          hostel.capacity = $capacity,
          hostel.university = $university

      RETURN hostel
      """
    )
  UpdateHighSchool(
    longitude: Float!
    latitude: Float!
    highSchoolId: ID!
    name: String!
    capacity: Int!
  ): HighSchool!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (highSchool:HighSchool {id: $highSchoolId})
      SET highSchool.location = point({latitude:$latitude, longitude:$longitude})
          highSchool.name = $name
          highSchool.capacity = $capacity,


      RETURN highSchool
      """
    )
}

extend type Mutation {
  CloseDownIndoorVenue(indoorVenueId: ID!): Boolean!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (indoorVenue:IndoorVenue:OutreachVenue {id: $indoorVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})

      WITH indoorVenue, admin
      CREATE (log:HistoryLog)
       SET log.id = apoc.create.uuid()
        SET log.timestamp = datetime()
        SET log.priority = 0
        SET log.historyRecord = 'The indoor venue' + indoorVenue.name + 'has been deleted'

      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)

      DETACH DELETE indoorVenue
      RETURN true
      """
    )
  CloseDownOutdoorVenue(outdoorVenueId: ID!): Boolean!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (outdoorVenue:OutdoorVenue:OutreachVenue {id: $outdoorVenueId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})

      CREATE (log:HistoryLog)
        SET log.id = apoc.create.uuid()
            log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The outdoor venue' + outdoorVenue.name + 'has been deleted'

      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)

      DETACH DELETE outdoorVenue
      RETURN true
      """
    )

  CloseDownHostel(hostelId: ID!): Boolean!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (hostel:Hostel {id: $hostelId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The hostel venue' + hostel.name + 'has been deleted'


      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)

      DETACH DELETE hostel
      RETURN true
      """
    )
  CloseDownHighSchool(highSchoolId: ID!): Boolean!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (highSchool:HighSchool {id: $highSchoolId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})

      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.timestamp = datetime()
            log.priority = 0
            log.historyRecord = 'The high school venue' + highSchool.name + 'has been deleted'


      MERGE (date:Timegraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)

      DETACH DELETE highSchool
      RETURN true
      """
    )
}
