extend type Mutation {
  #resolver Mutations
  MakeGatheringServiceAdmin(
    adminId: ID!
    oldAdminId: ID!
    gatheringServiceId: ID!
  ): Member
  RemoveGatheringServiceAdmin(
    adminId: ID!
    newAdminId: ID
    gatheringServiceId: ID!
  ): Member
  MakeStreamAdmin(adminId: ID!, oldAdminId: ID!, streamId: ID!): Member
  RemoveStreamAdmin(adminId: ID!, newAdminId: ID, streamId: ID!): Member
  MakeCouncilAdmin(adminId: ID!, oldAdminId: ID, councilId: ID!): Member
  RemoveCouncilAdmin(adminId: ID!, newAdminId: ID!, councilId: ID!): Member
  MakeConstituencyAdmin(
    adminId: ID!
    oldAdminId: ID
    constituencyId: ID!
  ): Member
  RemoveConstituencyAdmin(
    adminId: ID!
    newAdminId: ID!
    constituencyId: ID!
  ): Member

  #Pastoral Roles
  MakeFellowshipLeader(
    leaderId: ID!
    fellowshipId: ID!
    oldLeaderId: ID
  ): Member
  RemoveFellowshipLeader(
    leaderId: ID!
    newLeaderId: ID!
    fellowshipId: ID!
  ): Member
  MakeBacentaLeader(leaderId: ID!, bacentaId: ID!, oldLeaderId: ID): Member
  RemoveBacentaLeader(leaderId: ID!, newLeaderId: ID!, bacentaId: ID!): Member
  MakeSontaLeader(leaderId: ID!, sontaId: ID!, oldLeaderId: ID): Member
  RemoveSontaLeader(leaderId: ID!, newLeaderId: ID!, sontaId: ID!): Member
  MakeConstituencyLeader(
    leaderId: ID!
    constituencyId: ID!
    oldLeaderId: ID
  ): Member
  RemoveConstituencyLeader(
    leaderId: ID!
    newLeaderId: ID!
    constituencyId: ID!
  ): Member
  MakeCouncilLeader(leaderId: ID!, councilId: ID!, oldLeaderId: ID): Member
  RemoveCouncilLeader(leaderId: ID!, newLeaderId: ID!, councilId: ID!): Member
  MakeStreamLeader(leaderId: ID!, streamId: ID!, oldLeaderId: ID): Member
  RemoveStreamLeader(leaderId: ID!, newLeaderId: ID!, streamId: ID!): Member
  MakeGatheringServiceLeader(
    leaderId: ID!
    gatheringServiceId: ID!
    oldLeaderId: ID
  ): Member
  RemoveGatheringServiceLeader(
    leaderId: ID!
    newLeaderId: ID!
    gatheringServiceId: ID!
  ): Member
}

#### GO ON VACATION AND COME BACK ###
extend type Mutation {
  #Set Fellowship to be 'OnVacation
  SetVacationFellowship(fellowshipId: ID!): Fellowship
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id:$fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship went on vacation mode'

      WITH log,fellowship
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[:HAS]-(bacenta:Bacenta)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET fellowship:Vacation
      REMOVE fellowship:Active

      RETURN fellowship
      """
    )
  #Set Bacenta to be 'OnVacation
  SetVacationBacenta(bacentaId: ID!): Bacenta
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id:$bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bacenta went on vacation mode'

      WITH log,bacenta
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (bacenta)<-[:HAS]-(constituency:Constituency)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)
      MERGE (constituency)-[:HAS_HISTORY]->(log)

      SET bacenta:Vacation
      REMOVE bacenta:Active

      RETURN bacenta
      """
    )

  #Set Fellowship to be 'Active
  SetActiveFellowship(fellowshipId: ID!): Fellowship
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id:$fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship was made active again'

      WITH log,fellowship
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[:HAS]-(bacenta:Bacenta)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET fellowship:Active:Fellowship
      REMOVE fellowship:Vacation

      RETURN fellowship
      """
    )

  #Set Bacenta to be 'Active
  SetActiveBacenta(bacentaId: ID!): Bacenta
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id:$bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bacenta was made active again'

      WITH log,bacenta
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (bacenta)<-[:HAS]-(constituency:Constituency)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)
      MERGE (constituency)-[:HAS_HISTORY]->(log)

      SET bacenta:Active:Bacenta
      REMOVE bacenta:Vacation

      RETURN bacenta
      """
    )
}

# CREATE OPERATIONS
extend type Mutation {
  CreateMember(
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    phoneNumber: String!
    whatsappNumber: String!
    dob: String!
    maritalStatus: String!
    gender: String!
    occupation: String
    location: String!
    fellowship: String!
    ministry: String
    pictureUrl: String!
  ): Member

  CreateStream(name: String!, leaderId: ID!, gatheringServiceId: ID!): Stream
    @auth(rules: [{ roles: ["adminGatheringService"] }])
    @cypher(
      statement: """
      CREATE (stream:Stream {id:apoc.create.uuid(), name:$name})

      WITH stream
      MATCH (leader:Active:Member {id: $leaderId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (gatheringService:GatheringService {id: $gatheringServiceId})


       CREATE (log:HistoryLog:ServiceLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord =  $name +' Stream History Begins'

      MERGE (gatheringService)-[:HAS]->(stream)
      MERGE (leader)-[:LEADS]->(stream)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (gatheringService)-[r2:HAS_HISTORY]->(log)
      MERGE (leader)-[r3:HAS_HISTORY]->(log)
        SET r2.current = true,
        r3.current = true


      RETURN stream
      """
    )

  CreateGatheringService(
    name: String!
    leaderId: ID!
    oversightId: ID!
  ): GatheringService
    @auth(rules: [{ roles: ["adminOversight"] }])
    @cypher(
      statement: """
      CREATE (gatheringService:GatheringService {id:apoc.create.uuid(), name:$name})

      WITH gatheringService
      MATCH (leader:Active:Member {id: $leaderId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (oversight:Oversight {id: $oversightId})


       CREATE (log:HistoryLog:ServiceLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord =  $name +' Gathering Service History Begins'

      MERGE (oversight)-[:HAS]->(gatheringService)
      MERGE (leader)-[:LEADS]->(gatheringService)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (gatheringService)-[:HAS_HISTORY]->(log)
      MERGE (oversight)-[r2:HAS_HISTORY]->(log)
      MERGE (leader)-[r3:HAS_HISTORY]->(log)
        SET r2.current = true,
        r3.current = true


      RETURN gatheringService
      """
    )

  CreateCouncil(name: String!, leaderId: ID!, streamId: ID!): Council
    @auth(rules: [{ roles: ["adminGatheringService", "adminStream"] }])
    @cypher(
      statement: """
       CREATE (council:Council {id:apoc.create.uuid(), name:$name})

      WITH council
      MATCH (leader:Active:Member {id: $leaderId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (stream:Stream {id: $streamId})


       CREATE (log:HistoryLog:ServiceLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $name +' Council History Begins'

      MERGE (stream)-[:HAS]->(council)
      MERGE (leader)-[:LEADS]->(council)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (council)-[r1:HAS_HISTORY]->(log)
      MERGE (stream)-[r2:HAS_HISTORY]->(log)
      MERGE (leader)-[r3:HAS_HISTORY]->(log)
        SET r1.current = true,
        r2.current = true,
        r3.current = true


      RETURN council
      """
    )

  CreateConstituency(
    name: String!
    leaderId: ID!
    councilId: ID!
  ): Constituency
    @auth(
      rules: [
        { roles: ["adminGatheringService", "adminStream", "adminCouncil"] }
      ]
    )
    @cypher(
      statement: """
       CREATE (constituency:Constituency {name:$name})
         	SET
      	constituency.id = apoc.create.uuid(),
        constituency.sprinterCost = 0,
        constituency.urvanCost = 0
      WITH constituency
      MATCH (leader:Active:Member {id: $leaderId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (council:Council {id: $councilId})

       CREATE (log:HistoryLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $name +' Constituency History Begins'

      MERGE (council)-[:HAS]->(constituency)
      MERGE (leader)-[:LEADS]->(constituency)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (council)-[r1:HAS_HISTORY]->(log)
      MERGE (constituency)-[r2:HAS_HISTORY]->(log)
      MERGE (leader)-[r3:HAS_HISTORY]->(log)
        SET r1.current = true,
        r2.current = true,
        r3.current = true

      RETURN constituency
      """
    )

  CreateBacenta(name: String!, constituencyId: ID!, leaderId: ID!): Bacenta  #Return constituency and drill down to get bacenta info
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      CREATE (bacenta:Bacenta:IC:Active {name:$name})
        SET	bacenta.id = apoc.create.uuid()

      WITH bacenta
       MATCH (leader:Active:Member {id:$leaderId})
       MATCH (constituency:Constituency {id:$constituencyId})
       MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
        SET bacenta.sprinterCost = constituency.sprinterCost,
        bacenta.urvanCost = constituency.urvanCost


      CREATE (log:HistoryLog:ServiceLog)
      SET log.id = apoc.create.uuid(),
       log.timeStamp = datetime(),
       log.historyRecord = bacenta.name +' Bacenta History Begins'

       MERGE (constituency)-[:HAS]->(bacenta)
       MERGE (leader)-[:LEADS]->(bacenta)

       MERGE (date:TimeGraph {date: date()})
       MERGE (log)-[:LOGGED_BY]->(currentUser)
       MERGE (log)-[:RECORDED_ON]->(date)
       MERGE (constituency)-[r1:HAS_HISTORY]->(log)

       WITH bacenta
       MATCH (lastCode:LastBacentaCode)
       SET
        bacenta.code = lastCode.number + 1,
        lastCode.number = bacenta.code


      RETURN bacenta
      """
    )
 
  CreateFellowship(
    name: String!
    bacentaId: ID!
    leaderId: ID!
    meetingDay: String!
    venueLongitude: Float
    venueLatitude: Float
  ): Fellowship
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (lastCode:LastBankingCode)
      CREATE (fellowship:Fellowship:Active {name:$name,location: point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})})
         	SET
      	fellowship.id = apoc.create.uuid(),
        fellowship.bankingCode = lastCode.number + 1,
        lastCode.number = fellowship.bankingCode


      WITH fellowship
      MATCH (bacenta:Bacenta {id: $bacentaId})
      MATCH (leader:Active:Member {id:$leaderId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (meetingDay:ServiceDay {day: $meetingDay})

      MERGE (bacenta)-[:HAS]->(fellowship)
      MERGE (leader)-[:LEADS]->(fellowship)
      MERGE (fellowship)-[:MEETS_ON]->(meetingDay)

      RETURN fellowship
      """
    )
  
}

### UPDATE OPERATIONS ###
extend type Mutation {
  UpdateMemberEmail(id: ID!, email: String!): Member
  UpdateMemberFellowship(memberId: ID!, fellowshipId: ID!): Member
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $memberId})
      MATCH (fellowship:Fellowship {id: $fellowshipId})

      OPTIONAL MATCH (member)-[previous:BELONGS_TO]-> (:Fellowship)
      DELETE previous
      MERGE (member)-[:BELONGS_TO]-> (fellowship)
      RETURN member
      """
    )

  UpdateMemberMinistry(memberId: ID!, ministryId: ID!): Member
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $memberId})
      OPTIONAL MATCH (member)-[previous:BELONGS_TO]->(:Ministry)
      DELETE previous

      WITH member
      CALL {
      	WITH member
      	WITH member  WHERE $ministryId <> 'None'
        MATCH (ministry:Ministry {id: $ministryId})
        MERGE (member)-[:BELONGS_TO]->(ministry)

        RETURN count(member)
        }

      RETURN member
      """
    )

  UpdateMemberDetails(
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    phoneNumber: String!
    whatsappNumber: String
    dob: String
    maritalStatus: String!
    gender: String!
    occupation: String
    fellowship: String!
    ministry: String
    pictureUrl: String!
  ): Member
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "leaderFellowship"
            "leaderBacenta"
            "leaderConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (member:Active:Member {id:$id})
      SET
      	member.firstName = $firstName,
      	member.middleName = $middleName,
      	member.lastName = $lastName,
      	member.phoneNumber = $phoneNumber,
        member.whatsappNumber = $whatsappNumber,
      	member.pictureUrl = $pictureUrl

       CREATE (log:HistoryLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $firstName +' ' +$lastName+' Details were updated'

      WITH member, log
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (gender:Gender {gender: $gender})
      OPTIONAL MATCH (member)-[gen_rel:HAS_GENDER]-> ()
      DELETE gen_rel
      MERGE (member)-[:HAS_GENDER]-> (gender)
      MERGE (member)-[:HAS_HISTORY]->(log)
      MERGE (today:TimeGraph {date: date()})
      MERGE (log)-[:RECORDED_ON]->(today)
      MERGE (log)-[:LOGGED_BY]->(currentUser)


      WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $dob IS NOT NULL
         	MERGE (date:TimeGraph {date: date($dob)})
      	WITH member,date
      	OPTIONAL MATCH (member)-[r1:WAS_BORN_ON]->()
      	DELETE r1
      	MERGE (member)-[:WAS_BORN_ON]->(date)
         	RETURN count(member)
         	}

      WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $maritalStatus IS NOT NULL
         	MATCH (maritalStatus:MaritalStatus {status:$maritalStatus})
      	OPTIONAL MATCH (member)-[r1:HAS_MARITAL_STATUS]->()
      	DELETE r1
      	MERGE (member)-[:HAS_MARITAL_STATUS]-> (maritalStatus)
         	RETURN count(member)
         	}

         WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $occupation IS NOT NULL
      	OPTIONAL MATCH (member)-[r1:HAS_OCCUPATION]-> ()
        MERGE (occupation:Occupation {occupation:$occupation})
      	DELETE r1
      	MERGE (member)-[:HAS_OCCUPATION]-> (occupation)
         	RETURN count(member)
         	}

      RETURN member
      """
    )
  UpdateGatheringServiceDetails(
    gatheringServiceId: ID!
    name: String!
    oversightId: ID!
  ): GatheringService
    @auth(rules: [{ roles: ["adminOversight"] }])
    @cypher(
      statement: """
           MATCH (gatheringService:GatheringService {id: $gatheringServiceId})
           	SET gatheringService.name = $name

           WITH gatheringService
              CALL {
              	WITH gatheringService

                  MATCH (oversight:Oversight {id: $oversightId})
                  OPTIONAL MATCH (gatheringService)<-[r:HAS]-()
                  DELETE r
                  MERGE (oversight)-[:HAS]->(gatheringService)
              	RETURN count(gatheringService)
              	}
      MATCH (gatheringService)<-[:LEADS]-(leader:Active:Member)
      RETURN gatheringService
      """
    )
  UpdateStreamDetails(
    streamId: ID!
    name: String!
    gatheringServiceId: ID!
  ): Stream
    @auth(rules: [{ roles: ["adminGatheringService"] }])
    @cypher(
      statement: """
           MATCH (stream:Stream {id: $streamId})
           	SET stream.name = $name

           WITH stream
              CALL {
              	WITH stream

                  MATCH (gatheringService:GatheringService {id: $gatheringServiceId})
                  OPTIONAL MATCH (stream)<-[r:HAS]-()
                  DELETE r
                  MERGE (gatheringService)-[:HAS]->(stream)
              	RETURN count(stream)
              	}
      MATCH (stream)<-[:LEADS]-(leader:Active:Member)
      RETURN stream
      """
    )
  UpdateCouncilDetails(councilId: ID!, name: String!, streamId: ID!): Council
    @auth(rules: [{ roles: ["adminGatheringService", "adminStream"] }])
    @cypher(
      statement: """
           MATCH (council:Council {id: $councilId})
           	SET council.name = $name

           WITH council
              CALL {
              	WITH council

                  MATCH (stream:Stream {id: $streamId})
                  OPTIONAL MATCH (council)<-[r:HAS]-()
                  DELETE r
                  MERGE (stream)-[:HAS]->(council)
              	RETURN count(council)
              	}
      MATCH (council)<-[:LEADS]-(leader:Active:Member)
      RETURN council
      """
    )

  UpdateConstituencyDetails(
    constituencyId: ID!
    name: String!
    councilId: ID!
  ): Constituency
    @auth(
      rules: [
        { roles: ["adminGatheringService", "adminStream", "adminCouncil"] }
      ]
    )
    @cypher(
      statement: """
           MATCH (constituency:Constituency {id: $constituencyId})
           	SET constituency.name = $name

           WITH constituency
              CALL {
              	WITH constituency

                  MATCH (council:Council {id: $councilId})
                  OPTIONAL MATCH (constituency)<-[r:HAS]-()
                  DELETE r
                  MERGE (council)-[:HAS]->(constituency)
              	RETURN count(constituency)
              	}
      MATCH (constituency)<-[:LEADS]-(leader:Active:Member)
      RETURN constituency
      """
    )
  UpdateBacentaDetails(
    bacentaId: ID!
    name: String!
    constituencyId: ID!
  ): Bacenta
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})
      	SET bacenta.name = $name

      WITH bacenta
         CALL {
         	WITH bacenta
      		OPTIONAL MATCH (constituency:Constituency {id: $constituencyId})

            OPTIONAL MATCH (bacenta)<-[r:HAS]-()
            DELETE r
            MERGE (constituency)-[:HAS]->(bacenta)
         	RETURN count(bacenta)
         	}
      MATCH (bacenta)<-[:LEADS]-(leader:Active:Member)
      RETURN bacenta
      """
    )



  UpdateFellowshipDetails(
    id: ID!
    name: String!
    meetingDay: String
    venueLongitude: Float
    venueLatitude: Float
  ): Fellowship
    @auth(
      rules: [
        {
          roles: [
            "adminGatheringService"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "leaderFellowship"
          ]
        }
      ]
    )
    @cypher(
      statement: """
               MATCH (fellowship:Fellowship {id: $id})
               	SET fellowship.name = $name
              	SET fellowship.location = point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})

               WITH fellowship
                    CALL {
                     	WITH fellowship
                      WITH fellowship WHERE $meetingDay IS NOT NULL
                      MATCH (meetingDay:ServiceDay {day: $meetingDay})
                      OPTIONAL MATCH (fellowship)-[r:MEETS_ON]->()
                      DELETE r
                      MERGE (fellowship)-[:MEETS_ON]->(meetingDay)
                     	RETURN count(fellowship)
                     	}

      RETURN fellowship
      """
    )
}

### DELETE OPERATIONS (MAKE INACTIVE) ###
extend type Mutation {
  # In the context of church data we never delete, we only render inactive
  MakeMemberInactive(id: ID!, reason: String!): Member
  CloseDownFellowship(fellowshipId: ID!, leaderId: ID!): Bacenta
  CloseDownBacenta(bacentaId: ID!, leaderId: ID!): Constituency
  CloseDownConstituency(constituencyId: ID!, leaderId: ID!): Council

  CloseDownCouncil(councilId: ID!, leaderId: ID!): Stream
    @cypher(
      statement: """
      MATCH (council:Council {id:$councilId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (council)<-[:HAS]-(stream:Stream)
      OPTIONAL MATCH (council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = council.name + ' Council was closed down under ' + stream.name +' Stream'


      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (stream)-[:HAS_HISTORY]->(log)

      SET council:ClosedCouncil, constituencies:ClosedConstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship
      REMOVE council:Council,constituencies:Constituency,bacentas:Bacenta, fellowships:Fellowship

      RETURN stream
      """
    )
  CloseDownStream(streamId: ID!): GatheringService
    @cypher(
      statement: """
      MATCH (stream:Stream {id:$streamId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (stream)<-[:HAS]-(gatheringService:GatheringService)
      OPTIONAL MATCH (stream)-[:HAS]->(council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = stream.name + ' Stream was closed down under ' + gatheringService.name +' Gathering Service'


      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (gatheringService)-[:HAS_HISTORY]->(log)

      SET stream:ClosedStream, council:ClosedCouncil, constituencies:Closedconstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship
      REMOVE stream:Stream, council:Council, constituencies:Constituency,bacentas:Bacenta,fellowships:Fellowship

      RETURN gatheringService
      """
    )

  CloseDownGatheringService(gatheringServiceId: ID!): Oversight
    @cypher(
      statement: """
      MATCH (gatheringService:GatheringService {id:$gatheringServiceId})
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (gatheringService)<-[:HAS]-(oversight:Oversight)
      OPTIONAL MATCH (gatheringService)-[:HAS]->(stream)-[:HAS]->(council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = gatheringService.name + ' Gathering Service was closed down under ' + oversight.name +' Oversight'


      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (gatheringService)-[:HAS_HISTORY]->(log)
      MERGE (oversight)-[:HAS_HISTORY]->(log)

      SET gatheringService:ClosedGatheringService, stream:ClosedStream, council:ClosedCouncil, constituencies:Closedconstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship
      REMOVE gatheringService:ClosedGatheringService, stream:Stream, council:Council, constituencies:Constituency,bacentas:Bacenta,fellowships:Fellowship

      RETURN oversight
      """
    )
}
