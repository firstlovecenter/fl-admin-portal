extend type Mutation {
  #resolver Mutations
  MakeOversightAdmin(adminId: ID!, oversightId: ID!, oldAdminId: ID): Member
  RemoveOversightAdmin(adminId: ID!, newAdminId: ID!, oversightId: ID!): Member
  MakeCampusAdmin(adminId: ID!, oldAdminId: ID!, campusId: ID!): Member
  RemoveCampusAdmin(adminId: ID!, newAdminId: ID, campusId: ID!): Member
  MakeStreamAdmin(adminId: ID!, oldAdminId: ID!, streamId: ID!): Member
  RemoveStreamAdmin(adminId: ID!, newAdminId: ID, streamId: ID!): Member
  MakeCouncilAdmin(adminId: ID!, oldAdminId: ID, councilId: ID!): Member
  RemoveCouncilAdmin(adminId: ID!, newAdminId: ID!, councilId: ID!): Member
  MakeConstituencyAdmin(
    adminId: ID!
    oldAdminId: ID
    constituencyId: ID!
  ): Member
  RemoveConstituencyAdmin(
    adminId: ID!
    newAdminId: ID!
    constituencyId: ID!
  ): Member

  #Pastoral Roles
  MakeFellowshipLeader(
    leaderId: ID!
    fellowshipId: ID!
    oldLeaderId: ID
  ): Member
  RemoveFellowshipLeader(
    leaderId: ID!
    newLeaderId: ID!
    fellowshipId: ID!
  ): Member
  MakeBacentaLeader(leaderId: ID!, bacentaId: ID!, oldLeaderId: ID): Member
  RemoveBacentaLeader(leaderId: ID!, newLeaderId: ID!, bacentaId: ID!): Member
  MakeConstituencyLeader(
    leaderId: ID!
    constituencyId: ID!
    oldLeaderId: ID
  ): Member
  RemoveConstituencyLeader(
    leaderId: ID!
    newLeaderId: ID!
    constituencyId: ID!
  ): Member
  MakeCouncilLeader(leaderId: ID!, councilId: ID!, oldLeaderId: ID): Member
  RemoveCouncilLeader(leaderId: ID!, newLeaderId: ID!, councilId: ID!): Member
  MakeStreamLeader(leaderId: ID!, streamId: ID!, oldLeaderId: ID): Member
  RemoveStreamLeader(leaderId: ID!, newLeaderId: ID!, streamId: ID!): Member
  MakeCampusLeader(leaderId: ID!, campusId: ID!, oldLeaderId: ID): Member
  RemoveCampusLeader(leaderId: ID!, newLeaderId: ID!, campusId: ID!): Member
  MakeOversightLeader(leaderId: ID!, oversightId: ID!, oldLeaderId: ID): Member
  RemoveOversightLeader(
    leaderId: ID!
    newLeaderId: ID!
    oversightId: ID!
  ): Member
}

#### GO ON VACATION AND COME BACK ###
extend type Mutation {
  #Set Fellowship to be 'OnVacation
  SetVacationFellowship(fellowshipId: ID!): Fellowship!
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id:$fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship went on vacation mode'

      WITH log,fellowship
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[:HAS]-(bacenta:Bacenta)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET fellowship:Vacation
      REMOVE fellowship:Active, fellowship:Online

      RETURN fellowship
      """
    )
  #Set Bacenta to be 'OnVacation
  SetVacationBacenta(bacentaId: ID!): Bacenta!
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id:$bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bacenta went on vacation mode'

      WITH log,bacenta
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (bacenta)<-[:HAS]-(constituency:Constituency)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)
      MERGE (constituency)-[:HAS_HISTORY]->(log)

      SET bacenta:Vacation
      REMOVE bacenta:Active

      RETURN bacenta
      """
    )

  #Set Fellowship to be 'Active
  SetActiveFellowship(fellowshipId: ID!): Fellowship!
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id:$fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship was made active again'

      WITH log,fellowship
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[:HAS]-(bacenta:Bacenta)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET fellowship:Active:Fellowship
      REMOVE fellowship:Vacation, fellowship:Online

      RETURN fellowship
      """
    )

  # Set fellowship to be 'Online'
  SetOnlineFellowship(fellowshipId: ID!): Fellowship!
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id:$fellowshipId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = fellowship.name + ' Fellowship was made an online fellowship'

      WITH log,fellowship
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (fellowship)<-[:HAS]-(bacenta:Bacenta)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (fellowship)-[:HAS_HISTORY]->(log)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)

      SET fellowship:Online
      REMOVE fellowship:Active, fellowship:Vacation

      RETURN fellowship
      """
    )

  #Set Bacenta to be 'Active
  SetActiveBacenta(bacentaId: ID!): Bacenta
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id:$bacentaId})

      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = bacenta.name + ' Bacenta was made active again'

      WITH log,bacenta
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      MATCH (bacenta)<-[:HAS]-(constituency:Constituency)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (bacenta)-[:HAS_HISTORY]->(log)
      MERGE (constituency)-[:HAS_HISTORY]->(log)

      SET bacenta:Active:Bacenta
      REMOVE bacenta:Vacation

      RETURN bacenta
      """
    )
}

# CREATE OPERATIONS
extend type Mutation {
  CreateMember(
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    phoneNumber: String!
    whatsappNumber: String!
    dob: String!
    maritalStatus: String!
    gender: String!
    occupation: String
    visitationArea: String!
    fellowship: String!
    basonta: String
    pictureUrl: String!
  ): Member!

  CreateOversight(name: String!, leaderId: ID!, denominationId: ID!): Oversight
    @auth(rules: [{ roles: ["adminDenomination"] }])
    @cypher(
      statement: """
      CREATE (oversight:Oversight {id:apoc.create.uuid(), name:$name})


      WITH oversight
      MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (denomination:Denomination {id: $denominationId})


        CREATE (log:HistoryLog:ServiceLog)
          SET
          log.id =  apoc.create.uuid(),
          log.timeStamp = datetime(),
          log.historyRecord =  $name +' Oversight History Begins',
          log.priority = 2

      MERGE (denomination)-[:HAS]->(oversight)
      MERGE (leader)-[:LEADS]->(oversight)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (oversight)-[:HAS_HISTORY]->(log)
      MERGE (denomination)-[:HAS_HISTORY]->(log)
      MERGE (leader)-[:HAS_HISTORY]->(log)

      RETURN oversight
      """
    )

  CreateCampus(
    name: String!
    leaderId: ID!
    oversightId: ID!
    noIncomeTracking: Boolean!
    currency: String!
    conversionRateToDollar: Float!
  ): Campus
    @auth(rules: [{ roles: ["adminOversight", "adminDenomination"] }])
    @cypher(
      statement: """
      CREATE (campus:Campus {id:apoc.create.uuid(), name:$name})
        SET campus.noIncomeTracking = $noIncomeTracking,
        campus.currency = $currency,
        campus.conversionRateToDollar = $conversionRateToDollar

      WITH campus
      MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (oversight:Oversight {id: $oversightId})


       CREATE (log:HistoryLog:ServiceLog {priority: 3})
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord =  $name +' Campus History Begins'

      MERGE (oversight)-[:HAS]->(campus)
      MERGE (leader)-[:LEADS]->(campus)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (campus)-[:HAS_HISTORY]->(log)
      MERGE (oversight)-[:HAS_HISTORY]->(log)
      MERGE (leader)-[:HAS_HISTORY]->(log)

      RETURN campus
      """
    )

  CreateStream(
    name: String!
    leaderId: ID!
    campusId: ID!
    meetingDay: String!
    bankAccount: String!
  ): Stream
    @auth(rules: [{ roles: ["adminCampus", "adminOversight"] }])
    @cypher(
      statement: """
      CREATE (stream:Stream {id:apoc.create.uuid(), name: $name})
        SET stream.bankAccount = $bankAccount

       WITH stream
        CREATE (log:HistoryLog:ServiceLog)
         SET
         log.id =  apoc.create.uuid(),
         log.timeStamp = datetime(),
         log.historyRecord =  $name +' Stream History Begins',
         log.priority = 4

       WITH log, stream
       MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
       MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
       MATCH (campus:Campus {id: $campusId})
       MATCH (meetingDay:ServiceDay {day: $meetingDay})

       WITH log,stream,leader,currentUser, campus, meetingDay
       MERGE (campus)-[:HAS]->(stream)
       MERGE (stream)-[:MEETS_ON]->(meetingDay)
       MERGE (leader)-[:LEADS]->(stream)

       MERGE (date:TimeGraph {date: date()})
       MERGE (log)-[:LOGGED_BY]->(currentUser)
       MERGE (log)-[:RECORDED_ON]->(date)
       MERGE (stream)-[:HAS_HISTORY]->(log)
       MERGE (campus)-[:HAS_HISTORY]->(log)
       MERGE (leader)-[:HAS_HISTORY]->(log)

       RETURN stream
      """
    )

  CreateCouncil(name: String!, leaderId: ID!, streamId: ID!): Council
    @auth(rules: [{ roles: ["adminCampus", "adminStream"] }])
    @cypher(
      statement: """
       CREATE (council:Council {id:apoc.create.uuid(), name:$name})
        SET council.currentBalance  = 0.0,
          council.bussingPurseBalance = 0.0,
          council.hrAmount = 0.0,
          council.bussingAmount = 0.0

      WITH council
      MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (stream:Stream {id: $streamId})


       CREATE (log:HistoryLog:ServiceLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $name +' Council History Begins',
        log.priority = 5

      MERGE (stream)-[:HAS]->(council)
      MERGE (leader)-[:LEADS]->(council)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (council)-[:HAS_HISTORY]->(log)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (leader)-[:HAS_HISTORY]->(log)

      RETURN council
      """
    )

  CreateConstituency(
    name: String!
    leaderId: ID!
    councilId: ID!
  ): Constituency
    @auth(rules: [{ roles: ["adminCampus", "adminStream", "adminCouncil"] }])
    @cypher(
      statement: """
       CREATE (constituency:Constituency {name: $name})
         	SET	constituency.id = apoc.create.uuid()
      WITH constituency
       CREATE (log:HistoryLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $name +' Constituency History Begins',
        log.priority = 6
      WITH log, constituency
      MATCH (leader:Active:Member {id: $leaderId}) WHERE leader.email IS NOT NULL
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (council:Council {id: $councilId})


      MERGE (council)-[:HAS]->(constituency)
      MERGE (leader)-[:LEADS]->(constituency)

      MERGE (date:TimeGraph {date: date()})
      MERGE (log)-[:LOGGED_BY]->(currentUser)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (council)-[r1:HAS_HISTORY]->(log)
      MERGE (constituency)-[r2:HAS_HISTORY]->(log)
      MERGE (leader)-[r3:HAS_HISTORY]->(log)

      RETURN constituency
      """
    )

  CreateBacenta(name: String!, constituencyId: ID!, leaderId: ID!): Bacenta  #Return constituency and drill down to get bacenta info
    @auth(rules: [{ roles: ["adminCampus", "arrivalsAdminCampus"] }])
    @cypher(
      statement: """
      CREATE (bacenta:Bacenta:Graduated:Active {name:$name})
        SET	bacenta.id = apoc.create.uuid(),
        bacenta.sprinterTopUp = 0,
        bacenta.urvanTopUp = 0,
        bacenta.outbound = false

      WITH bacenta
       MATCH (leader:Active:Member {id:$leaderId}) WHERE leader.email IS NOT NULL
       MATCH (constituency:Constituency {id:$constituencyId})
       MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})


      CREATE (log:HistoryLog:ServiceLog)
      SET log.id = apoc.create.uuid(),
       log.timeStamp = datetime(),
       log.historyRecord = bacenta.name +' Bacenta History Begins',
       log.priority = 7

       MERGE (constituency)-[:HAS]->(bacenta)
       MERGE (leader)-[:LEADS]->(bacenta)

       MERGE (date:TimeGraph {date: date()})
       MERGE (log)-[:LOGGED_BY]->(currentUser)
       MERGE (log)-[:RECORDED_ON]->(date)
       MERGE (constituency)-[r1:HAS_HISTORY]->(log)

       WITH bacenta
       MATCH (lastCode:LastBacentaCode)
       SET
        bacenta.code = lastCode.number + 1,
        lastCode.number = bacenta.code


      RETURN bacenta
      """
    )

  CreateFellowship(
    name: String!
    bacentaId: ID!
    leaderId: ID!
    meetingDay: String!
    venueLongitude: Float
    venueLatitude: Float
  ): Fellowship
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (leader:Active:Member {id:$leaderId}) WHERE leader.email IS NOT NULL
      MATCH (lastCode:LastBankingCode)
      CREATE (fellowship:Fellowship:Active {name:$name,location: point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})})
         	SET
      	fellowship.id = apoc.create.uuid(),
        fellowship.bankingCode = lastCode.number + 1,
        lastCode.number = fellowship.bankingCode


      WITH fellowship, leader
      MATCH (bacenta:Bacenta {id: $bacentaId})
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (meetingDay:ServiceDay {day: $meetingDay})

      MERGE (bacenta)-[:HAS]->(fellowship)
      MERGE (leader)-[:LEADS]->(fellowship)
      MERGE (fellowship)-[:MEETS_ON]->(meetingDay)

      RETURN fellowship
      """
    )
}

### UPDATE OPERATIONS ###
extend type Mutation {
  UpdateMemberEmail(id: ID!, email: String!): Member
  UpdateMemberAppointmentDate(id: ID!, appointmentDate: String): Member!
    @auth(rules: [{ roles: ["adminDenomination"] }])
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $id})
      MATCH (pastor:Title {name: 'Pastor'})
      OPTIONAL MATCH (member)-[r:HAS_TITLE]->(pastor)
      DELETE r

      WITH member, pastor
      MERGE (member)-[:HAS_TITLE {date: $appointmentDate}]->(pastor)
      RETURN member
      """
    )
  UpdateMemberOrdinationDate(id: ID!, ordinationDate: String!): Member!
    @auth(rules: [{ roles: ["adminDenomination"] }])
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $id})
      MATCH (reverend:Title {name: 'Reverend'})
      OPTIONAL MATCH (member)-[r:HAS_TITLE]->(reverend)
      DELETE r

      WITH member, reverend
      MERGE (member)-[:HAS_TITLE {date: $ordinationDate}]->(reverend)
      RETURN member
      """
    )
  UpdateMemberConsecrationDate(id: ID!, consecrationDate: String!): Member!
    @auth(rules: [{ roles: ["adminDenomination"] }])
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $id})
      MATCH (bishop:Title {name: 'Bishop'})
      OPTIONAL MATCH (member)-[r:HAS_TITLE]->(bishop)
      DELETE r

      WITH member,bishop
      MERGE (member)-[:HAS_TITLE {date: $consecrationDate}]->(bishop)
      RETURN member
      """
    )
  UpdateMemberFellowship(memberId: ID!, fellowshipId: ID!): Member
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $memberId})
      MATCH (fellowship:Fellowship {id: $fellowshipId})

      OPTIONAL MATCH (member)-[previous:BELONGS_TO]-> (:Fellowship)
      DELETE previous
      MERGE (member)-[:BELONGS_TO]-> (fellowship)
      RETURN member
      """
    )

  UpdateMemberBasonta(memberId: ID!, basontaId: ID!): Member
    @cypher(
      statement: """
      MATCH (member:Active:Member {id: $memberId})
      OPTIONAL MATCH (member)-[previous:BELONGS_TO]->(:Basonta)
      DELETE previous

      WITH member
      CALL {
      	WITH member
      	WITH member  WHERE $basontaId <> 'None'
        MATCH (ministry:Basonta {id: $basontaId})
        MERGE (member)-[:BELONGS_TO]->(ministry)

        RETURN count(member)
        }

      RETURN member
      """
    )

  UpdateMemberDetails(
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    phoneNumber: String!
    whatsappNumber: String
    dob: String
    maritalStatus: String!
    gender: String!
    occupation: String
    fellowship: String!
    ministry: String
    pictureUrl: String!
  ): Member
    @auth(
      rules: [
        {
          roles: [
            "adminOversight"
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "leaderFellowship"
            "leaderBacenta"
            "leaderConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (member:Active:Member {id:$id})
      SET
      	member.firstName = $firstName,
      	member.middleName = $middleName,
      	member.lastName = $lastName,
      	member.phoneNumber = $phoneNumber,
        member.whatsappNumber = $whatsappNumber,
      	member.pictureUrl = $pictureUrl

       CREATE (log:HistoryLog)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = datetime(),
        log.historyRecord = $firstName +' ' +$lastName+' Details were updated'

      WITH member, log
      MATCH (currentUser:Active:Member {auth_id:$auth.jwt.sub})
      MATCH (gender:Gender {gender: $gender})
      OPTIONAL MATCH (member)-[gen_rel:HAS_GENDER]-> ()
      DELETE gen_rel
      MERGE (member)-[:HAS_GENDER]-> (gender)
      MERGE (member)-[:HAS_HISTORY]->(log)
      MERGE (today:TimeGraph {date: date()})
      MERGE (log)-[:RECORDED_ON]->(today)
      MERGE (log)-[:LOGGED_BY]->(currentUser)


      WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $dob IS NOT NULL
         	MERGE (date:TimeGraph {date: date($dob)})
      	WITH member,date
      	OPTIONAL MATCH (member)-[r1:WAS_BORN_ON]->()
      	DELETE r1
      	MERGE (member)-[:WAS_BORN_ON]->(date)
         	RETURN count(member)
         	}

      WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $maritalStatus IS NOT NULL
         	MATCH (maritalStatus:MaritalStatus {status:$maritalStatus})
      	OPTIONAL MATCH (member)-[r1:HAS_MARITAL_STATUS]->()
      	DELETE r1
      	MERGE (member)-[:HAS_MARITAL_STATUS]-> (maritalStatus)
         	RETURN count(member)
         	}

         WITH member
         CALL {
         	WITH member
         	WITH member  WHERE $occupation IS NOT NULL
      	OPTIONAL MATCH (member)-[r1:HAS_OCCUPATION]-> ()
        MERGE (occupation:Occupation {occupation:$occupation})
      	DELETE r1
      	MERGE (member)-[:HAS_OCCUPATION]-> (occupation)
         	RETURN count(member)
         	}

      RETURN member
      """
    )

  UpdateOversightDetails(oversightId: ID!, name: String!): Oversight!
    @auth(rules: [{ roles: ["adminDenomination"] }])
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})
      	SET oversight.name = $name

      MATCH (oversight)<-[:LEADS]-(leader:Active:Member)
      RETURN oversight
      """
    )

  UpdateCampusDetails(
    campusId: ID!
    name: String!
    noIncomeTracking: Boolean!
    currency: String!
    conversionRateToDollar: Float!
  ): Campus
    @auth(rules: [{ roles: ["adminOversight"] }])
    @cypher(
      statement: """
           MATCH (campus:Campus {id: $campusId})
           	SET campus.name = $name,
            campus.noIncomeTracking = $noIncomeTracking,
            campus.currency = $currency,
            campus.conversionRateToDollar = $conversionRateToDollar

      MATCH (campus)<-[:LEADS]-(leader:Active:Member)
      RETURN campus
      """
    )
  UpdateStreamDetails(
    streamId: ID!
    name: String!
    bankAccount: String!
    meetingDay: String!
  ): Stream
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      yd           MATCH (stream:Stream {id: $streamId})
           	SET stream.name = $name,
            stream.bankAccount = $bankAccount

            WITH stream
                    CALL {
                     	WITH stream
                      WITH  stream WHERE $meetingDay IS NOT NULL
                      MATCH (meetingDay:ServiceDay {day: $meetingDay})
                      OPTIONAL MATCH (stream)-[r:MEETS_ON]->()
                      DELETE r
                      MERGE (stream)-[:MEETS_ON]->(meetingDay)
                     	RETURN count(stream)
                     	}

      RETURN stream
      """
    )
  UpdateCouncilDetails(councilId: ID!, name: String!): Council
    @auth(rules: [{ roles: ["adminCampus", "adminStream"] }])
    @cypher(
      statement: """
           MATCH (council:Council {id: $councilId})
           	SET council.name = $name

      RETURN council
      """
    )

  UpdateConstituencyDetails(constituencyId: ID!, name: String!): Constituency
    @auth(rules: [{ roles: ["adminCampus", "adminStream", "adminCouncil"] }])
    @cypher(
      statement: """
           MATCH (constituency:Constituency {id: $constituencyId})
           	SET constituency.name = $name

      RETURN constituency
      """
    )
  UpdateBacentaDetails(bacentaId: ID!, name: String!): Bacenta
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "arrivalsAdminConstituency"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})
      	SET bacenta.name = $name

      RETURN bacenta
      """
    )

  UpdateFellowshipDetails(
    id: ID!
    name: String!
    meetingDay: String
    venueLongitude: Float
    venueLatitude: Float
  ): Fellowship
    @auth(
      rules: [
        {
          roles: [
            "adminCampus"
            "adminStream"
            "adminCouncil"
            "adminConstituency"
            "leaderFellowship"
          ]
        }
      ]
    )
    @cypher(
      statement: """
               MATCH (fellowship:Fellowship {id: $id})
               	SET fellowship.name = $name
              	SET fellowship.location = point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})

               WITH fellowship
                    CALL {
                     	WITH fellowship
                      WITH fellowship WHERE $meetingDay IS NOT NULL
                      MATCH (meetingDay:ServiceDay {day: $meetingDay})
                      OPTIONAL MATCH (fellowship)-[r:MEETS_ON]->()
                      DELETE r
                      MERGE (fellowship)-[:MEETS_ON]->(meetingDay)
                     	RETURN count(fellowship)
                     	}

      RETURN fellowship
      """
    )
}

### DELETE OPERATIONS (MAKE INACTIVE) ###
extend type Mutation {
  # In the context of church data we never delete, we only render inactive
  MakeMemberInactive(id: ID!, reason: String!): Member
  CloseDownFellowship(fellowshipId: ID!, leaderId: ID!): Bacenta
  CloseDownBacenta(bacentaId: ID!, leaderId: ID!): Constituency
  CloseDownConstituency(
    constituencyId: ID!
    leaderId: ID!
    adminId: ID!
  ): Council

  MoveOversightToDenomination(
    oversightId: ID!
    denominationId: ID!
  ): Oversight!
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})
      MATCH (denomination:Denomination {id: $denominationId})
      OPTIONAL MATCH (oversight)<-[r:HAS]-(:Denomination)
      DELETE r

      MERGE (denomination)-[:HAS]->(oversight)
      RETURN oversight
      """
    )

  MoveCampusToOversight(campusId: ID!, oversightId: ID!): Campus!
    @cypher(
      statement: """
      MATCH (campus:Campus {id: $campusId})
      MATCH (oversight:Oversight {id: $oversightId})
      OPTIONAL MATCH (campus)<-[r:HAS]-(:Oversight)
      DELETE r

      MERGE (oversight)-[:HAS]->(campus)
      RETURN campus
      """
    )

  MoveStreamToCampus(streamId: ID!, campusId: ID!): Stream!
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})
      MATCH (campus:Campus {id: $campusId})
      OPTIONAL MATCH (stream)<-[r:HAS]-(:Campus)
      DELETE r

      MERGE (campus)-[:HAS]->(stream)
      RETURN stream
      """
    )

  MoveCouncilToStream(councilId: ID!, streamId: ID!): Council!
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})
      MATCH (stream:Stream {id: $streamId})
      OPTIONAL MATCH (council)<-[r:HAS]-(:Stream)
      DELETE r

      MERGE (stream)-[:HAS]->(council)
      RETURN council
      """
    )

  MoveConstituencyToCouncil(constituencyId: ID!, councilId: ID!): Constituency!
    @cypher(
      statement: """
      MATCH (constituency:Constituency {id: $constituencyId})
      MATCH (council:Council {id: $councilId})
      OPTIONAL MATCH (constituency)<-[r:HAS]-(:Council)
      DELETE r

      MERGE (council)-[:HAS]->(constituency)
      RETURN constituency
      """
    )
  MoveBacentaToConstituency(bacentaId: ID!, constituencyId: ID!): Bacenta!
    @cypher(
      statement: """
      MATCH (bacenta:Bacenta {id: $bacentaId})
      MATCH (constituency:Constituency {id: $constituencyId})
      OPTIONAL MATCH (bacenta)<-[r:HAS]-(:Constituency)
      DELETE r

      MERGE (constituency)-[:HAS]->(bacenta)
      RETURN bacenta
      """
    )

  MoveFellowshipToBacenta(fellowshipId: ID!, bacentaId: ID!): Fellowship!
    @cypher(
      statement: """
      MATCH (fellowship:Fellowship {id: $fellowshipId})
      MATCH (bacenta:Bacenta {id: $bacentaId})
      OPTIONAL MATCH (fellowship)<-[r:HAS]-(:Bacenta)
      DELETE r

      MERGE (bacenta)-[:HAS]->(fellowship)
      RETURN fellowship
      """
    )

  CloseDownCouncil(councilId: ID!, leaderId: ID!): Stream
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})<-[:HAS]-(stream:Stream)

      WITH council, stream
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = council.name + ' Council was closed down under ' + stream.name +' Stream'

      WITH council, stream, log
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      OPTIONAL MATCH (council)-[:HAS]->(constituencies:Constituency)-[:HAS]->(bacentas)-[:HAS]->(fellowships)
      OPTIONAL MATCH (council)-[:HAS]->(hubs:Hub)
      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (council)-[:HAS_HISTORY]->(log)

      SET council:ClosedCouncil, constituencies:ClosedConstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship, hubs:ClosedHub
      REMOVE council:Council,constituencies:Constituency,bacentas:Bacenta, fellowships:Fellowship, hubs:Hub

      RETURN stream
      """
    )
  CloseDownStream(streamId: ID!): Campus
    @cypher(
      statement: """
      MATCH (stream:Stream {id: $streamId})<-[:HAS]-(campus:Campus)

      WITH stream, campus
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = stream.name + ' Stream was closed down under ' + campus.name +' Campus'

      WITH stream, campus, log
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      OPTIONAL MATCH (stream)-[:HAS]->(council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)
      OPTIONAL MATCH (stream)-[:HAS]->(council)-[:HAS]->(hubs:Hub)

      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (stream)-[:HAS_HISTORY]->(log)
      MERGE (campus)-[:HAS_HISTORY]->(log)

      SET stream:ClosedStream, council:ClosedCouncil, constituencies:Closedconstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship, hubs:ClosedHub
      REMOVE stream:Stream, council:Council, constituencies:Constituency,bacentas:Bacenta,fellowships:Fellowship, hubs:Hub

      RETURN campus
      """
    )

  CloseDownCampus(campusId: ID!): Oversight
    @cypher(
      statement: """
      MATCH (campus:Campus {id: $campusId})<-[:HAS]-(oversight:Oversight)

      WITH campus, oversight
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = campus.name + ' Campus was closed down under ' + oversight.name +' Oversight'

      WITH campus, oversight, log
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      OPTIONAL MATCH (campus)-[:HAS]->(stream)-[:HAS]->(council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)
      OPTIONAL MATCH (campus)-[:HAS]->(stream)-[:HAS]->(council)-[:HAS]->(hubs:Hub)


      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (campus)-[:HAS_HISTORY]->(log)
      MERGE (oversight)-[:HAS_HISTORY]->(log)

      SET campus:ClosedCampus, stream:ClosedStream, council:ClosedCouncil, constituencies:Closedconstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship, hubs:ClosedHub
      REMOVE campus:ClosedCampus, stream:Stream, council:Council, constituencies:Constituency,bacentas:Bacenta,fellowships:Fellowship, hubs:Hub

      RETURN oversight
      """
    )

  CloseDownOversight(oversightId: ID!): Denomination!
    @cypher(
      statement: """
      MATCH (oversight:Oversight {id: $oversightId})<-[:HAS]-( denomination:Denomination)

      WITH oversight, denomination
      CREATE (log:HistoryLog {id:apoc.create.uuid()})
        SET log.timeStamp = datetime(),
        log.historyRecord = oversight.name + ' Oversight was closed down under ' +  denomination.name + ' Denomination'

      WITH oversight, denomination, log
      MATCH (admin:Active:Member {auth_id: $auth.jwt.sub})
      OPTIONAL MATCH (oversight)-[:HAS]->(campus)-[:HAS]->(stream)-[:HAS]->(council)-[:HAS]->(constituencies)-[:HAS]->(bacentas)-[:HAS]->(fellowships)


      MERGE (date:TimeGraph {date:date()})
      MERGE (log)-[:LOGGED_BY]->(admin)
      MERGE (log)-[:RECORDED_ON]->(date)
      MERGE (oversight)-[:HAS_HISTORY]->(log)
      MERGE (denomination)-[:HAS_HISTORY]->(log)

      SET oversight:ClosedOversight, stream:ClosedStream, council:ClosedCouncil, constituencies:Closedconstituency, bacentas:ClosedBacenta, fellowships:ClosedFellowship
      REMOVE oversight:Oversight, stream:Stream, council:Council, constituencies:Constituency,bacentas:Bacenta,fellowships:Fellowship

      RETURN denomination
      """
    )
}
