extend type ServiceLog {
  equpmentRecord: [EquipmentRecord!]!
    @relationship(type: "HAS_EQUIPMENT_RECORD", direction: OUT)
}

interface EquipmentRecord {
  offeringBags: Int
  bluetoothSpeakers: Int
}

type GovernorshipEquipment implements EquipmentRecord {
  id: ID
  pulpits: Int
  offeringBags: Int!
  bluetoothSpeakers: Int!
}

type AggregatedEquipment implements EquipmentRecord {
  pulpits: Int!
  offeringBags: Int!
  bluetoothSpeakers: Int!
}

type BacentaEquipment implements EquipmentRecord {
  offeringBags: Int!
  bluetoothSpeakers: Int!
}

type FellowshipEquipment implements EquipmentRecord {
  id: ID!
  offeringBags: Int!
  bluetoothSpeakers: Int!
  serviceLog: ServiceLog
    @relationship(type: "HAS_EQUIPMENT_RECORD", direction: IN)
  equipmentDate: TimeGraph!
    @relationship(type: "HAS_EQUIPMENT_DATE", direction: OUT)
  createdAt: DateTime!
}

extend type Campus {
  equipmentRecord: AggregatedEquipment!
  equipmentStartDate: Date
  equipmentEndDate: Date
  fellowshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
       MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  fellowshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
       MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
      RETURN DISTINCT fellowships
      """
    )

  fellowshipEquipmentNotFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL  MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacenta:Bacenta)<-[:HAS]-(governorship:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN DISTINCT defaulters
      """
    )

  fellowshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL  MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL  MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacenta:Bacenta)<-[:HAS]-(governorship:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN  COUNT(DISTINCT defaulters)
      """
    )

  governorshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT governorships)
      """
    )
  governorshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
      RETURN DISTINCT governorships
      """
    )

  governorshipEquipmentNotFilled: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN DISTINCT defaulters
      """
    )

  governorshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN COUNT(DISTINCT defaulters)
      """
    )
}

extend type Stream {
  equipmentRecord: AggregatedEquipment!
  fellowshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  fellowshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
      RETURN DISTINCT fellowships
      """
    )

  fellowshipEquipmentNotFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL  MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL  MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacenta:Bacenta)<-[:HAS]-(governorship:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN DISTINCT defaulters
      """
    )

  fellowshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacenta:Bacenta)<-[:HAS]-(governorship:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN COUNT(DISTINCT defaulters)
      """
    )

  governorshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT governorships)
      """
    )
  governorshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)
      RETURN DISTINCT governorships
      """
    )

  governorshipEquipmentNotFilled: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN DISTINCT defaulters
      """
    )

  governorshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
      OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(:Council)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN COUNT(DISTINCT defaulters)
      """
    )
}

extend type Council {
  equipmentRecord: AggregatedEquipment!
  fellowshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
      MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  fellowshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
       MATCH (n:EquipmentDate)
       WITH max(n.date) as latestEquipmentDate, this
       MATCH (date:EquipmentDate {date:latestEquipmentDate})
        MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
        WITH DISTINCT date, this, record
       MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
        WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(this)
       RETURN DISTINCT fellowships
      """
    )

  fellowshipEquipmentNotFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
        MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN DISTINCT defaulters
      """
    )

  fellowshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
        MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

        OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Governorship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN COUNT(DISTINCT defaulters)
      """
    )

  governorshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT governorships)
      """
    )
  governorshipEquipmentFilled: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)
       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(this)
      RETURN DISTINCT governorships
      """
    )

  governorshipEquipmentNotFilled: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

        OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN DISTINCT defaulters
      """
    )

  governorshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

        OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships:Governorship)

       WITH collect(DISTINCT governorships) as filled, this
       MATCH (defaulters:Governorship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

       RETURN COUNT(DISTINCT defaulters)
      """
    )
}

extend type Governorship {
  equipmentRecord: GovernorshipEquipment!
  fellowshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(bacentas:Bacenta)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  fellowshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(bacentas:Bacenta)<-[:HAS]-(this)
      RETURN DISTINCT fellowships
      """
    )

  fellowshipEquipmentNotFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
       MATCH (date:EquipmentDate {date:latestEquipmentDate})
       OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacentas:Bacenta)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN DISTINCT defaulters
      """
    )

  fellowshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
       MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
       MATCH (date:EquipmentDate {date:latestEquipmentDate})
       OPTIONAL MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

       OPTIONAL MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(bacentas:Bacenta)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN COUNT(DISTINCT defaulters)
      """
    )
}

extend type Bacenta {
  equipmentRecord: BacentaEquipment!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (this)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(latestEquipmentDate)})
      WITH DISTINCT record
      RETURN {
        offeringBags: toInteger(sum(record.offeringBags)),
        bluetoothSpeakers: toInteger(sum(record.bluetoothSpeakers))
      } as fellowshipEquipment
      """
    )

  fellowshipEquipmentFilledCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(this)
      RETURN COUNT(DISTINCT fellowships)
      """
    )
  fellowshipEquipmentFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
       MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record
        MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)
       WITH DISTINCT fellowships, this
      MATCH (fellowships)<-[:HAS]-(this)
      RETURN DISTINCT fellowships
      """
    )

  fellowshipEquipmentNotFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
        MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL  MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN DISTINCT defaulters
      """
    )

  fellowshipEquipmentNotFilledCount: Int!
    @cypher(
      statement: """
       MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (date:EquipmentDate {date:latestEquipmentDate})
        MATCH (date)<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
       WITH DISTINCT date, this, record

      OPTIONAL  MATCH (record)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Fellowship)

       WITH collect(DISTINCT fellowships) as filled, this
       MATCH (defaulters:Fellowship)<-[:HAS]-(this)
       WHERE NOT defaulters IN filled

      RETURN COUNT(DISTINCT defaulters)
      """
    )
}

extend type Fellowship {
  equipmentRecord: FellowshipEquipment
    @cypher(
      statement: """
      MATCH (this)
      MATCH (n:EquipmentDate)
      WITH max(n.date) as latestEquipmentDate, this
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(latestEquipmentDate)})
      RETURN record
      """
    )
}

###### CAMPAIGN TYPES #######

extend type Mutation {
  SetEquipmentDeadline(startDate: Date!, endDate: Date!, id: ID!): Campus
  CreateFellowshipEquipmentRecord(
    id: ID!
    offeringBags: Int!
    bluetoothSpeakers: Int!
    date: Date!
  ): Fellowship

  CreateGovernorshipEquipmentRecord(
    id: ID!
    pulpits: Int!
    date: Date!
  ): Governorship
}
