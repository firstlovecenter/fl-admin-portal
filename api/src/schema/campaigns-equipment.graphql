extend type HistoryLog {
  equpmentRecord: [EquipmentRecord!]!
    @relationship(type: "HAS_EQUIPMENT_RECORD", direction: OUT)
}

extend type GatheringService {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )

  equipmentFormConstituencyDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituencyDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormConstituenciesFilled: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituenciesFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormFellowshipsFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipsFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )

  equipmentFormFellowshipDefaulters: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*5]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN  COUNT(DISTINCT fellowship)
      """
    )
}

extend type Stream {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:GatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )
  equipmentFormConstituencyDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituencyDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormConstituenciesFilled: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituenciesFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormFellowshipsFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipsFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )

  equipmentFormFellowshipDefaulters: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )
}

extend type Council {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Constituency)-[:HAS]->(:Bacenta)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )
  equipmentFormConstituencyDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituencyDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE NOT  EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormConstituenciesFilled: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT con
      """
    )

  equipmentFormConstituenciesFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(con:Constituency)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH con, campaign.equipmentDate as date
      WHERE EXISTS {
       MATCH (con)-[:HAS_CAMPAIGN]->(conCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT con)
      """
    )

  equipmentFormFellowshipsFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipsFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )

  equipmentFormFellowshipDefaulters: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN  COUNT(DISTINCT fellowship)
      """
    )
}

extend type Constituency {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]->(:Bacenta)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )
  latestEquipmentRecord: EquipmentRecord
    @cypher(
      statement: """
       MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record limit 1
      """
    )

  equipmentFormFellowshipsFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipsFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )

  equipmentFormFellowshipDefaulters: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )
}

extend type Bacenta {
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Constituency)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS]-(:Fellowship)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )

  equipmentFormFellowshipsFilled: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipsFilledCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE  EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )

  equipmentFormFellowshipDefaulters: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN DISTINCT fellowship
      """
    )

  equipmentFormFellowshipDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(fellowship:Fellowship)
      MATCH (gs)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      WITH fellowship, campaign.equipmentDate as date
      WHERE NOT EXISTS {
       MATCH (fellowship)-[:HAS_CAMPAIGN]->(fellowshipCampaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)-[:HAS_EQUIPMENT_DATE]->(t:TimeGraph {date:date})
      }
      RETURN COUNT(DISTINCT fellowship)
      """
    )
}

extend type Fellowship {
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)<-[:HAS]-(:Bacenta)<-[:HAS]-(:Constituency)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(gatheringService:GatheringService)
      MATCH (gatheringService)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_EQUIPMENT_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph {date:date(campaign.equipmentDate)})
      RETURN sum(record.offeringBags)
      """
    )
  latestEquipmenRecord: EquipmentRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record  limit 1
      """
    )
}

###### CAMPAIGN TYPES #######
type EquipmentRecord {
  id: ID!
  created_at: DateTime!
  equipmentDate: TimeGraph!
    @relationship(type: "HAS_EQUIPMENT_DATE", direction: OUT)
  offeringBags: Int
  pulpits: Int
  serviceLog: ServiceLog
    @relationship(type: "HAS_EQUIPMENT_RECORD", direction: IN)
  church_name: String
    @auth(
      rules: [
        {
          roles: [
            "leaderFellowship"
            "leaderConstituency"
            "leaderCouncil"
            "leaderStream"
            "leaderGatheringService"
            "adminConstituency"
            "adminCouncil"
            "adminStream"
            "adminGatheringService"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_EQUIPMENT_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(church)
      WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      UNWIND labels(church) AS church_name
      RETURN church.name + ' ' + church_name
      """
    )
}

type EquipmentCampaign implements Campaign {
  id: ID!
  name: String!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_CAMPAIGN]-(church) WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      UNWIND labels(church) AS churchLevel
      RETURN church.name+ ' ' +churchLevel + ' Equipment Campaign'
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "leaderFellowship"
            "leaderConstituency"
            "leaderCouncil"
            "leaderStream"
            "leaderGatheringService"
            "adminConstituency"
            "adminCouncil"
            "adminStream"
            "adminGatheringService"
          ]
        }
      ]
    )
  type: String! @cypher(statement: "RETURN 'Equipment'")
  historyLog: [HistoryLog!]!
    @relationship(type: "HAS_EQUIPMENT_RECORD", direction: IN)
  gatheringService: GatheringService
    @relationship(type: "HAS_CAMPAIGN", direction: IN)
  leader: Member @relationship(type: "LEADS", direction: IN)
  target: Int!
}

extend type Member {
  campaign: Campaign @relationship(type: "LEADS", direction: OUT)
}

extend type Mutation {
  SetEquipmentDeadline(
    startDate: Date!
    endDate: Date!
    id: ID!
    target: Int!
  ): GatheringService
  CreateFellowshipEquipmentRecord(
    id: ID!
    offeringBags: Int!
    date: Date!
  ): EquipmentRecord

  CreateConstituencyEquipmentRecord(
    id: ID!
    pulpits: Int!
    date: Date!
  ): EquipmentRecord
}
