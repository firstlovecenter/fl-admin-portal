extend type ServiceLog {
  equpmentRecord: [EquipmentRecord!]!
    @relationship(type: "HAS_RECORD", direction: OUT)
}

extend type GatheringService {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record limit 1
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*3]->(constituencyRecord:EquipmentRecord)
      RETURN sum(constituencyRecord.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH  MAX(date.date) as lastDate, record limit 1
      MATCH (date:TimeGraph {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*5]->(fellowshipRecord:EquipmentRecord)
      return sum(fellowshipRecord.offeringBags)
      """
    )
  latestEquipmenRecord: EquipmentRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record  limit 1
      """
    )
}

extend type Stream {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record limit 1
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*2]->(constituencyRecord:EquipmentRecord)
      RETURN sum(constituencyRecord.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH  MAX(date.date) as lastDate, record limit 1
      MATCH (date:TimeGraph {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*4]->(fellowshipRecord:EquipmentRecord)
      return sum(fellowshipRecord.offeringBags)
      """
    )
}

extend type Council {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
       MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
       WITH MAX(date.date) as lastDate, record limit 1
       MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
       MATCH (record)-[:HAS]->(constituencyRecord:EquipmentRecord)
       RETURN sum(constituencyRecord.pulpits)
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH  MAX(date.date) as lastDate, record limit 1
      MATCH (date:TimeGraph {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*3]->(fellowshipRecord:EquipmentRecord)
      return sum(fellowshipRecord.offeringBags)
      """
    )
}

extend type Constituency {
  pulpits: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record.pulpits limit 1
      """
    )
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH  MAX(date.date) as lastDate, record limit 1
      MATCH (date:TimeGraph {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS*2]->(fellowshipRecord:EquipmentRecord)
      return sum(fellowshipRecord.offeringBags)
      """
    )
  latestEquipmenRecord: EquipmentRecord
    @cypher(
      statement: """
       MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record limit 1
      """
    )
}

extend type Bacenta {
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(campaign:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH  MAX(date.date) as lastDate, record limit 1
      MATCH (date:TimeGraph {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record)
      MATCH (record)-[:HAS]->(fellowshipRecord:EquipmentRecord)
      return sum(fellowshipRecord.offeringBags)
      """
    )
}

extend type Fellowship {
  offeringBags: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record.offeringBags  limit 1
      """
    )
  latestEquipmenRecord: EquipmentRecord
    @cypher(
      statement: """
      MATCH (this)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH MAX(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record  limit 1
      """
    )
}

###### CAMPAIGN TYPES #######
type EquipmentRecord {
  id: ID!
  created_at: DateTime!
  equipmentDate: TimeGraph!
    @relationship(type: "HAS_EQUIPMENT_DATE", direction: OUT)
  offeringBags: Int
  pulpits: Int
  serviceLog: ServiceLog @relationship(type: "HAS_RECORD", direction: IN)
  constituencyRecord: EquipmentRecord @relationship(type: "HAS", direction: IN)
  church_name: String
    @auth(
      rules: [
        {
          roles: [
            "leaderFellowship"
            "leaderConstituency"
            "leaderCouncil"
            "leaderStream"
            "leaderGatheringService"
            "adminConstituency"
            "adminCouncil"
            "adminStream"
            "adminGatheringService"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_RECORD]-(:ServiceLog)<-[:HAS_HISTORY]-(:EquipmentCampaign)<-[:HAS_CAMPAIGN]-(church)
      WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      UNWIND labels(church) AS church_name
      RETURN church.name + ' ' + church_name
      """
    )
}

type EquipmentCampaign implements Campaign {
  id: ID!
  name: String!
    @cypher(
      statement: """
      MATCH (this)<-[:HAS_CAMPAIGN]-(church) WHERE church:Fellowship OR church:Bacenta OR church:Constituency OR church:Council OR church:Stream OR church:GatheringService
      UNWIND labels(church) AS churchLevel
      RETURN church.name+ ' ' +churchLevel + ' Equipment Campaign'
      """
    )
    @auth(
      rules: [
        {
          roles: [
            "leaderFellowship"
            "leaderConstituency"
            "leaderCouncil"
            "leaderStream"
            "leaderGatheringService"
            "adminConstituency"
            "adminCouncil"
            "adminStream"
            "adminGatheringService"
          ]
        }
      ]
    )
  type: String! @cypher(statement: "RETURN 'Equipment'")
  serviceLog: [ServiceLog!]! @relationship(type: "HAS_HISTORY", direction: OUT)
  fellowship: Fellowship @relationship(type: "HAS_CAMPAIGN", direction: IN)
  bacenta: Bacenta @relationship(type: "HAS_CAMPAIGN", direction: IN)
  constituency: Constituency @relationship(type: "HAS_CAMPAIGN", direction: IN)
  council: Council @relationship(type: "HAS_CAMPAIGN", direction: IN)
  stream: Stream @relationship(type: "HAS_CAMPAIGN", direction: IN)
  gatheringService: GatheringService
    @relationship(type: "HAS_CAMPAIGN", direction: IN)
  leader: Member @relationship(type: "LEADS", direction: IN)
  target: Target @relationship(type: "HAS_TARGET", direction: OUT)
}

extend type Mutation {
  SetEquipmentDeadline(startDate: Date!, endDate: Date!, id: ID!): TimeGraph
  CreateFellowshipEquipmentRecord(
    id: ID!
    offeringBags: Int!
    date: Date!
  ): EquipmentRecord

  CreateConstituencyEquipmentRecord(
    constituencyRecordId: ID!
    pulpits: Int!
    date: Date!
  ): EquipmentRecord
}

extend type Query {
  latestEquipmentRecord(churchId: ID!): EquipmentRecord!
    @auth(
      rules: [
        {
          roles: [
            "leaderConstituency"
            "leaderFellowship"
            "leaderBacenta"
            "leaderCouncil"
            "leaderStream"
            "leaderGatheringService"
            "adminConstituency"
            "leaderFellowship"
            "adminCouncil"
            "adminStream"
            "adminGatheringService"
          ]
        }
      ]
    )
    @cypher(
      statement: """
      MATCH (church {id:$churchId})
      WHERE church:Constituency OR church:Council OR church:Stream OR church:GatheringService OR church:Bacenta OR church:Fellowship
      MATCH (church)-[:HAS_CAMPAIGN]->(:EquipmentCampaign)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_RECORD]->(record:EquipmentRecord)
      MATCH (record)-[:HAS_EQUIPMENT_DATE]->(date:TimeGraph)
      WITH max(date.date) as lastDate, record
      MATCH (date {date:lastDate})<-[:HAS_EQUIPMENT_DATE]-(record:EquipmentRecord)
      RETURN record limit 1
      """
    )
}
