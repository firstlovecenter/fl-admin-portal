extend type Mutation {
  BankServiceOffering(
    stream_name: String!
    serviceRecordId: ID!
    mobileNetwork: String!
    mobileNumber: String!
    momoName: String!
  ): ServiceRecord!
  SendPaymentOTP(
    serviceRecordId: String!
    streamName: String!
    reference: String
    otp: String!
  ): ServiceRecord!
  ConfirmOfferingPayment(
    stream_name: String!
    serviceRecordId: ID!
  ): ServiceRecord!
  SubmitBankingSlip(serviceRecordId: ID!, bankingSlip: String!): ServiceRecord!
}

extend type ServiceRecord {
  # Self Banking Properties
  offeringBankedBy: Member
    @relationship(type: "OFFERING_BANKED_BY", direction: OUT)
  sourceNumber: String
  sourceNetwork: String
  desc: String
  transactionTime: DateTime
}

extend type ServiceRecord {
  transactionTime: DateTime
  transactionReference: ID
  transactionOTP: String
  transactionStatus: String
  bankingProof: Boolean
    @cypher(
      statement: """
      MATCH (this)
      WITH this WHERE this.bankingSlip IS NOT NULL
      OR  this.transactionStatus = 'success'
      OR this.tellerConfirmationTime IS NOT NULL
      RETURN true
      """
    )
}

extend type Constituency {
  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )
}

extend type Council {
  constituencyBankingDefaultersThisWeek: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(this)

      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT constituencies)
      """
    )

  constituencyBankingDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

       RETURN COUNT(DISTINCT constituencies)
      """
    )
  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )
}

extend type Stream {
  constituencyBankingDefaultersThisWeek: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT constituencies)
      """
    )

  constituencyBankingDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

       RETURN COUNT(DISTINCT constituencies)
      """
    )

  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

       RETURN COUNT(DISTINCT council)
      """
    )

  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )
}

extend type GatheringService {
  constituencyBankingDefaultersThisWeek: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT constituencies)
      """
    )

  constituencyBankingDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(constituencies)
      WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(constituencies)
      WHERE constituencies:Constituency OR constituencies:ClosedConstituency
       MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

        RETURN COUNT(DISTINCT constituencies)
      """
    )

  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

       RETURN COUNT(DISTINCT council)
      """
    )
}

extend type Oversight {
  constituencyBankingDefaultersThisWeek: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:GatheringService)<-[:HAS]-(this)

      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies) WHERE constituencies:Constituency OR constituencies:ClosedConstituency

       WITH DISTINCT constituencies, this
       MATCH (constituencies)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:GatheringService)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT constituencies)
      """
    )

  constituencyBankingDefaulters: [Constituency!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(constituencies)
      WHERE constituencies:Constituency OR constituencies:ClosedConstituency
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT constituencies
      """
    )
  constituencyBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(constituencies)
      WHERE constituencies:Constituency OR constituencies:ClosedConstituency
       MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(constituencies)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

        RETURN COUNT(DISTINCT constituencies)
      """
    )

  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:GatheringService)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

       RETURN COUNT(DISTINCT council)
      """
    )
}
