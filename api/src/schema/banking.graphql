extend type Mutation {
  BankServiceOffering(
    serviceRecordId: ID!
    mobileNetwork: String!
    mobileNumber: String!
    momoName: String!
  ): ServiceRecord!
  BankRehearsalOffering(
    rehearsalRecordId: ID!
    mobileNetwork: String!
    mobileNumber: String!
    momoName: String!
  ): RehearsalRecord!
  SendPaymentOTP(
    serviceRecordId: String!
    reference: String
    otp: String!
  ): ServiceRecord!
  ConfirmOfferingPayment(serviceRecordId: ID!): ServiceRecord!
  SubmitBankingSlip(serviceRecordId: ID!, bankingSlip: String!): ServiceRecord!
  ManuallyConfirmOfferingPayment(serviceRecordId: ID!): ServiceRecord!
}

extend type RehearsalRecord {
  offeringBankedBy: Member
    @relationship(type: "OFFERING_BANKED_BY", direction: OUT)
  sourceNumber: String
  sourceNetwork: String
  desc: String
  transactionTime: DateTime
}

extend type RehearsalRecord {
  transactionTime: DateTime
  transactionReference: ID
  transactionOTP: String
  transactionStatus: String
  transactionError: String
  confirmedBy: ID!
  bankingProof: Boolean
    @cypher(
      statement: """
      MATCH (this)
      WITH this WHERE this.bankingSlip IS NOT NULL
      OR  this.transactionStatus = 'success'
      OR this.tellerConfirmationTime IS NOT NULL
      RETURN true
      """
    )
}

extend type ServiceRecord {
  # Self Banking Properties
  offeringBankedBy: Member
    @relationship(type: "OFFERING_BANKED_BY", direction: OUT)
  sourceNumber: String
  sourceNetwork: String
  desc: String
  transactionTime: DateTime
}

extend type ServiceRecord {
  transactionTime: DateTime
  transactionReference: ID
  transactionOTP: String
  transactionStatus: String
  transactionError: String
  confirmedBy: ID!
  bankingProof: Boolean
    @cypher(
      statement: """
      MATCH (this)
      WITH this WHERE this.bankingSlip IS NOT NULL
      OR  this.transactionStatus = 'success'
      OR this.tellerConfirmationTime IS NOT NULL
      RETURN true
      """
    )
}

extend type Governorship {
  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )
}

extend type Council {
  governorshipBankedThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankedThisWeekCount: Int
    @cypher(
      statement: """
       MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
         MATCH (governorships)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT governorships) as count
      """
    )
  governorshipBankingDefaultersThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

        WITH DISTINCT record, this
         WHERE record.noServiceReason IS NULL
           AND record.bankingSlip IS NULL
           AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
           AND record.tellerConfirmationTime IS NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
        MATCH (governorships)<-[:HAS]-(this)

        WITH COUNT(DISTINCT governorships) as count
       RETURN
       CASE
       WHEN count < 1 THEN null
       ELSE count
       END AS result
      """
    )

  governorshipBankingDefaulters: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

        WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )
}

extend type Stream {
  governorshipBankedThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankedThisWeekCount: Int
    @cypher(
      statement: """
       MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
        MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

      WITH COUNT(DISTINCT governorships) as count
       RETURN
       CASE
       WHEN count < 1 THEN null
       ELSE count
       END AS result
      """
    )
  governorshipBankingDefaultersThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(this)

       WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  governorshipBankingDefaulters: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Council)-[:HAS]->(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

        WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  councilBankedThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
      MATCH (council:Council)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankedThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

        WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  servicesNotBanked: [ServiceRecord!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_SERVICE]->(record:ServiceRecord)
      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      RETURN record
      """
    )

  councilBankingDefaultersThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
      MATCH (council:Council)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
}

extend type Campus {
  governorshipBankedThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankedThisWeekCount: Int
    @cypher(
      statement: """
       MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
        MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      WITH COUNT(DISTINCT governorships) as count
       RETURN
       CASE
       WHEN count < 1 THEN null
       ELSE count
       END AS result
      """
    )
  governorshipBankingDefaultersThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
       MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

        WITH DISTINCT record, this
         WHERE record.noServiceReason IS NULL
           AND record.bankingSlip IS NULL
           AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
           AND record.tellerConfirmationTime IS NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
        MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      WITH COUNT(DISTINCT governorships) as count
       RETURN
       CASE
       WHEN count < 1 THEN null
       ELSE count
       END AS result
      """
    )

  governorshipBankingDefaulters: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(governorships)
      WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(governorships)
      WHERE governorships:Governorship OR governorships:ClosedGovernorship
       MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

      WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
  councilBankedThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankedThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
  councilBankingDefaultersThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
}

extend type Oversight {
  governorshipBankedThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankedThisWeekCount: Int
    @cypher(
      statement: """
       MATCH (this)
       WITH date() as today, this
       WITH  today.weekDay as theDay, today, this
       WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
       WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

       MATCH (date:TimeGraph)
       USING INDEX date:TimeGraph(date)
       WHERE date.date IN dates
       MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
        MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

        WITH DISTINCT governorships, this
        MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      WITH COUNT(DISTINCT governorships) as count
       RETURN
       CASE
       WHEN count < 1 THEN null
       ELSE count
       END AS result
      """
    )
  governorshipBankingDefaultersThisWeek: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships) WHERE governorships:Governorship OR governorships:ClosedGovernorship

       WITH DISTINCT governorships, this
       MATCH (governorships)<-[:HAS]-(:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  governorshipBankingDefaulters: [Governorship!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Campus)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(governorships)
      WHERE governorships:Governorship OR governorships:ClosedGovernorship
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT governorships
      """
    )
  governorshipBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Campus)-[:HAS]->(:Stream)-[:HAS]->(:Council)-[:HAS]->(governorships)
      WHERE governorships:Governorship OR governorships:ClosedGovernorship
       MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(governorships)

       WHERE record.noServiceReason IS NULL
         AND record.bankingSlip IS NULL
         AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
         AND record.tellerConfirmationTime IS NULL

      WITH COUNT(DISTINCT governorships) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  councilBankedThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankedThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord) WHERE NOT record:NoService

       WITH DISTINCT record, this
        WHERE record.bankingSlip IS NOT NULL
          OR record.transactionStatus = 'success'
          OR record.tellerConfirmationTime IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
  councilBankingDefaulters: [Council!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Campus)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL


      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersCount: Int
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Campus)-[:HAS]->(:Stream)-[:HAS]->(council) WHERE council:Council OR council:ClosedCouncil
      MATCH (record:ServiceRecord)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council)

      WHERE record.noServiceReason IS NULL
        AND record.bankingSlip IS NULL
        AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
        AND record.tellerConfirmationTime IS NULL

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )

  councilBankingDefaultersThisWeek: [Council!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      RETURN DISTINCT council
      """
    )
  councilBankingDefaultersThisWeekCount: Int
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(council) WHERE council:Council OR council:ClosedCouncil

       WITH DISTINCT council, this
       MATCH (council:Council)<-[:HAS]-(:Stream)<-[:HAS]-(:Campus)<-[:HAS]-(this)

      WITH COUNT(DISTINCT council) as count
      RETURN
      CASE
      WHEN count < 1 THEN null
      ELSE count
      END AS result
      """
    )
}
