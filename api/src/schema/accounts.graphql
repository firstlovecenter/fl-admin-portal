type AccountTransaction {
  id: ID!
  timestamp: DateTime!
  description: String!
  account: String!
  amount: Float!
  charge: Float
  category: String!
  status: String!

  momoNumber: String
  momoName: String
  invoiceUrl: String

  loggedBy: Member! @relationship(type: "LOGGED_BY", direction: OUT)
}

extend type Campus {
  hrAmount: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(council:Council)
      RETURN SUM(council.hrAmount)
      """
    )
  bussingAmount: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(council:Council)
      RETURN SUM(council.bussingAmount)
      """
    )
  weekdayBalance: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(council:Council)
      RETURN SUM(council.weekdayBalance)
      """
    )
  bussingSocietyBalance: Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(council:Council)
      RETURN SUM(council.bussingSocietyBalance)
      """
    )
}

extend type Council {
  hrAmount: Float!
  bussingAmount: Float!
  weekdayBalance: Float!
  bussingSocietyBalance: Float
  transactions: [AccountTransaction!]!
    @relationship(type: "HAS_TRANSACTION", direction: OUT)
}

extend type Mutation {
  SetCouncilHRAmount(councilId: ID!, amount: Float!): Council!
    @auth(rules: [{ roles: ["adminCampus"] }])
    @cypher(
      statement: """
      MATCH (council:Council {id: $councilId})
        SET council.hrAmount = $amount
      RETURN council
      """
    )
  DepositIntoCouncilCurrentAccount(
    councilId: ID!
    weekdayBalanceDepositAmount: Float!
  ): AccountTransaction!

  DepositIntoCouncilBussingSociety(
    councilId: ID!
    bussingSocietyBalance: Float!
  ): AccountTransaction!

  ExpenseRequest(
    councilId: ID!
    expenseAmount: Float!
    expenseCategory: String!
    accountType: String!
    description: String!
    momoNumber: String!
    momoName: String!
    invoiceUrl: String!
  ): AccountTransaction!
    @auth(rules: [{ roles: ["leaderCouncil", "adminCampus"] }])
    @cypher(
      statement: """
      MATCH  (council:Council {id: $councilId})
      MATCH (requester:Member {auth_id: $auth.jwt.sub})

      WITH council, requester

      CREATE (transaction:AccountTransaction {id: randomUUID()})
        SET transaction.description = $description,
        transaction.amount = $expenseAmount,
        transaction.account = $accountType,
        transaction.category = $expenseCategory,
        transaction.status = 'pending approval',
        transaction.timestamp = datetime(),
        transaction.momoNumber = $momoNumber,
        transaction.momoName = $momoName,
        transaction.invoiceUrl = $invoiceUrl

      MERGE (council)-[:HAS_TRANSACTION]->(transaction)
      MERGE (requester)<-[:LOGGED_BY]-(transaction)

      RETURN transaction
      """
    )

  ApproveExpense(transactionId: ID!, charge: Float!): AccountTransaction!

  DeclineExpense(transactionId: ID!): AccountTransaction!
    @auth(rules: [{ roles: ["adminCampus", "leaderCampus"] }])
    @cypher(
      statement: """
      MATCH (transaction:AccountTransaction {id: $transactionId})
        SET transaction.status = 'declined'

      RETURN transaction
      """
    )

  DebitBussingSociety(
    councilId: ID!
    expenseAmount: Float!
    expenseCategory: String!
  ): AccountTransaction!
}
