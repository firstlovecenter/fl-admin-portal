extend type Hub {
  servicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  servicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  cancelledServicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  cancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  formDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
      WITH DISTINCT record, this

      OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
      WITH collect(DISTINCT fellowships) as services, this
      MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(this)
      WHERE NOT defaulters IN services

      WITH defaulters, this
      MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
       WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
      RETURN DISTINCT defaulters
      """
    )
  formDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
       WITH DISTINCT record, this

       OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
       WITH collect(DISTINCT fellowships) as services, this
       MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  bankingDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  bankedThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
}
extend type HubCouncil {
  activeHubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(hubs:Active:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )

  servicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  servicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  cancelledServicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  cancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  formDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
      WITH DISTINCT record, this

      OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
      WITH collect(DISTINCT fellowships) as services, this
      MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(this)
      WHERE NOT defaulters IN services

      WITH defaulters, this
      MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
       WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
      RETURN DISTINCT defaulters
      """
    )
  formDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
       WITH DISTINCT record, this

       OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
       WITH collect(DISTINCT fellowships) as services, this
       MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  bankingDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  bankedThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )

  hubRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCancelledRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubCancelledRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubFormDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
      RETURN DISTINCT defaulters
      """
    )
  hubFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  hubBankingDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubsBankedThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubsBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
}

extend type Ministry {
  servicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  servicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  cancelledServicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  cancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  formDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
      WITH DISTINCT record, this

      OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
      WITH collect(DISTINCT fellowships) as services, this
      MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)
      WHERE NOT defaulters IN services

      WITH defaulters, this
      MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
       WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
      RETURN DISTINCT defaulters
      """
    )
  formDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
       WITH DISTINCT record, this

       OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
       WITH collect(DISTINCT fellowships) as services, this
       MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek AND  time() > time('20:30'))
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  bankingDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  bankedThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )

  activeHubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:HubCouncil)-[:HAS]->(hubs:Active:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCancelledRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubCancelledRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
       MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncils:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubFormDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN DISTINCT defaulters
      """
    )
  hubFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  hubBankingDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubsBankedThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubsBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCouncilRehearsalsThisWeek: [HubCouncil!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(this)

      RETURN DISTINCT hubCouncils
      """
    )
  hubCouncilRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubCouncils)
      """
    )
}

extend type CreativeArts {

  servicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  servicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  cancelledServicesThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  cancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  formDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
      WITH DISTINCT record, this

      OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
      WITH collect(DISTINCT fellowships) as services, this
      MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)
      WHERE NOT defaulters IN services

      WITH defaulters, this
      MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
       WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
      RETURN DISTINCT defaulters
      """
    )
  formDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      OPTIONAL MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)
       WITH DISTINCT record, this

       OPTIONAL MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships:Active:HubFellowship)-[:MEETS_ON]->(day:ServiceDay)
       WITH collect(DISTINCT fellowships) as services, this
       MATCH (defaulters:Active:HubFellowship)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  bankingDefaultersThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
  bankedThisWeek: [Fellowship!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT fellowships
      """
    )
  bankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:ServiceRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(fellowships) WHERE fellowships:HubFellowship OR fellowships:ClosedFellowship

       WITH DISTINCT fellowships, this
       MATCH (fellowships)<-[:HAS]-(:Hub)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT fellowships)
      """
    )
}

extend type CreativeArts {
  activeHubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(:Ministry)-[:HAS]->(:HubCouncil)-[:HAS]->(hubs:Active:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCancelledRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubCancelledRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
       MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubFormDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
      RETURN DISTINCT defaulters
      """
    )
  hubFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
      RETURN COUNT(DISTINCT defaulters)
      """
    )
  hubBankingDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubsBankedThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubsBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCouncilServicesThisWeek: [HubCouncil!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN DISTINCT hubCouncils
      """
    )
  hubCouncilServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(:Ministry)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT hubCouncils)
      """
    )
  activeMinistryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS]->(ministry:Ministry) RETURN COUNT(DISTINCT ministry)
      """
    )
  ministryServicesThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministryServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministryCancelledServicesThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)


      RETURN DISTINCT ministries
      """
    )
  ministryCancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministryFormDefaultersThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week

      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries:Active:Ministry)
       MATCH (ministries)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT ministries) as services, this
       MATCH (defaulters:Active:Ministry)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN DISTINCT defaulters
      """
    )
  ministryFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries:Active:Ministry)
       MATCH (ministries)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT ministries) as services, this
       MATCH (defaulters:Active:Ministry)<-[:HAS]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  ministryBankingDefaultersThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Ministry OR ministries:ClosedMinistry

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministryBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Ministry OR ministries:ClosedMinistry

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministriesBankedThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministriesBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
}

extend type Campus {
  activeHubCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(:CreativeArts)-[:HAS]->(:Ministry)-[:HAS]->(:HubCouncil)-[:HAS]->(hubs:Active:Hub)
      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(:HubCouncil)<-[:HAS]-(:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCancelledRehearsalsThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubCancelledRehearsalsThisWeekCount: Int!
    @cypher(
      statement: """
       MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubFormDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
      RETURN DISTINCT defaulters
      """
    )
  hubFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs:Active:Hub)
       MATCH (hubs)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT hubs) as services, this
       MATCH (defaulters:Active:Hub)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  hubBankingDefaultersThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )
  hubsBankedThisWeek: [Hub!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT hubs
      """
    )
  hubsBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubs) WHERE hubs:Hub OR hubs:ClosedHub

       WITH DISTINCT hubs, this
       MATCH (hubs)<-[:HAS]-(hubCouncil:HubCouncil)<-[:HAS]-(ministry:Ministry)<-[:HAS]-(creativeArts:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT hubs)
      """
    )

  hubCouncilServicesThisWeek: [HubCouncil!]!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT hubCouncils
      """
    )
  hubCouncilServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      WITH date() as today, this
      WITH  today.weekDay as theDay, today, this
      WITH date(today) - duration({days: (theDay - 2)}) AS startDate, this
      WITH [day in range(0, 5) | startDate + duration({days: day})] AS dates, this

      MATCH (date:TimeGraph)
      USING INDEX date:TimeGraph(date)
      WHERE date.date IN dates
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT this, record WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(hubCouncils) WHERE hubCouncils:HubCouncil OR hubCouncils:ClosedHubCouncil

       WITH DISTINCT hubCouncils, this
       MATCH (hubCouncils)<-[:HAS]-(:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT hubCouncils)
      """
    )
  activeMinistryCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS_MINISTRY]->(creativeArts:CreativeArts)-[:HAS]->(ministry:Ministry) RETURN COUNT(DISTINCT ministry)
      """
    )
  ministryServicesThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministryServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.attendance IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministryCancelledServicesThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)


      RETURN DISTINCT ministries
      """
    )
  ministryCancelledServicesThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this WHERE record.noServiceReason IS NOT NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministryFormDefaultersThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week

      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries:Active:Ministry)
       MATCH (ministries)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT ministries) as services, this
       MATCH (defaulters:Active:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN DISTINCT defaulters
      """
    )
  ministryFormDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries:Active:Ministry)
       MATCH (ministries)-[:MEETS_ON]->(day:ServiceDay)

       WITH collect(DISTINCT ministries) as services, this
       MATCH (defaulters:Active:Ministry)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)
       WHERE NOT defaulters IN services

       WITH defaulters, this
       MATCH (defaulters)-[:MEETS_ON]->(day:ServiceDay)
        WHERE day.dayNumber < date().dayOfWeek OR (day.dayNumber = date().dayOfWeek)
       RETURN COUNT(DISTINCT defaulters)
      """
    )
  ministryBankingDefaultersThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Ministry OR ministries:ClosedMinistry

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministryBankingDefaultersThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
          AND record.bankingSlip IS NULL
          AND (record.transactionStatus IS NULL OR record.transactionStatus <> 'success')
          AND record.tellerConfirmationTime IS NULL
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Ministry OR ministries:ClosedMinistry

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
  ministriesBankedThisWeek: [Ministry!]!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN DISTINCT ministries
      """
    )
  ministriesBankedThisWeekCount: Int!
    @cypher(
      statement: """
      MATCH (this)
      MATCH (date:TimeGraph) WHERE date.date.week = date().week
      MATCH (date)<-[:SERVICE_HELD_ON]-(record:RehearsalRecord)

       WITH DISTINCT record, this
        WHERE record.noServiceReason IS NULL
         AND (record.bankingSlip IS NOT NULL OR record.transactionStatus ='success' OR record.tellerConfirmationTime IS NOT NULL)
       MATCH (record)<-[:HAS_SERVICE]-(:ServiceLog)<-[:HAS_HISTORY]-(ministries) WHERE ministries:Stream OR ministries:ClosedStream

       WITH DISTINCT ministries, this
       MATCH (ministries)<-[:HAS]-(:CreativeArts)<-[:HAS_MINISTRY]-(this)

      RETURN COUNT(DISTINCT ministries)
      """
    )
}
