extend type GatheringService {
  vehiclesHaveBeenPaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehiclesToBePaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehicleAmountHasBeenPaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  vehicleAmountToBePaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  bacentasToBePaid(arrivalDate: String!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*4]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0
      WITH DISTINCT bacentas
      RETURN bacentas
      """
    )
}

extend type Stream {
  vehiclesHaveBeenPaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehiclesToBePaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehicleAmountHasBeenPaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  vehicleAmountToBePaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  bacentasToBePaid(arrivalDate: String!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*3]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0
      WITH DISTINCT bacentas
      RETURN bacentas
      """
    )
}

extend type Council {
  arrivalsPayers: [Member!]!
    @relationship(type: "IS_ARRIVALS_PAYER_FOR", direction: IN)
  vehiclesHaveBeenPaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehiclesToBePaidCount(arrivalDate: String!): Int!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN COUNT(record)
      """
    )
  vehicleAmountHasBeenPaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus = 'success'
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  vehicleAmountToBePaid(arrivalDate: String!): Float!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0 AND record.transactionStatus IS NULL
      WITH DISTINCT record
      RETURN SUM(record.vehicleTopUp)
      """
    )
  bacentasToBePaid(arrivalDate: String!): [Bacenta!]!
    @cypher(
      statement: """
      MATCH (this)-[:HAS*2]->(bacentas:Active:Bacenta)
      MATCH (bacentas)-[:HAS_HISTORY]->(:ServiceLog)-[:HAS_BUSSING]->(bussing:BussingRecord)-[:BUSSED_ON]->(date:TimeGraph)
      WHERE date.date = date($arrivalDate)
      MATCH (bussing)-[:INCLUDES_RECORD]->(record:VehicleRecord)
        WHERE record.vehicleTopUp > 0
      WITH DISTINCT bacentas
      RETURN bacentas
      """
    )
}

extend type VehicleRecord {
  paymentConfirmationTime: DateTime
  paymentConfirmer: Member
    @relationship(type: "CONFIRMED_BPAYMENT_FOR", direction: IN)
}

extend type Member {
  isArrivalsPayerForCouncil: [Council!]!
    @relationship(type: "IS_ARRIVALS_PAYER_FOR", direction: OUT)
}

extend type Mutation {
  MakeCouncilArrivalsPayer(councilId: ID!, arrivalsPayerId: ID!): Member!
  RemoveCouncilArrivalsPayer(councilId: ID!, arrivalsPayerId: ID!): Member!
}
